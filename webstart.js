(()=>{"use strict";var e={142:(e,t)=>{var r,s;Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyOp=t.UniOp=t.BinOp=void 0,function(e){e[e.Plus=0]="Plus",e[e.Minus=1]="Minus",e[e.Mul=2]="Mul",e[e.IDiv=3]="IDiv",e[e.Mod=4]="Mod",e[e.Eq=5]="Eq",e[e.Neq=6]="Neq",e[e.Lte=7]="Lte",e[e.Gte=8]="Gte",e[e.Lt=9]="Lt",e[e.Gt=10]="Gt",e[e.Is=11]="Is",e[e.And=12]="And",e[e.Or=13]="Or"}(r=t.BinOp||(t.BinOp={})),function(e){e[e.Neg=0]="Neg",e[e.Not=1]="Not"}(s=t.UniOp||(t.UniOp={})),t.stringifyOp=function(e){switch(e){case r.Plus:return"+";case r.Minus:return"-";case r.Mul:return"*";case r.IDiv:return"//";case r.Mod:return"%";case r.Eq:return"==";case r.Neq:return"!=";case r.Lte:return"<=";case r.Gte:return">=";case r.Lt:return"<";case r.Gt:return">";case r.Is:return"is";case r.And:return"and";case r.Or:return"or";case s.Neg:return"-";case s.Not:return"not";default:throw new Error("undefined op")}}},244:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.compile=t.makeLocals=t.emptyEnv=void 0;const s=r(142),n=r(591);function i(e){const t=[];return e.forEach((e=>{t.push(`(local $${e} i32)`)})),t}function O(e,t){switch(e.tag){case"store":return[...o(e.start,t),...o(e.offset,t),...o(e.value,t),"call $store"];case"assign":var r=a(e.value,t);return t.locals.has(e.name)?r.concat([`(local.set $${e.name})`]):r.concat([`(global.set $${e.name})`]);case"return":return(r=o(e.value,t)).push("return"),r;case"expr":return a(e.expr,t).concat(["(local.set $$last)"]);case"pass":return[];case"ifjmp":const s=t.labels.findIndex((t=>t===e.thn)),n=t.labels.findIndex((t=>t===e.els));return[...o(e.cond,t),`(if \n          (then\n            (local.set $$selector (i32.const ${s}))\n            (br $loop)\n          ) \n          (else \n            (local.set $$selector (i32.const ${n}))\n            (br $loop)\n          )\n         )`];case"jmp":return[`(local.set $$selector (i32.const ${t.labels.findIndex((t=>t===e.lbl))}))`,"(br $loop)"]}}function a(e,t){switch(e.tag){case"value":return o(e.value,t);case"binop":return[...o(e.left,t),...o(e.right,t),$(e.op)];case"uniop":const O=o(e.expr,t);switch(e.op){case s.UniOp.Neg:return["(i32.const 0)",...O,"(i32.sub)"];case s.UniOp.Not:return["(i32.const 0)",...O,"(i32.eq)"]}case"builtin1":const a=e.a.type,p=o(e.arg,t);var r=e.name;return"print"===e.name&&a===n.NUM?r="print_num":"print"===e.name&&a===n.BOOL?r="print_bool":"print"===e.name&&a===n.NONE&&(r="print_none"),p.concat([`(call $${r})`]);case"builtin2":return[...o(e.left,t),...o(e.right,t),`(call $${e.name})`];case"call":var i=e.arguments.map((e=>o(e,t))).flat();return i.push(`(call $${e.name})`),i;case"alloc":return[...o(e.amount,t),"call $alloc"];case"load":return[...o(e.start,t),...o(e.offset,t),"call $load"]}}function o(e,t){switch(e.tag){case"num":case"wasmint":return["(i32.const "+e.value+")"];case"bool":return[`(i32.const ${Number(e.value)})`];case"none":return["(i32.const 0)"];case"id":return t.locals.has(e.name)?[`(local.get $${e.name})`]:[`(global.get $${e.name})`]}}function $(e){switch(e){case s.BinOp.Plus:return"(i32.add)";case s.BinOp.Minus:return"(i32.sub)";case s.BinOp.Mul:return"(i32.mul)";case s.BinOp.IDiv:return"(i32.div_s)";case s.BinOp.Mod:return"(i32.rem_s)";case s.BinOp.Eq:return"(i32.eq)";case s.BinOp.Neq:return"(i32.ne)";case s.BinOp.Lte:return"(i32.le_s)";case s.BinOp.Gte:return"(i32.ge_s)";case s.BinOp.Lt:return"(i32.lt_s)";case s.BinOp.Gt:return"(i32.gt_s)";case s.BinOp.Is:return"(i32.eq)";case s.BinOp.And:return"(i32.and)";case s.BinOp.Or:return"(i32.or)"}}function p(e,t){const r=o(e.value,t);return t.locals.has(e.name)?[...r,`(local.set $${e.name})`]:[...r,`(global.set $${e.name})`]}function l(e,t){var r=new Set;e.inits.forEach((e=>r.add(e.name))),r.add("$last"),r.add("$selector"),r.forEach(t.locals.add,t.locals),e.parameters.forEach((e=>t.locals.add(e.name))),t.labels=e.body.map((e=>e.label));const s=i(r).join("\n"),n=e.inits.map((e=>p(e,t))).flat().join("\n");var a=e.parameters.map((e=>`(param $${e.name} i32)`)).join(" "),o="(local.set $$selector (i32.const 0))\n";o+="(loop $loop\n";var $="(local.get $$selector)\n";return $+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{$=`(block ${e.label}\n              ${$}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>O(e,t).join("\n"))).join("\n")}\n            `})),o+=$,o+=") ;; end $loop",t.locals.clear(),[`(func $${e.name} ${a} (result i32)\n    ${s}\n    ${n}\n    ${o}\n    (i32.const 0)\n    (return))`]}t.emptyEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:0},t.makeLocals=i,t.compile=function(e,t){const r=t,s=new Set;s.add("$last"),s.add("$selector"),s.forEach(t.locals.add,t.locals);const n=i(s),a=e.inits.map((e=>e.name));console.log(e.inits,a);const o=[];e.funs.forEach((e=>{o.push(l(e,r).join("\n"))}));const $=e.classes.map((e=>function(e,t){const r=[...e.methods];return r.forEach((t=>t.name=`${e.name}$${t.name}`)),r.map((e=>l(e,t))).flat()}(e,r))).flat(),u=o.concat($).join("\n\n"),c=e.inits.map((e=>p(e,r))).flat();r.labels=e.body.map((e=>e.label));var h="(local.set $$selector (i32.const 0))\n";h+="(loop $loop\n";var f="(local.get $$selector)\n";f+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{f=`(block ${e.label}\n              ${f}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>O(e,r).join("\n"))).join("\n")}\n            `})),h+=f;const g=[...n,...c,h+=") ;; end $loop"];return r.locals.clear(),{globals:a,functions:u,mainSource:g.join("\n"),newEnv:r}}},752:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.wasmErrorImports=t.importObjectErrors=t.flattenAssertNotNone=t.assert_not_none=t.OperationOnNoneError=t.OperationOnNoneNote=t.flattenDivideByZero=t.divide_by_zero=t.DivideByZeroError=t.DivideByZeroNote=t.getRE=t.registerRE=t.runtimeErrorRegistry=t.RuntimeError=t.drawSquiggly=t.fullSrcLine=t.TYPE_ERROR_STRING=t.RUNTIME_ERROR_STRING=void 0;const s=r(850);function n(e,t,r,s){const n=t-r+1;return e.slice(n,s)}function i(e,t,r,s){return e===t?`${" ".repeat(r-1)}${"^".repeat(s-r)}`:""}t.RUNTIME_ERROR_STRING="RUNTIME ERROR",t.TYPE_ERROR_STRING="TYPE ERROR",t.fullSrcLine=n,t.drawSquiggly=i;class O extends Error{constructor(e,r){var s,n;const i=new.target.prototype;super(),this.__proto__=i,this.a=null!==(s=r)&&void 0!==s?s:void 0,this.SRC=null!==(n=e)&&void 0!==n?n:void 0,this.name=t.RUNTIME_ERROR_STRING,this.message="You shouldn't see this. Compiler's cursed. Check if you prepared the error before throwing it out.",this.note=""}getA(){return this.a}prepare(){var e="";if(this.a&&this.SRC){const t=this.a,r=this.SRC,s=t.fromLoc,O=t.endLoc,a=t.eolLoc;e=` on line ${s.row} at col ${s.col}\n\n${n(r,s.srcIdx,s.col,a.srcIdx)}\n${i(s.row,O.row,s.col,O.col)}`}const t=this.note+e;this.message=t}getErrMsg(){return String(this)}}function a(e,r=t.runtimeErrorRegistry){return r.push(e),r.length-1}function o(e,r=t.runtimeErrorRegistry){return r[e]}function $(e,t){if(0===e){const e=o(t);throw e.prepare(),e}return e}t.RuntimeError=O,t.runtimeErrorRegistry=new Array,t.registerRE=a,t.getRE=o,t.DivideByZeroNote="cannot divide by zero";class p extends O{constructor(){super(...arguments),this.note=t.DivideByZeroNote}}t.DivideByZeroError=p,t.divide_by_zero=$,t.flattenDivideByZero=function(e,r){const n=a(new p(t.importObjectErrors.src,e));return{tag:"expr",expr:{tag:"call",name:"divide_by_zero",arguments:[r,(0,s.flattenWasmInt)(n)]}}},t.OperationOnNoneNote="cannot perform operation on none";class l extends O{constructor(){super(...arguments),this.note=t.OperationOnNoneNote}}t.OperationOnNoneError=l,t.assert_not_none=$,t.flattenAssertNotNone=function(e,r){const n=a(new l(t.importObjectErrors.src,e));return{tag:"expr",expr:{tag:"call",name:"assert_not_none",arguments:[r,(0,s.flattenWasmInt)(n)]}}},t.importObjectErrors={src:"",assert_not_none:t.assert_not_none,divide_by_zero:t.divide_by_zero},t.wasmErrorImports='\n    (func $assert_not_none (import "errors" "assert_not_none") (param i32) (param i32) (result i32))\n    (func $divide_by_zero (import "errors" "divide_by_zero")  (param i32) (param i32) (result i32))\n'},850:function(e,t,r){var s=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,n)}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&s(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.flattenWasmInt=t.lowerProgram=void 0;const O=i(r(142)),a=i(r(752)),o=new Map;function $(e){if(o.has(e)){var t=o.get(e);return o.set(e,t+1),e+(t+1)}return o.set(e,1),e+1}function p(e,t){return e.map((e=>function(e,t){var r=[],s={a:e.a,label:$("$startFun"),stmts:[]};r.push(s);var n=h(e.body,r,t);return{...e,inits:[...n,...l(e.inits)],body:r}}(e,t))).flat()}function l(e,t){return e.map((e=>{return t=e,{...t,value:c(t.value)};var t}))}function u(e,t){return e.map((e=>function(e,t){return{...e,fields:l(e.fields),methods:p(e.methods,t)}}(e,t)))}function c(e){switch(e.tag){case"num":return{...e,value:BigInt(e.value)};case"bool":case"none":return e}}function h(e,t,r){var s=[];return e.forEach((e=>{s.push(...function(e,t,r){switch(e.tag){case"assign":var[s,n,i]=f(e.value,r);return t[t.length-1].stmts.push(...n,{a:e.a,tag:"assign",name:e.name,value:i}),s;case"return":var[s,n,O]=g(e.value,r);return t[t.length-1].stmts.push(...n,{tag:"return",a:e.a,value:O}),s;case"expr":var[a,o,p]=f(e.expr,r);return t[t.length-1].stmts.push(...o,{tag:"expr",a:e.a,expr:p}),a;case"pass":return[];case"field-assign":{var[l,u,c]=g(e.obj,r),[x,m,P]=g(e.value,r);if("class"!==e.obj.a.type.tag)throw new Error("Compiler's cursed, go home.");const s={tag:"wasmint",value:r.classes.get(e.obj.a.type.name).get(e.field)[0]};return d(t,...u,...m,{tag:"store",a:e.a,start:c,offset:s,value:P}),[...l,...x]}case"if":var Q=$("$then"),w=$("$else"),S=$("$end"),b={tag:"jmp",lbl:S},[y,I,v]=g(e.cond,r),R={tag:"ifjmp",cond:v,thn:Q,els:w};d(t,...I,R),t.push({a:e.a,label:Q,stmts:[]});var W=h(e.thn,t,r);d(t,b),t.push({a:e.a,label:w,stmts:[]});var q=h(e.els,t,r);return d(t,b),t.push({a:e.a,label:S,stmts:[]}),[...y,...W,...q];case"while":var _=$("$whilestart"),k=$("$whilebody"),Z=$("$whileend");d(t,{tag:"jmp",lbl:_}),t.push({a:e.a,label:_,stmts:[]});var[y,I,v]=g(e.cond,r);d(t,...I,{tag:"ifjmp",cond:v,thn:k,els:Z}),t.push({a:e.a,label:k,stmts:[]});var j=h(e.body,t,r);return d(t,{tag:"jmp",lbl:_}),t.push({a:e.a,label:Z,stmts:[]}),[...y,...j]}}(e,t,r))})),s}function f(e,t){switch(e.tag){case"uniop":var[r,s,n]=g(e.expr,t);return[r,s,{...e,expr:n}];case"binop":var[i,o,p]=g(e.left,t),[l,u,h]=g(e.right,t),f=[];return e.op!=O.BinOp.IDiv&&e.op!=O.BinOp.Mod||f.push(a.flattenDivideByZero(e.a,h)),[[...i,...l],[...o,...u,...f],{...e,left:p,right:h}];case"builtin1":var[r,s,n]=g(e.arg,t);return[r,s,{tag:"builtin1",a:e.a,name:e.name,arg:n}];case"builtin2":var[i,o,p]=g(e.left,t),[l,u,h]=g(e.right,t);return[[...i,...l],[...o,...u],{...e,left:p,right:h}];case"call":const x=e.arguments.map((e=>g(e,t))),m=x.map((e=>e[0])).flat(),P=x.map((e=>e[1])).flat(),Q=x.map((e=>e[2])).flat();return[m,P,{...e,arguments:Q}];case"method-call":{const[r,s,n]=g(e.obj,t),i=e.arguments.map((e=>g(e,t))),O=i.map((e=>e[0])).flat(),o=i.map((e=>e[1])).flat(),$=i.map((e=>e[2])).flat();var d=e.obj.a;if("class"!==d.type.tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+d.type.tag);const p=d.type.name;return[[...r,...O],[...s,a.flattenAssertNotNone(e.a,n),...o],{tag:"call",name:`${p}$${e.method}`,arguments:[n,...$]}]}case"lookup":{const[r,s,n]=g(e.obj,t);if("class"!==e.obj.a.type.tag)throw new Error("Compiler's cursed, go home");const i=t.classes.get(e.obj.a.type.name),[O,o]=i.get(e.field);return[r,[...s,a.flattenAssertNotNone(e.a,n)],{tag:"load",start:n,offset:{tag:"wasmint",value:O}}]}case"construct":const w=[...t.classes.get(e.name).entries()],S=$("newObj"),b={tag:"alloc",amount:{tag:"wasmint",value:w.length}},y=w.map((e=>{const[t,[r,s]]=e;return{tag:"store",start:{tag:"id",name:S},offset:{tag:"wasmint",value:r},value:s}}));return[[{name:S,type:e.a.type,value:{tag:"none"}}],[{tag:"assign",name:S,value:b},...y,{tag:"expr",expr:{tag:"call",name:`${e.name}$__init__`,arguments:[{a:e.a,tag:"id",name:S}]}}],{a:e.a,tag:"value",value:{a:e.a,tag:"id",name:S}}];case"id":return[[],[],{a:e.a,tag:"value",value:{...e}}];case"literal":return[[],[],{a:e.a,tag:"value",value:c(e.value)}]}}function g(e,t){var[r,s,n]=f(e,t);if("value"===n.tag)return[r,s,n.value];var i=$("valname"),O={tag:"assign",a:e.a,name:i,value:n};return[[...r,{a:e.a,name:i,type:e.a.type,value:{tag:"none"}}],[...s,O],{tag:"id",name:i,a:e.a}]}function d(e,...t){e[e.length-1].stmts.push(...t)}t.lowerProgram=function(e,t){var r=[],s={a:e.a,label:$("$startProg"),stmts:[]};r.push(s);var n=h(e.stmts,r,t);return{a:e.a,funs:p(e.funs,t),inits:[...n,...l(e.inits)],classes:u(e.classes,t),body:r}},t.flattenWasmInt=function(e){return{tag:"wasmint",value:e}}},660:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.traverseHelper=t.traverse=t.isClassDef=t.isFunDef=t.isVarInit=t.traverseDefs=t.traverseClassHelper=t.traverseClass=t.traverseFunDefHelper=t.traverseFunDef=t.traverseVarInitHelper=t.traverseVarInit=t.traverseParameters=t.traverseParameterHelper=t.traverseParameter=t.traverseType=t.traverseStmtHelper=t.traverseStmt=t.traverseArguments=t.traverseExprHelper=t.traverseExpr=t.traverseLiteralHelper=t.traverseLiteral=t.nextLineBreakLoc=t.indToLoc=t.binarySearch=void 0;const s=r(557),n=r(142),i=r(591),O=r(665);function a(e,t){for(var r=0,s=e.length,n=0;r<=s;){const i=r+s>>1;e[i]<t?(n=i,r=i+1):s=i-1}return n}function o(e,t){const r=a(t.lineBreakIndices,e)+1;return{row:r,col:e-t.lineBreakIndices[r-1],srcIdx:e}}function $(e,t){const r=1===e.col?e.row-1:e.row;return{row:r,col:t.lineBreakIndices[r]-t.lineBreakIndices[r-1],srcIdx:t.lineBreakIndices[r]}}function p(e,t=!1){return function(r,s,n,...i){const O=o(r.from,n),a=e(r,s,n,...i),p=o(r.to,n),l=$(p,n);return t?{...a,a:{...a.a,fromLoc:O,endLoc:p,eolLoc:l,src:s}}:{...a,a:{...a.a,fromLoc:O,endLoc:p,eolLoc:l}}}}function l(e,t,r){switch(e.type.name){case"Number":return{tag:"num",value:Number(t.substring(e.from,e.to))};case"Boolean":return{tag:"bool",value:"True"===t.substring(e.from,e.to)};case"None":return{tag:"none"};default:throw new Error("Not literal")}}function u(e,r,s){switch(e.type.name){case"Number":case"Boolean":case"None":return{tag:"literal",value:(0,t.traverseLiteral)(e,r,s)};case"VariableName":return{tag:"id",name:r.substring(e.from,e.to)};case"CallExpression":e.firstChild();const $=(0,t.traverseExpr)(e,r,s);e.nextSibling();let p=c(e,r,s);if(e.parent(),"lookup"===$.tag)return{tag:"method-call",obj:$.obj,method:$.field,arguments:p};if("id"===$.tag){const e=$.name;return"print"===e||"abs"===e?{tag:"builtin1",name:e,arg:p[0]}:"max"===e||"min"===e||"pow"===e?{tag:"builtin2",name:e,left:p[0],right:p[1]}:{tag:"call",name:e,arguments:p}}throw new Error("Unknown target while parsing assignment");case"BinaryExpression":e.firstChild();const l=(0,t.traverseExpr)(e,r,s);switch(e.nextSibling(),r.substring(e.from,e.to)){case"+":O=n.BinOp.Plus;break;case"-":O=n.BinOp.Minus;break;case"*":O=n.BinOp.Mul;break;case"//":O=n.BinOp.IDiv;break;case"%":O=n.BinOp.Mod;break;case"==":O=n.BinOp.Eq;break;case"!=":O=n.BinOp.Neq;break;case"<=":O=n.BinOp.Lte;break;case">=":O=n.BinOp.Gte;break;case"<":O=n.BinOp.Lt;break;case">":O=n.BinOp.Gt;break;case"is":O=n.BinOp.Is;break;case"and":O=n.BinOp.And;break;case"or":O=n.BinOp.Or;break;default:throw new Error("Could not parse op at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}e.nextSibling();const u=(0,t.traverseExpr)(e,r,s);return e.parent(),{tag:"binop",op:O,left:l,right:u};case"ParenthesizedExpression":e.firstChild(),e.nextSibling();var i=(0,t.traverseExpr)(e,r,s);return e.parent(),i;case"UnaryExpression":var O;switch(e.firstChild(),r.substring(e.from,e.to)){case"-":O=n.UniOp.Neg;break;case"not":O=n.UniOp.Not;break;default:throw new Error("Could not parse op at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}return e.nextSibling(),i=(0,t.traverseExpr)(e,r,s),e.parent(),{tag:"uniop",op:O,expr:i};case"MemberExpression":e.firstChild();var a=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var o=r.substring(e.from,e.to);return e.parent(),{tag:"lookup",obj:a,field:o};case"self":return{tag:"id",name:"self"};default:throw new Error("Could not parse expr at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}}function c(e,r,s){e.firstChild();const n=[];for(e.nextSibling();")"!==e.type.name;){let i=(0,t.traverseExpr)(e,r,s);n.push(i),e.nextSibling(),e.nextSibling()}return e.parent(),n}function h(e,r,s){switch(e.node.type.name){case"ReturnStatement":return e.firstChild(),n=e.nextSibling()?(0,t.traverseExpr)(e,r,s):{tag:"literal",value:{tag:"none"}},e.parent(),{tag:"return",value:n};case"AssignStatement":e.firstChild();const $=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var n=(0,t.traverseExpr)(e,r,s);if(e.parent(),"lookup"===$.tag)return{tag:"field-assign",obj:$.obj,field:$.field,value:n};if("id"===$.tag)return{tag:"assign",name:$.name,value:n};throw new Error("Unknown target while parsing assignment");case"ExpressionStatement":e.firstChild();const p=(0,t.traverseExpr)(e,r,s);return e.parent(),{tag:"expr",expr:p};case"IfStatement":e.firstChild(),e.nextSibling();var i=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.firstChild();for(var O=[],a=[];e.nextSibling();)O.push((0,t.traverseStmt)(e,r,s));if(e.parent(),e.nextSibling()){for(e.nextSibling(),e.firstChild();e.nextSibling();)a.push((0,t.traverseStmt)(e,r,s));e.parent()}return e.parent(),{tag:"if",cond:i,thn:O,els:a};case"WhileStatement":e.firstChild(),e.nextSibling(),i=(0,t.traverseExpr)(e,r,s),e.nextSibling();var o=[];for(e.firstChild();e.nextSibling();)o.push((0,t.traverseStmt)(e,r,s));return e.parent(),e.parent(),{tag:"while",cond:i,body:o};case"PassStatement":return{tag:"pass"};default:throw new Error("Could not parse stmt at "+e.node.from+" "+e.node.to+": "+r.substring(e.from,e.to))}}function f(e,t,r){let s=t.substring(e.from,e.to);switch(s){case"int":return i.NUM;case"bool":return i.BOOL;default:return(0,i.CLASS)(s)}}function g(e,t,r){let s=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw new Error("Missed type annotation for parameter "+s);e.firstChild(),e.nextSibling();let n=f(e,t);return e.parent(),{name:s,type:n}}function d(e,r,s){e.firstChild();const n=[];for(e.nextSibling();")"!==e.type.name;)n.push((0,t.traverseParameter)(e,r,s)),e.nextSibling(),e.nextSibling();return e.parent(),n}function x(e,r,s){e.firstChild();var n=r.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw e.parent(),Error("invalid variable init");e.firstChild(),e.nextSibling();const i=f(e,r);e.parent(),e.nextSibling(),e.nextSibling();var O=(0,t.traverseLiteral)(e,r,s);return e.parent(),{name:n,type:i,value:O}}function m(e,r,s){e.firstChild(),e.nextSibling();var n=r.substring(e.from,e.to);e.nextSibling();var O=d(e,r,s);e.nextSibling();let a=i.NONE;"TypeDef"===e.type.name&&(e.firstChild(),a=f(e,r),e.parent(),e.nextSibling()),e.firstChild();for(var o=[],$=[],p=e.nextSibling();p&&Q(e);)o.push((0,t.traverseVarInit)(e,r,s)),p=e.nextSibling();for(;p;)$.push((0,t.traverseStmt)(e,r,s)),p=e.nextSibling();return e.parent(),e.parent(),{name:n,parameters:O,ret:a,inits:o,body:$}}function P(e,r,s){const n=[],O=[];e.firstChild(),e.nextSibling();const a=r.substring(e.from,e.to);for(e.nextSibling(),e.nextSibling(),e.firstChild();e.nextSibling();)if(Q(e))n.push((0,t.traverseVarInit)(e,r,s));else{if(!w(e))throw new Error(`Could not parse the body of class: ${a}`);O.push((0,t.traverseFunDef)(e,r,s))}return e.parent(),e.parent(),O.find((e=>"__init__"===e.name))||O.push({name:"__init__",parameters:[{name:"self",type:(0,i.CLASS)(a)}],ret:i.NONE,inits:[],body:[]}),{name:a,fields:n,methods:O}}function Q(e,t,r){if("AssignStatement"===e.type.name){e.firstChild(),e.nextSibling();const t="TypeDef"===e.type.name;return e.parent(),t}return!1}function w(e,t,r){return"FunctionDefinition"===e.type.name}function S(e,t,r){return"ClassDefinition"===e.type.name}function b(e,r,s){if("Script"===e.node.type.name){const i=[],O=[],a=[],o=[];for(var n=e.firstChild();n;){if(Q(e))i.push((0,t.traverseVarInit)(e,r,s));else if(w(e))O.push((0,t.traverseFunDef)(e,r,s));else{if(!S(e))break;a.push((0,t.traverseClass)(e,r,s))}n=e.nextSibling()}for(;n;)o.push((0,t.traverseStmt)(e,r,s)),n=e.nextSibling();return e.parent(),{funs:O,inits:i,classes:a,stmts:o}}throw new Error("Could not parse program at "+e.node.from+" "+e.node.to)}t.binarySearch=a,t.indToLoc=o,t.nextLineBreakLoc=$,t.traverseLiteral=p(l),t.traverseLiteralHelper=l,t.traverseExpr=p(u),t.traverseExprHelper=u,t.traverseArguments=c,t.traverseStmt=p(h),t.traverseStmtHelper=h,t.traverseType=f,t.traverseParameter=p(g),t.traverseParameterHelper=g,t.traverseParameters=d,t.traverseVarInit=p(x),t.traverseVarInitHelper=x,t.traverseFunDef=p(m),t.traverseFunDefHelper=m,t.traverseClass=p(P),t.traverseClassHelper=P,t.traverseDefs=function(e,r,s){const n=[],i=[],O=[];for(;;){if(Q(e))n.push((0,t.traverseVarInit)(e,r,s));else if(w(e))i.push((0,t.traverseFunDef)(e,r,s));else{if(!S(e))return[n,i,O];O.push((0,t.traverseClass)(e,r,s))}e.nextSibling()}},t.isVarInit=Q,t.isFunDef=w,t.isClassDef=S,t.traverse=p(b,!0),t.traverseHelper=b,t.parse=function(e){const r={lineBreakIndices:[]};e+="\n",r.lineBreakIndices=[-1];for(var n=0;n<e.length;n++)"\n"==e[n]&&r.lineBreakIndices.push(n);const i=s.parser.parse(e);return(0,O.stringifyTree)(i.cursor(),e,0),(0,t.traverse)(i.cursor(),e,r)}},99:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BasicREPL=void 0;const s=r(277),n=r(740),i=r(660);t.BasicREPL=class{constructor(e){if(this.importObject=e,!e.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});new Int32Array(e.buffer)[0]=4,this.importObject.js={memory:e}}this.currentEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:1},this.currentTypeEnv=n.defaultTypeEnv,this.functions=""}async run(e){const t={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},[r,n,i,O,a]=await(0,s.run)(e,t);this.currentEnv=n,this.currentTypeEnv=i,this.functions+=O;const o=this.importObject.env||{};return console.log(a),Object.keys(a.instance.exports).forEach((e=>{console.log("Consider key ",e);const t=a.instance.exports[e];t instanceof WebAssembly.Global&&(o[e]=t)})),this.importObject.env=o,r}tc(e){this.importObject,this.currentEnv,this.currentTypeEnv,this.functions;const t=(0,i.parse)(e),[r,s]=(0,n.tc)(this.currentTypeEnv,t);return r.a.type}}},277:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.run=t.augmentEnv=t.runWat=void 0;const n=s(r(504)),i=r(244),O=r(660),a=r(740),o=r(591),$=r(850),p=r(752);if("undefined"!=typeof process){const e=process.on;process.on=(...t)=>"uncaughtException"===t[0]?void 0:e.apply(process,t)}async function l(e,t){var r=(await(0,n.default)()).parseWat("test.wat",e).toBinary({}),s=await WebAssembly.instantiate(r.buffer,t);return[s.instance.exports.exported_func(),s]}function u(e,t){const r=new Map(e.globals),s=new Map(e.classes);var n=e.offset;return t.inits.forEach((e=>{r.set(e.name,!0)})),t.classes.forEach((e=>{const t=new Map;e.fields.forEach(((e,r)=>t.set(e.name,[r,e.value]))),s.set(e.name,t)})),{globals:r,classes:s,locals:e.locals,labels:e.labels,offset:n}}t.runWat=l,t.augmentEnv=u,t.run=async function(e,t){t.importObject.errors.src=e;const r=(0,O.parse)(e),[s,n]=(0,a.tc)(t.typeEnv,r),c=u(t.env,s),h=(0,$.lowerProgram)(s,c),f=s.a.type;var g="",d="";f!==o.NONE&&(g="(result i32)",d="(local.get $$last)");let x=t.env.globals;const m=(0,i.compile)(h,c),P=[...x.keys()].map((e=>`(import "env" "${e}" (global $${e} (mut i32)))`)).join("\n"),Q=m.globals.map((e=>`(global $${e} (export "${e}") (mut i32) (i32.const 0))`)).join("\n"),w=t.importObject;if(!w.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});w.js={memory:e}}const S=`(module\n    (import "js" "memory" (memory 1))\n    ${p.wasmErrorImports}\n    (func $print_num (import "imports" "print_num") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $min (import "imports" "min") (param i32) (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32) (param i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32) (param i32) (result i32))\n    (func $alloc (import "libmemory" "alloc") (param i32) (result i32))\n    (func $load (import "libmemory" "load") (param i32) (param i32) (result i32))\n    (func $store (import "libmemory" "store") (param i32) (param i32) (param i32))\n    ${P}\n    ${Q}\n    ${t.functions}\n    ${m.functions}\n    (func (export "exported_func") ${g}\n      ${m.mainSource}\n      ${d}\n    )\n  )`;console.log(S);const[b,y]=await l(S,w);return[(0,o.PyValue)(f,b),m.newEnv,n,m.functions,y]}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyTree=void 0,t.stringifyTree=function e(t,r,s){var n="";if(n+=" ".repeat(2*s)+t.type.name,["Number","CallExpression","BinaryExpression","UnaryExpression","ArithOp","VariableName"].includes(t.type.name)&&(n+=" --\x3e "+r.substring(t.from,t.to)),n+="\n",t.firstChild()){do{n+=e(t,r,s+1)}while(t.nextSibling());t.parent()}return n}},740:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tcLiteral=t.tcExpr=t.tcStmt=t.tcBlock=t.tcClass=t.tcDef=t.tcInit=t.tc=t.augmentTEnv=t.join=t.isAssignable=t.isSubtype=t.isNoneOrClass=t.equalType=t.emptyLocalTypeEnv=t.emptyGlobalTypeEnv=t.defaultTypeEnv=t.TypeCheckError=void 0;const s=r(142),n=r(591),i=r(752);class O extends Error{constructor(e,t,r){var s;const n=null==r?void 0:r.fromLoc,O=null==r?void 0:r.endLoc,a=null==r?void 0:r.eolLoc,o=new.target.prototype,$="TYPE ERROR: "+t+(r?` on line ${n.row} at col ${n.col}`:"")+`\n\n${r?(0,i.fullSrcLine)(e,n.srcIdx,n.col,a.srcIdx):""}\n${r?(0,i.drawSquiggly)(n.row,O.row,n.col,O.col):""}`;super($),this.a=null!==(s=r)&&void 0!==s?s:void 0,this.errMsg=$,this.__proto__=o}getA(){return this.a}getErrMsg(){return this.errMsg}}t.TypeCheckError=O;const a=new Map;function o(){return{vars:new Map,expectedRet:n.NONE,actualRet:n.NONE,topLevel:!0}}function $(e,t){return e===t||"class"===e.tag&&"class"===t.tag&&e.name===t.name}function p(e){return"none"===e.tag||"class"===e.tag}function l(e,t,r){return $(t,r)||"none"===t.tag&&"class"===r.tag}function u(e,t,r){return l(0,t,r)}function c(e,t){const r=new Map(e.globals),s=new Map(e.functions),n=new Map(e.classes);return t.inits.forEach((e=>r.set(e.name,e.type))),t.funs.forEach((e=>s.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),t.classes.forEach((e=>{const t=new Map,r=new Map;e.fields.forEach((e=>t.set(e.name,e.type))),e.methods.forEach((e=>r.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),n.set(e.name,[t,r])})),{globals:r,functions:s,classes:n}}function h(e,t,r){const s=P(t.value);if(u(0,s,t.type))return{...t,a:{...t.a,type:n.NONE}};throw new O(r,`Expected type ${JSON.stringify(t.type.tag)}; got type ${JSON.stringify(s.tag)}`,t.value.a)}function f(e,t,r){var s=o();s.expectedRet=t.ret,s.topLevel=!1,t.parameters.forEach((e=>s.vars.set(e.name,e.type))),t.inits.forEach((e=>s.vars.set(e.name,h(0,e,r).type)));const i=d(e,s,t.body,r);if(!u(0,s.actualRet,s.expectedRet))throw new O(r,`expected return type of block: ${JSON.stringify(s.expectedRet)} does not match actual return type: ${JSON.stringify(s.actualRet)}`);return{...t,a:{...t.a,type:n.NONE},body:i}}function g(e,t,r){const s=t.fields.map((e=>h(0,e,r))),i=t.methods.map((t=>f(e,t,r))),a=t.methods.find((e=>"__init__"===e.name));if(1!==a.parameters.length||"self"!==a.parameters[0].name||!$(a.parameters[0].type,(0,n.CLASS)(t.name))||a.ret!==n.NONE){const e=1!==a.parameters.length?`${a.parameters.length} parameters`:"self"!==a.parameters[0].name?`parameter name ${a.parameters[0].name}`:$(a.parameters[0].type,(0,n.CLASS)(t.name))?a.ret!==n.NONE?`return type ${JSON.stringify(a.ret.tag)}`:"unknown reason":`parameter type ${JSON.stringify(a.parameters[0].type.tag)}`;throw new O(r,`__init__ takes 1 parameter \`self\` of the same type of the class \`${t.name}\` with return type of \`None\`, got ${e}`,a.a)}return{a:{...t.a,type:n.NONE},name:t.name,fields:s,methods:i}}function d(e,t,r,s){return r.map((r=>x(e,t,r,s)))}function x(e,t,r,s){switch(r.tag){case"assign":const p=m(e,t,r.value,s);var i;if(t.vars.has(r.name))i=t.vars.get(r.name);else{if(!e.globals.has(r.name))throw new O(s,"Unbound id: "+r.name);i=e.globals.get(r.name)}if(!u(0,p.a.type,i))throw new O(s,`Assignment value should have assignable type to type ${JSON.stringify(i.tag)}, got ${JSON.stringify(p.a.type.tag)}`,p.a);return{a:{...r.a,type:n.NONE},tag:r.tag,name:r.name,value:p};case"expr":const l=m(e,t,r.expr,s);return{a:l.a,tag:r.tag,expr:l};case"if":var a=m(e,t,r.cond,s);const c=d(e,t,r.thn,s),h=t.actualRet;t.actualRet=n.NONE;const f=d(e,t,r.els,s),g=t.actualRet;if(a.a.type!==n.BOOL)throw new O(s,`Condition Expression Must be have type "bool", got ${JSON.stringify(a.a.type.tag)}`,a.a);return h!==g&&(t.actualRet={tag:"either",left:h,right:g}),{a:{...r.a,type:h},tag:r.tag,cond:a,thn:c,els:f};case"return":if(t.topLevel)throw new O(s,"cannot return outside of functions");const x=m(e,t,r.value,s);if(!u(0,x.a.type,t.expectedRet))throw new O(s,"expected return type `"+t.expectedRet.tag+"`; got type `"+x.a.type.tag+"`",r.a);return t.actualRet=x.a.type,{a:x.a,tag:r.tag,value:x};case"while":a=m(e,t,r.cond,s);const P=d(e,t,r.body,s);if(!$(a.a.type,n.BOOL))throw new O(s,`Condition Expression Must be a bool, got ${JSON.stringify(a.a.type.tag)}`,a.a);return{a:{...r.a,type:n.NONE},tag:r.tag,cond:a,body:P};case"pass":return{a:{...r.a,type:n.NONE},tag:r.tag};case"field-assign":var o=m(e,t,r.obj,s);const Q=m(e,t,r.value,s);if("class"!==o.a.type.tag)throw new O(s,`field assignments require an object, got ${JSON.stringify(o.a.type.tag)}`,o.a);if(!e.classes.has(o.a.type.name))throw new O(s,`field assignment on an unknown class \`${o.a.type.name}\``,o.a);const[w,S]=e.classes.get(o.a.type.name);if(!w.has(r.field))throw new O(s,`could not find field \`${r.field}\` in class \`${o.a.type.name}\``,r.a);if(!u(0,Q.a.type,w.get(r.field)))throw new O(s,`field \`${r.field}\` expected type: ${JSON.stringify(w.get(r.field).tag)}, got value of type ${JSON.stringify(Q.a.type.tag)}`,Q.a);return{...r,a:{...r.a,type:n.NONE},obj:o,value:Q}}}function m(e,t,r,i){switch(r.tag){case"literal":return{...r,a:{...r.a,type:P(r.value)}};case"binop":const l=m(e,t,r.left,i),c=m(e,t,r.right,i),h={...r,left:l,right:c};switch(r.op){case s.BinOp.Plus:case s.BinOp.Minus:case s.BinOp.Mul:case s.BinOp.IDiv:case s.BinOp.Mod:if($(l.a.type,n.NUM)&&$(c.a.type,n.NUM))return{...h,a:{...r.a,type:n.NUM}};throw new O(i,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number" on both sides, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(c.a.type.tag)}`,r.a);case s.BinOp.Eq:case s.BinOp.Neq:if("class"===l.a.type.tag||"class"===c.a.type.tag)throw new O(i,"cannot apply operator '==' on class types");if($(l.a.type,c.a.type))return{...h,a:{...r.a,type:n.BOOL}};throw new O(i,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects the same type on both sides, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(c.a.type.tag)}`,r.a);case s.BinOp.Lte:case s.BinOp.Gte:case s.BinOp.Lt:case s.BinOp.Gt:if($(l.a.type,n.NUM)&&$(c.a.type,n.NUM))return{...h,a:{...r.a,type:n.BOOL}};throw new O(i,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number" on both sides, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(c.a.type.tag)}`,r.a);case s.BinOp.And:case s.BinOp.Or:if($(l.a.type,n.BOOL)&&$(c.a.type,n.BOOL))return{...h,a:{...r.a,type:n.BOOL}};throw new O(i,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "bool" on both sides, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(c.a.type.tag)}`,r.a);case s.BinOp.Is:if(!p(l.a.type)||!p(c.a.type))throw new O(i,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "class" or "none" on both sides, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(c.a.type.tag)}`,r.a);return{...h,a:{...r.a,type:n.BOOL}}}case"uniop":const f=m(e,t,r.expr,i),g={...r,a:f.a,expr:f};switch(r.op){case s.UniOp.Neg:if($(f.a.type,n.NUM))return g;throw new O(i,`Unary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number", got ${JSON.stringify(f.a.type.tag)}`,r.a);case s.UniOp.Not:if($(f.a.type,n.BOOL))return g;throw new O(i,`Unary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "bool", got ${JSON.stringify(f.a.type.tag)}`,r.a)}case"id":if(t.vars.has(r.name))return{...r,a:{...r.a,type:t.vars.get(r.name)}};if(e.globals.has(r.name))return{...r,a:{...r.a,type:e.globals.get(r.name)}};throw new O(i,"Unbound id: "+r.name,r.a);case"builtin1":if("print"===r.name){const s=m(e,t,r.arg,i);return{...r,a:s.a,arg:s}}if(e.functions.has(r.name)){const[[s],n]=e.functions.get(r.name),a=m(e,t,r.arg,i);if(u(0,a.a.type,s))return{...r,a:{...r.a,type:n},arg:a};throw new O(i,`Function call expects an argument of type ${JSON.stringify(s.tag)}, got ${JSON.stringify(a.a.type.tag)}`,r.a)}throw new O(i,"Undefined function: "+r.name,r.a);case"builtin2":if(e.functions.has(r.name)){const[[s,n],a]=e.functions.get(r.name),o=m(e,t,r.left,i),$=m(e,t,r.right,i);if(u(0,s,o.a.type)&&u(0,n,$.a.type))return{...r,a:{...r.a,type:a},left:o,right:$};throw new O(i,`Function call expects arguments of types ${JSON.stringify(s.tag)} and ${JSON.stringify(n.tag)}, got ${JSON.stringify(o.a.type.tag)} and ${JSON.stringify($.a.type.tag)}`,r.a)}throw new O(i,"Undefined function: "+r.name,r.a);case"call":if(e.classes.has(r.name)){const t={a:{...r.a,type:(0,n.CLASS)(r.name)},tag:"construct",name:r.name},[s,a]=e.classes.get(r.name);if(a.has("__init__")){const[e,s]=a.get("__init__");if(r.arguments.length!==e.length-1)throw new O(i,`__init__ takes 1 parameter \`self\` of the same type of the class \`${r.name}\` with return type of \`None\`, got ${r.arguments.length} parameters`,r.a);if(s!==n.NONE)throw new O(i,`__init__ takes 1 parameter \`self\` of the same type of the class \`${r.name}\` with return type of \`None\`, gotreturn type ${JSON.stringify(s.tag)}`,r.a);return t}return t}if(e.functions.has(r.name)){const[s,n]=e.functions.get(r.name),a=r.arguments.map((r=>m(e,t,r,i)));if(s.length===r.arguments.length&&a.every(((e,t)=>e.a.type===s[t])))return{...r,a:{...r.a,type:n},arguments:r.arguments};{const e=a.map((e=>JSON.stringify(e.a.type.tag))).join(", "),t=s.map((e=>JSON.stringify(e.tag))).join(", ");throw new O(i,`Function call expects arguments of types [${t}], got [${e}]`,r.a)}}throw new O(i,"Undefined function: "+r.name,r.a);case"lookup":if("class"===(a=m(e,t,r.obj,i)).a.type.tag){if(e.classes.has(a.a.type.name)){const[t,s]=e.classes.get(a.a.type.name);if(t.has(r.field))return{...r,a:{...r.a,type:t.get(r.field)},obj:a};throw new O(i,`could not find field ${r.field} in class ${a.a.type.name}`,r.a)}throw new O(i,`field lookup on an unknown class ${a.a.type.name}`,r.a)}throw new O(i,`field lookups require an object of type "class", got ${JSON.stringify(a.a.type.tag)}`,r.a);case"method-call":var a=m(e,t,r.obj,i),o=r.arguments.map((r=>m(e,t,r,i)));if("class"===a.a.type.tag){if(e.classes.has(a.a.type.name)){const[t,s]=e.classes.get(a.a.type.name);if(s.has(r.method)){const[e,t]=s.get(r.method),n=[a].concat(o);if(e.length===n.length&&e.every(((e,t)=>u(0,n[t].a.type,e))))return{...r,a:{...r.a,type:t},obj:a,arguments:o};{const t=e.map((e=>JSON.stringify(e.tag))).join(", "),s=n.map((e=>JSON.stringify(e.a.type.tag))).join(", ");throw new O(i,`Method call ${r.method} expects arguments of types [${t}], got [${s}]`,r.a)}}throw new O(i,`could not found method ${r.method} in class ${a.a.type.name}`,r.a)}throw new O(i,`method call on an unknown class ${a.a.type.name}`,r.a)}throw new O(i,`method calls require an object of type "class", got ${JSON.stringify(a.a.type.tag)}`,r.a);default:throw new O(i,`unimplemented type checking for expr: ${r}`,r.a)}}function P(e){switch(e.tag){case"bool":return n.BOOL;case"num":return n.NUM;case"none":return n.NONE}}a.set("abs",[[n.NUM],n.NUM]),a.set("max",[[n.NUM,n.NUM],n.NUM]),a.set("min",[[n.NUM,n.NUM],n.NUM]),a.set("pow",[[n.NUM,n.NUM],n.NUM]),a.set("print",[[(0,n.CLASS)("object")],n.NUM]),t.defaultTypeEnv={globals:new Map,functions:a,classes:new Map},t.emptyGlobalTypeEnv=function(){return{globals:new Map,functions:new Map,classes:new Map}},t.emptyLocalTypeEnv=o,t.equalType=$,t.isNoneOrClass=p,t.isSubtype=l,t.isAssignable=u,t.join=function(e,t,r){return n.NONE},t.augmentTEnv=c,t.tc=function(e,t){const r=t.a.src,s=o(),i=c(e,t),O=t.inits.map((e=>h(0,e,r))),a=t.funs.map((e=>f(i,e,r))),$=t.classes.map((e=>g(i,e,r))),p=d(i,s,t.stmts,r);var l=n.NONE;p.length&&(l=p[p.length-1].a.type);for(let e of s.vars.keys())i.globals.set(e,s.vars.get(e));return[{a:{...t.a,type:l},inits:O,funs:a,classes:$,stmts:p},i]},t.tcInit=h,t.tcDef=f,t.tcClass=g,t.tcBlock=d,t.tcStmt=x,t.tcExpr=m,t.tcLiteral=P},591:(e,t)=>{function r(e){return{tag:"num",value:e}}function s(e){return{tag:"bool",value:e}}function n(e,t){return 0===t?{tag:"none"}:{tag:"object",name:e,address:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.CLASS=t.NONE=t.BOOL=t.NUM=t.PyNone=t.PyObj=t.PyBool=t.PyInt=t.PyValue=void 0,t.PyValue=function(e,t){switch(e.tag){case"number":return r(t);case"bool":return s(Boolean(t));case"class":return n(e.name,t);case"none":return{tag:"none"}}},t.PyInt=r,t.PyBool=s,t.PyObj=n,t.PyNone=function(){return{tag:"none"}},t.NUM={tag:"number"},t.BOOL={tag:"bool"},t.NONE={tag:"none"},t.CLASS=function(e){return{tag:"class",name:e}}},504:e=>{e.exports=wabt},557:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s=r(669);const n=[21,47,48,52,55,56,59,60,61,63,121];let i=0,O=null,a=0;function o(e,t){return t==a&&e==O?i:(O=e,a=t,i=function(e,t){for(let r=0;;t++){let s=e.get(t);if(32==s)r++;else{if(9!=s)return 10==s||13==s||35==s?-1:r;r+=8-r%8}}}(e,t))}const $=new s.ExternalTokenizer(((e,t,r)=>{let s=e.get(t.start);s<0?t.accept(167,t.start):10!=s&&13!=s||(null!=r.startOf(n)?t.accept(165,t.start+1):o(e,t.start+1)<0?t.accept(166,t.start+1):t.accept(164,t.start+1))}),{contextual:!0,fallback:!0}),p=new s.ExternalTokenizer(((e,t,r)=>{let s,i=e.get(t.start-1);(10==i||13==i)&&(s=o(e,t.start))>=0&&s!=r.context.depth&&null==r.startOf(n)&&t.accept(s<r.context.depth?163:162,t.start)}));function l(e,t){this.parent=e,this.depth=t,this.hash=(e?e.hash+e.hash<<8:0)+t+(t<<4)}const u=new l(null,0),c=new s.ContextTracker({start:u,shift:(e,t,r,s)=>162==t?new l(e,o(r,s.pos)):163==t?e.parent:e,hash:e=>e.hash}),h=new s.ExternalTokenizer(((e,t)=>{let r=t.start;for(let t="print",s=0;s<t.length;s++,r++)if(e.get(r)!=t.charCodeAt(s))return;let s=r;if(!/\w/.test(String.fromCharCode(e.get(r))))for(;;r++){let n=e.get(r);if(32!=n&&9!=n)return void(40!=n&&46!=n&&10!=n&&13!=n&&35!=n&&t.accept(1,s))}})),f={__proto__:null,await:40,or:48,and:50,in:54,not:56,is:58,if:64,else:66,lambda:70,yield:88,from:90,async:98,for:100,None:152,True:154,False:154,del:168,pass:172,break:176,continue:180,return:184,raise:192,import:196,as:198,global:202,nonlocal:204,assert:208,elif:218,while:222,try:228,except:230,finally:232,with:236,def:240,class:250},g=s.Parser.deserialize({version:13,states:"!?|O`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DR'#DROOQ$IS'#G`'#G`O)bQ$IWO'#CqO)rQ$IWO'#DbO*SQ$IWO'#DfOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#HZ'#HZOOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#CzO0hQ$IWO'#DOO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59_O0aQ$IWO,59_O0aQ$IWO,59_O6pQ$IWO,59_O6uQ$IWO,59_O6|Q$IWO,59gO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DX'#DXO8rQ$IWO,59]O'RQ$IWO,59]O9QQ$IWO,59]O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,59|,59|O9eQ$IWO,59|O9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:Q,5:QO9{Q$IWO,5:QO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HWOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59fOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DQOEuQ$IWO,59jOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOGXQ$IWO,58zO)eQ$IWO,5:jOG^Q$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGqQ$IWO,5:yOHSQ$IWO,5:{OOQ$IS'#Fh'#FhOHbQ$I[O,5:{OHpQ$IWO,5:{OHuQ$IWO'#HYOOQ$IS,5;O,5;OOITQ$IWO'#HVOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIfQ$I[O'#H[O'RQ$IWO'#H[OIpQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIuQ$IXO'#ElOKOQ$IZO,5;]ONaQ$IWO'#H]O3UQ$IWO,5;aONlQ$IWO,5;cONqQ$IWO,5;hO!#fQ$I[O1G.hO!#mQ$I[O1G.hO!&^Q$I[O1G.hO!&hQ$I[O1G.hO!)RQ$I[O1G.hO!)fQ$I[O1G.hO!)yQ$IWO'#GnO!*XQ$I[O'#GQO/gQ$IWO'#GnO!*cQ$IWO'#GmOOQ$IS,5:X,5:XO!*kQ$IWO,5:XO!*pQ$IWO'#GoO!*{Q$IWO'#GoO!+`Q$IWO1G/uOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.y1G.yO!,`Q$I[O1G.yO!,gQ$I[O1G.yO0aQ$IWO1G.yO!-SQ$IWO1G/ROOQ$IS'#DW'#DWO/gQ$IWO,59qOOQ$IS1G.w1G.wO!-ZQ$IWO1G/cO!-kQ$IWO1G/cO!-sQ$IWO1G/dO'RQ$IWO'#GgO!-xQ$IWO'#GgO!-}Q$I[O1G.wO!._Q$IWO,59fO!/eQ$IWO,5=VO!/uQ$IWO,5=VO!/}Q$IWO1G/kO!0SQ$I[O1G/kOOQ$IS1G/h1G/hO!0dQ$IWO,5=QO!1ZQ$IWO,5=QO/gQ$IWO1G/oO!1xQ$IWO1G/qO!1}Q$I[O1G/qO!2_Q$I[O1G/oOOQ$IS1G/l1G/lOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2oQ$IWO'#GzO/gQ$IWO'#GzO!2}Q$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3YQ%GlO1G2VO!3yQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4bQ$I[O,5=rOOQ$IS1G1V1G1VO!4yQ$IWO1G1VOOQ$IS'#DS'#DSO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!5OQ$IWO'#FSO!5ZQ$IWO,59lO!5cQ$IWO1G/UO!5mQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6^Q$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6oQ$IWO1G.fOOQ$IS1G0U1G0UO!6}Q$IWO,5=SO!7_Q$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7pQ$IWO1G0gO!7{Q$IWO1G0gO!8QQ$IWO,5=tO!8`Q$IWO,5=tO!8nQ$IWO,5=qO!9UQ$IWO,5=qO!9gQ$IZO1G0qO!<uQ$IZO1G0tO!@QQ$IWO,5=vO!@[Q$IWO,5=vO!@dQ$I[O,5=vO/gQ$IWO1G0vO!@nQ$IWO1G0vO3UQ$IWO1G0{ONlQ$IWO1G0}OOQ$IV,5;W,5;WO!@sQ$IYO,5;WO!@xQ$IZO1G0wO!DZQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DhQ$IWO,5=wO!DuQ$IWO,5=wO/|Q$IWO,5=wOOQ$IV1G0{1G0{O!D}Q$IWO'#EyO!E`Q%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EhQ$IWO,5=XO!E{Q$IWO,5=XOOQ$IS1G/s1G/sO!FTQ$IWO,5=ZO!FeQ$IWO,5=ZO!FmQ$IWO,5=ZO!GQQ$IWO,5=ZO!GbQ$IWO,5=ZOOQ$IS7+%a7+%aOOQ$IS7+$e7+$eO!5cQ$IWO7+$mO!ITQ$IWO1G.yO!I[Q$IWO1G.yOOQ$IS1G/]1G/]OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!IcQ$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!IsQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$c7+$cO!IxQ$IWO7+$}O!JQQ$IWO7+%OO!JVQ$IWO1G2qOOQ$IS7+%V7+%VO!JgQ$IWO1G2qO!JoQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JtQ$IWO1G2lOOQ$IS-E9R-E9RO!KkQ$IWO7+%ZOOQ$IS7+%]7+%]O!KyQ$IWO1G2lO!LhQ$IWO7+%]O!LmQ$IWO1G2rO!L}Q$IWO1G2rO!MVQ$IWO7+%ZO!M[Q$IWO,5=fO!MrQ$IWO,5=fO!MrQ$IWO,5=fO!NQO!LQO'#DwO!N]OSO'#G{OOOO1G/{1G/{O!NbQ$IWO1G/{O!NjQ%GlO7+'qO# ZQ$I[O1G1jP# tQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$p7+$pO#!RQ$IWO,5<kO#!lQ$IWO,5<kO#!}Q$I[O,5;qO##bQ$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##rQ$IWO7+&POOQ$IS7+&R7+&RO#$QQ$IWO'#HXO/|Q$IWO7+&RO#$fQ$IWO7+&ROOQ$IS,5<U,5<UO#$qQ$IWO1G3`OOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#%PQ$IWO1G3]OOQ$IS-E9d-E9dO#%gQ$IZO7+&]O!DZQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(uQ$I[O,5<YO'RQ$IWO,5<YO#)PQ$IWO1G3bOOQ$IS-E9l-E9lO#)ZQ$IWO1G3bO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!E`Q%1`O7+&iO#)cQ$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+UQ$IWO,5<ZOOQ$IV7+&c7+&cO#+aQ$IZO7+&cO#.lQ$IWO,5<[O#.wQ$IWO1G3cOOQ$IS-E9n-E9nO#/UQ$IWO1G3cO#/^Q$IWO'#H_O#/lQ$IWO'#H_O/|Q$IWO'#H_OOQ$IS'#H_'#H_O#/wQ$IWO'#H^OOQ$IS,5;e,5;eO#0PQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0UQ$IWO1G2sOOQ$IS-E9V-E9VO#0iQ$IWO,5;tO#0tQ$IWO,5;tO#1XQ$IWO1G2uOOQ$IS-E9W-E9WO#1iQ$IWO1G2uO#1qQ$IWO1G2uO#2RQ$IWO1G2uO#1iQ$IWO1G2uOOQ$IS<<HX<<HXO#2^Q$I[O1G1[OOQ$IS<<Hi<<HiP#2kQ$IWO'#FUO6|Q$IWO1G2mO#2xQ$IWO1G2mO#2}Q$IWO<<HiOOQ$IS<<Hj<<HjO#3_Q$IWO7+(]OOQ$IS<<Hq<<HqO#3oQ$I[O1G1ZP#4`Q$IWO'#FTO#4mQ$IWO7+(^O#4}Q$IWO7+(^O#5VQ$IWO<<HuO#5[Q$IWO7+(WOOQ$IS<<Hw<<HwO#6RQ$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6WQ$IWO1G3QOOQ$IS-E9[-E9[O#6nQ$IWO1G3QOOOO'#F_'#F_O#6|O!LQO,5:cOOOO,5=g,5=gOOOO7+%g7+%gO#7XQ$IWO1G2VO#7rQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8TQ$IWO,5=sO#8fQ$IWO,5=sO/|Q$IWO,5=sO#8wQ$IWO<<ImOOQ$IS<<Im<<ImO/|Q$IWO<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8|Q$I[O1G1tP#9WQ$IWO'#FnO#9_Q$IWO7+(|O#9iQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<tQ$IZO7+&^OOQ$IV<<I}<<I}O#>mQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AxQ$IWO7+(}O#BVQ$IWO7+(}OOQ$IS'#Ez'#EzO/gQ$IWO,5=yO#B_Q$IWO,5=yOOQ$IS,5=y,5=yO#BjQ$IWO,5=xO#B{Q$IWO,5=xOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#CTQ$IWO'#FXO#CeQ$IWO1G1`O#CxQ$IWO1G1`O#DYQ$IWO1G1`P#DeQ$IWO'#FYO#DrQ$IWO7+(aO#ESQ$IWO7+(aO#ESQ$IWO7+(aO#E[Q$IWO7+(aO#ElQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FVQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FgQ$I[O1G1^P#FqQ$IWO'#FWOOQ$IS1G1d1G1dP#GOQ$IWO'#F^O#G]Q$IWO7+(lOOOO-E9]-E9]O#GsQ$IWO7+'qOOQ$ISAN?VAN?VO#H^Q$IWO,5<TO#HrQ$IWO1G3_OOQ$IS-E9g-E9gO#ITQ$IWO1G3_OOQ$ISAN?XAN?XO#IfQ$IWOAN?XOOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IkQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LvQ$IWO<<LiOOQ$IS1G3e1G3eO/gQ$IWO1G3eOOQ$IS,5<],5<]O#MTQ$IWO1G3dOOQ$IS-E9o-E9oO#MfQ$IWO7+&zO#MvQ$IWO7+&zOOQ$IS7+&z7+&zO#NRQ$IWO<<K{O#NcQ$IWO<<K{O#NcQ$IWO<<K{O#NkQ$IWO'#GiOOQ$IS<<Ks<<KsO#NuQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ `Q$IWO7+(yO$ qQ$IWO7+(yOOQ$ISG24sG24sOOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)P7+)PP$!SQ$IWO'#FqOOQ$IS<<Jf<<JfO$!bQ$IWO<<JfO$!rQ$IWOANAgO$#SQ$IWOANAgO$#[Q$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#uQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$^Q$IWO<<LeOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$oQ$IWOG27RO$%PQ$IWO,59{OOQ$IS1G2o1G2oO#NkQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#CzO6|Q$IWO,59_O6|Q$IWO,59_O6|Q$IWO,59_O$%UQ$I[O,5<kO6|Q$IWO1G.yO/gQ$IWO1G/UO/gQ$IWO7+$mP$%iQ$IWO'#FdO'RQ$IWO'#GPO$%vQ$IWO,59_O$%{Q$IWO,59_O$&SQ$IWO,59jO$&XQ$IWO1G/RO0hQ$IWO'#DOO6|Q$IWO,59g",stateData:"$&o~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuO|vO}!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oh%TXi%TXj%TXk%TXl%TXm%TXp%TXw%TXx%TX!s%TX#^%TX$j%TX$m%TX%V%TX!O%TX!R%TX!S%TX%W%TX!W%TX![%TX}%TX#V%TXq%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~Ow%SXx%SX#^%SX$j%SX$m%SX%V%SX~Oh!oOi!pOj!nOk!nOl!qOm!rOp!sO!s%SX~P(`OT!yOl-fOs-tO|vO~P'ROT!|Ol-fOs-tO!W!}O~P'ROT#QO_#ROl-fOs-tO![#SO~P'RO%g#VO%h#XO~O%j#YO%k#XO~O!Z#[O%m#]O%q#_O~O!Z#[O%s#`O%t#_O~O!Z#[O%h#_O%v#bO~O!Z#[O%k#_O%x#dO~OT$tX]$tX_$tXf$tXh$tXi$tXj$tXk$tXl$tXm$tXp$tXw$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tX!O$tX!R$tX!S$tX~O%e[O%f]O%i^O%l_O%r`O%uaO%wbOx$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!W$tX![$tX}$tX#V$tXq$tX!j$tX~P+uOw#iOx$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Ol-fOs-tO~P'RO#^#lO$j#nO$m#nO~O%QVO~O!R#sO#l!YO#q!ZO#tlO~OltO~P'ROT#xO_#yO%QVOxtP~OT#}Ol-fOs-tO}$OO~P'ROx$QO!s$VO%V$RO#^!tX$j!tX$m!tX~OT#}Ol-fOs-tO#^!}X$j!}X$m!}X~P'ROl-fOs-tO#^#RX$j#RX$m#RX~P'RO!d$]O!m$]O%QVO~OT$gO~P'RO!S$iO#j$jO#l$kO~Ox$lO~OT$zO_$zOl-fOs-tO!O$|O~P'ROl-fOs-tOx%PO~P'RO%d%RO~O_!bOf!iO!V!kO!d!lOT`a]`ah`ai`aj`ak`al`am`ap`aw`ax`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`a!O`a!R`a!S`a%W`a!W`a![`a}`a#V`aq`a!j`a~Ok%WO~Ol%WO~P'ROl-fO~P'ROh-hOi-iOj-gOk-gOl-pOm-qOp-uO!O%SX!R%SX!S%SX%W%SX!W%SX![%SX}%SX#V%SX!j%SX~P(`O%W%YOw%RX!O%RX!R%RX!S%RX!W%RXx%RX~Ow%]O!O%[O!R%aO!S%`O~O!O%[O~Ow%dO!R%aO!S%`O!W%_X~O!W%hO~Ow%iOx%kO!R%aO!S%`O![%YX~O![%oO~O![%pO~O%g#VO%h%rO~O%j#YO%k%rO~OT%uOl-fOs-tO|vO~P'RO!Z#[O%m#]O%q%xO~O!Z#[O%s#`O%t%xO~O!Z#[O%h%xO%v#bO~O!Z#[O%k%xO%x#dO~OT!la]!la_!laf!lah!lai!laj!lak!lal!lam!lap!law!lax!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!la!O!la!R!la!S!la%W!la!W!la![!la}!la#V!laq!la!j!la~P#vOw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&POltOsuOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#lO$j&UO$m&UO~O!d&VOf%zX$j%zX#V%zX#^%zX$m%zX#U%zX~Of!iO$j&XO~Ohcaicajcakcalcamcapcawcaxca!sca#^ca$jca$mca%Vca!Oca!Rca!Sca%Wca!Wca![ca}ca#Vcaqca!jca~P$_Opnawnaxna#^na$jna$mna%Vna~Oh!oOi!pOj!nOk!nOl!qOm!rO!sna~PDTO%V&ZOw%UXx%UX~O%QVOw%UXx%UX~Ow&^OxtX~Ox&`O~Ow%iO#^%YX$j%YX$m%YX!O%YXx%YX![%YX!j%YX%V%YX~OT-oOl-fOs-tO|vO~P'RO%V$RO#^Sa$jSa$mSa~O%V$RO~Ow&iO#^%[X$j%[X$m%[Xk%[X~P$_Ow&lO}&kO#^#Ra$j#Ra$m#Ra~O#V&mO#^#Ta$j#Ta$m#Ta~O!d$]O!m$]O#U&oO%QVO~O#U&oO~Ow&qO#^%|X$j%|X$m%|X~Ow&sO#^%yX$j%yX$m%yXx%yX~Ow&wOk&OX~P$_Ok&zO~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'PO~P'ROq'TO#g'RO#h'SOP#eaT#ead#eaf#eal#eap#eas#ea|#ea}#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%e#ea%f#ea%i#ea%l#ea%r#ea%u#ea%w#ea$i#ea$m#ea~Ow'UO#V'WOx&PX~Of'YO~Of!iOx$lO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$v!]O~PNyO$vUi~PNyOT!aO]!aO_!bOf!iO!V!kO!d!lO$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$x!_O$y!_O~P!#tO$xUi$yUi~P!#tO_!bOf!iO!V!kO!d!lOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&rOTUi]Ui$|Ui$}Ui%OUi~P!&rO!R%aO!S%`Ow%bX!O%bX~O%V'_O%W'_O~P+uOw'aO!O%aX~O!O'cO~Ow'dOx'fO!W%cX~Ol-fOs-tOw'dOx'gO!W%cX~P'RO!W'iO~Oj!nOk!nOl!qOm!rOhgipgiwgixgi!sgi#^gi$jgi$mgi%Vgi~Oi!pO~P!+eOigi~P!+eOh-hOi-iOj-gOk-gOl-pOm-qO~Oq'kO~P!,nOT'pOl-fOs-tO!O'qO~P'ROw'rO!O'qO~O!O'tO~O!S'vO~Ow'rO!O'wO!R%aO!S%`O~P$_Oh-hOi-iOj-gOk-gOl-pOm-qO!Ona!Rna!Sna%Wna!Wna![na}na#Vnaqna!jna~PDTOT'pOl-fOs-tO!W%_a~P'ROw'zO!W%_a~O!W'{O~Ow'zO!R%aO!S%`O!W%_a~P$_OT(POl-fOs-tO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~P'ROw(QO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~O![(TO~Ow(QO!R%aO!S%`O![%Ya~P$_Ow(WO!R%aO!S%`O![%`a~P$_Ow(ZOx%nX![%nX!j%nX~Ox(^O![(`O!j(aO~OT&POltOsuOx$si!s$si#^$si$j$si$m$si%V$si~P'ROw(bOx$si!s$si#^$si$j$si$m$si%V$si~O!d&VOf%za$j%za#V%za#^%za$m%za#U%za~O$j(gO~OT#xO_#yO%QVO~Ow&^Oxta~OltOsuO~P'ROw(QO#^%Ya$j%Ya$m%Ya!O%Yax%Ya![%Ya!j%Ya%V%Ya~P$_Ow(lO#^$sX$j$sX$m$sX%V$sX~O%V$RO#^Si$jSi$mSi~O#^%[a$j%[a$m%[ak%[a~P'ROw(oO#^%[a$j%[a$m%[ak%[a~OT(sOf(uO%QVO~O#U(vO~O%QVO#^%|a$j%|a$m%|a~Ow(xO#^%|a$j%|a$m%|a~Ol-fOs-tO#^%ya$j%ya$m%yax%ya~P'ROw({O#^%ya$j%ya$m%yax%ya~Oq)PO#a)OOP#_iT#_id#_if#_il#_ip#_is#_i|#_i}#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%e#_i%f#_i%i#_i%l#_i%r#_i%u#_i%w#_i$i#_i$m#_i~Oq)QOP#biT#bid#bif#bil#bip#bis#bi|#bi}#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%e#bi%f#bi%i#bi%l#bi%r#bi%u#bi%w#bi$i#bi$m#bi~OT)SOk&Oa~P'ROw)TOk&Oa~Ow)TOk&Oa~P$_Ok)XO~O$h)[O~Oq)_O#g'RO#h)^OP#eiT#eid#eif#eil#eip#eis#ei|#ei}#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%e#ei%f#ei%i#ei%l#ei%r#ei%u#ei%w#ei$i#ei$m#ei~Ol-fOs-tOx$lO~P'ROl-fOs-tOx&Pa~P'ROw)eOx&Pa~OT)iO_)jO!O)mO$|)kO%QVO~Ox$lO&S)oO~OT$zO_$zOl-fOs-tO!O%aa~P'ROw)uO!O%aa~Ol-fOs-tOx)xO!W%ca~P'ROw)yO!W%ca~Ol-fOs-tOw)yOx)|O!W%ca~P'ROl-fOs-tOw)yO!W%ca~P'ROw)yOx)|O!W%ca~Oj-gOk-gOl-pOm-qOhgipgiwgi!Ogi!Rgi!Sgi%Wgi!Wgixgi![gi#^gi$jgi$mgi}gi#Vgiqgi!jgi%Vgi~Oi-iO~P!GmOigi~P!GmOT'pOl-fOs-tO!O*RO~P'ROk*TO~Ow*VO!O*RO~O!O*WO~OT'pOl-fOs-tO!W%_i~P'ROw*XO!W%_i~O!W*YO~OT(POl-fOs-tO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~P'ROw*]O!R%aO!S%`O![%`i~Ow*`O![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~O![*aO~O_*cOl-fOs-tO![%`i~P'ROw*]O![%`i~O![*eO~OT*gOl-fOs-tOx%na![%na!j%na~P'ROw*hOx%na![%na!j%na~O!Z#[O%p*kO![!kX~O![*mO~Ox(^O![*nO~OT&POltOsuOx$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROw$Wix$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&POltOsuO~P'ROT&POl-fOs-tO#^$sa$j$sa$m$sa%V$sa~P'ROw*oO#^$sa$j$sa$m$sa%V$sa~Ow#ya#^#ya$j#ya$m#yak#ya~P$_O#^%[i$j%[i$m%[ik%[i~P'ROw*rO#^#Rq$j#Rq$m#Rq~Ow*sO#V*uO#^%{X$j%{X$m%{X!O%{X~OT*wOf*xO%QVO~O%QVO#^%|i$j%|i$m%|i~Ol-fOs-tO#^%yi$j%yi$m%yix%yi~P'ROq*|O#a)OOP#_qT#_qd#_qf#_ql#_qp#_qs#_q|#_q}#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%e#_q%f#_q%i#_q%l#_q%r#_q%u#_q%w#_q$i#_q$m#_q~Ok$baw$ba~P$_OT)SOk&Oi~P'ROw+TOk&Oi~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROw+_Ox$lO#V+_O~O#h+`OP#eqT#eqd#eqf#eql#eqp#eqs#eq|#eq}#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%e#eq%f#eq%i#eq%l#eq%r#eq%u#eq%w#eq$i#eq$m#eq~O#V+aOw$dax$da~Ol-fOs-tOx&Pi~P'ROw+cOx&Pi~Ox$QO%V+eOw&RX!O&RX~O%QVOw&RX!O&RX~Ow+iO!O&QX~O!O+kO~OT$zO_$zOl-fOs-tO!O%ai~P'ROx+nOw#|a!W#|a~Ol-fOs-tOx+oOw#|a!W#|a~P'ROl-fOs-tOx)xO!W%ci~P'ROw+rO!W%ci~Ol-fOs-tOw+rO!W%ci~P'ROw+rOx+uO!W%ci~Ow#xi!O#xi!W#xi~P$_OT'pOl-fOs-tO~P'ROk+wO~OT'pOl-fOs-tO!O+xO~P'ROT'pOl-fOs-tO!W%_q~P'ROw#wi![#wi#^#wi$j#wi$m#wi!O#wix#wi!j#wi%V#wi~P$_OT(POl-fOs-tO~P'RO_*cOl-fOs-tO![%`q~P'ROw+yO![%`q~O![+zO~OT(POl-fOs-tO![%Yq#^%Yq$j%Yq$m%Yq!O%Yqx%Yq!j%Yq%V%Yq~P'ROx+{O~OT*gOl-fOs-tOx%ni![%ni!j%ni~P'ROw,QOx%ni![%ni!j%ni~O!Z#[O%p*kO![!ka~OT&POl-fOs-tO#^$si$j$si$m$si%V$si~P'ROw,SO#^$si$j$si$m$si%V$si~O%QVO#^%{a$j%{a$m%{a!O%{a~Ow,VO#^%{a$j%{a$m%{a!O%{a~O!O,YO~Ok$biw$bi~P$_OT)SO~P'ROT)SOk&Oq~P'ROq,^OP#dyT#dyd#dyf#dyl#dyp#dys#dy|#dy}#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%e#dy%f#dy%i#dy%l#dy%r#dy%u#dy%w#dy$i#dy$m#dy~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,bO$m,bO~P'RO#h,cOP#eyT#eyd#eyf#eyl#eyp#eys#ey|#ey}#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%e#ey%f#ey%i#ey%l#ey%r#ey%u#ey%w#ey$i#ey$m#ey~Ol-fOs-tOx&Pq~P'ROw,gOx&Pq~O%V+eOw&Ra!O&Ra~OT)iO_)jO$|)kO%QVO!O&Qa~Ow,kO!O&Qa~OT$zO_$zOl-fOs-tO~P'ROl-fOs-tOx,mOw#|i!W#|i~P'ROl-fOs-tOw#|i!W#|i~P'ROx,mOw#|i!W#|i~Ol-fOs-tOx)xO~P'ROl-fOs-tOx)xO!W%cq~P'ROw,pO!W%cq~Ol-fOs-tOw,pO!W%cq~P'ROp,sO!R%aO!S%`O!O%Zq!W%Zq![%Zqw%Zq~P!,nO_*cOl-fOs-tO![%`y~P'ROw#zi![#zi~P$_O_*cOl-fOs-tO~P'ROT*gOl-fOs-tO~P'ROT*gOl-fOs-tOx%nq![%nq!j%nq~P'ROT&POl-fOs-tO#^$sq$j$sq$m$sq%V$sq~P'RO#V,wOw$]a#^$]a$j$]a$m$]a!O$]a~O%QVO#^%{i$j%{i$m%{i!O%{i~Ow,yO#^%{i$j%{i$m%{i!O%{i~O!O,{O~Oq,}OP#d!RT#d!Rd#d!Rf#d!Rl#d!Rp#d!Rs#d!R|#d!R}#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%e#d!R%f#d!R%i#d!R%l#d!R%r#d!R%u#d!R%w#d!R$i#d!R$m#d!R~Ol-fOs-tOx&Py~P'ROT)iO_)jO$|)kO%QVO!O&Qi~Ol-fOs-tOw#|q!W#|q~P'ROx-TOw#|q!W#|q~Ol-fOs-tOx)xO!W%cy~P'ROw-UO!W%cy~Ol-fOs-YO~P'ROp,sO!R%aO!S%`O!O%Zy!W%Zy![%Zyw%Zy~P!,nO%QVO#^%{q$j%{q$m%{q!O%{q~Ow-^O#^%{q$j%{q$m%{q!O%{q~OT)iO_)jO$|)kO%QVO~Ol-fOs-tOw#|y!W#|y~P'ROl-fOs-tOx)xO!W%c!R~P'ROw-aO!W%c!R~Op%^X!O%^X!R%^X!S%^X!W%^X![%^Xw%^X~P!,nOp,sO!R%aO!S%`O!O%]a!W%]a![%]aw%]a~O%QVO#^%{y$j%{y$m%{y!O%{y~Ol-fOs-tOx)xO!W%c!Z~P'ROx-dO~Ow*oO#^$sa$j$sa$m$sa%V$sa~P$_OT&POl-fOs-tO~P'ROk-kO~Ol-kO~P'ROx-lO~Oq-mO~P!,nO%f%i%u%w%e!Z%m%s%v%x%l%r%l%Q~",goto:"!,u&SPPPP&TP&])n*T*k+S+l,VP,qP&]-_-_&]P&]P0pPPPPPP0p3`PP3`P5l5u:yPP:|;[;_PPP&]&]PP;k&]PP&]&]PP&]&]&]&];o<c&]P<fP<i<i@OP@d&]PPP@h@n&TP&T&TP&TP&TP&TP&TP&T&T&TP&TPP&TPP&TP@tP@{ARP@{P@{@{PPP@{PBzPCTCZCaBzP@{CgPCnCtCzDWDjDpDzEQEnEtEzFQF[FbFhFnFtFzG^GhGnGtGzHUH[HbHhHnHxIOIYI`PPPPPPPPPIiIqIzJUJaPPPPPPPPPPPPNv! `!%n!(zPP!)S!)b!)k!*a!*W!*j!*p!*s!*v!*y!+RPPPPPPPPPP!+U!+XPPPPPPPPP!+_!+k!+w!,T!,W!,^!,d!,j!,m]iOr#l$l)[+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uw!cP#h#u$W$f%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jy!dP#h#u$W$f$r%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j{!eP#h#u$W$f$r$s%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j}!fP#h#u$W$f$r$s$t%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!P!gP#h#u$W$f$r$s$t$u%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!R!hP#h#u$W$f$r$s$t$u$v%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!V!hP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-u&ZUOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-u%eWOXYZhrv|}!R!S!T!X!i!k#[#i#l$O$Q$S$V$j$l$z%P%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#{uQ-b-YR-r-t'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'d'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uW#ol!O!P$^W#wu&^-Y-tQ$`!QQ$p!YQ$q!ZW$y!i'a)u+mS&]#x#yQ&}$kQ(e&VQ(s&mW(t&o(u(v*xU(w&q(x*yQ)g'WW)h'Y+i,k-RS+h)i)jY,U*s,V,x,y-^Q,X*uQ,d+_Q,f+aR-],wR&[#wi!vXY!S!T%]%d'r'z)O*S*V*XR%Z!uQ!zXQ%v#[Q&e$SR&h$VT-X,s-d!U!jP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jQ&Y#pR']$qR'`$yR%S!l'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uT#fc#gS#]_#^S#``#aS#ba#cS#db#eT*k(^*lT(_%v(aQ$UwR+g)hX$Sw$T$U&gZkOr$l)[+ZXoOr)[+ZQ$m!WQ&u$dQ&v$eQ'X$oQ'[$qQ)Y&|Q)`'RQ)b'SQ)c'TQ)p'ZQ)r']Q*})OQ+P)PQ+Q)QQ+U)WS+W)Z)qQ+[)^Q+])_Q+^)aQ,[*|Q,]+OQ,_+VQ,`+XQ,e+`Q,|,^Q-O,cQ-P,dR-_,}WoOr)[+ZR#rnQ'Z$pR)Z&}Q+f)hR,i+gQ)q'ZR+X)ZZmOnr)[+ZQrOR#trQ&_#zR(j&_S%j#P#|S(R%j(UT(U%m&aQ%^!xQ%e!{W's%^%e'x'|Q'x%bR'|%gQ&j$WR(p&jQ(X%nQ*^(ST*d(X*^Q'b${R)v'bS'e%O%PY)z'e){+s,q-VU){'f'g'hU+s)|)}*OS,q+t+uR-V,rQ#W]R%q#WQ#Z^R%s#ZQ#^_R%w#^Q([%tS*i([*jR*j(]Q*l(^R,R*lQ#a`R%y#aQ#caR%z#cQ#ebR%{#eQ#gcR%|#gQ#jfQ&O#hW&R#j&O(m*pQ(m&dR*p-jQ$TwS&f$T&gR&g$UQ&t$bR(|&tQ&W#oR(f&WQ$^!PR&n$^Q*t(tS,W*t,zR,z,XQ&r$`R(y&rQ#mjR&T#mQ+Z)[R,a+ZQ(}&uR*{(}Q&x$fS)U&x)VR)V&yQ'Q$mR)]'QQ'V$nS)f'V+dR+d)gQ+j)lR,l+jWnOr)[+ZR#qnSqOrT+Y)[+ZWpOr)[+ZR'O$lYjOr$l)[+ZR&S#l[wOr#l$l)[+ZR&e$S&YPOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-uQ!mSQ#heQ#usU$Wx%`'vS$f!U$iQ$r!cQ$s!dQ$t!eQ$u!fQ$v!gQ$w!hQ%b!yQ%g!|Q%m#QQ%n#RQ&a#}Q&y$gQ(c&PU(n&i(o*qW)R&w)T+S+TQ*Q'pQ*Z(PQ+R)SQ+|*cR-j-oQ!xXQ!{YQ$d!SQ$e!T^'o%]%d'r'z*S*V*XR+O)O[fOr#l$l)[+Zh!uXY!S!T%]%d'r'z)O*S*V*XQ#PZQ#khS#|v|Q$Z}W$b!R$V&z)XS$n!X$jW$x!i'a)u+mQ%O!kQ%t#[`&Q#i%}(b(d(l*o,S-nQ&b$OQ&c$QQ&d$SQ'^$zQ'h%PQ'n%ZW(O%i(Q*[*`Q(S%kQ(]%uQ(h&[S(k&`-lQ(q&kQ(r&lU(z&s({*zQ)a'RY)d'U)e+b+c,gQ)s'`^)w'd)y+q+r,p-U-aQ)}'fQ*O'gS*P'k-mW*b(W*]+y+}W*f(Z*h,P,QQ+l)oQ+p)xQ+t)|Q,O*gQ,T*rQ,h+fQ,n+nQ,o+oQ,r+uQ,v+{Q-Q,iQ-S,mR-`-ThTOr#i#l$l%}&`'k(b(d)[+Z$z!tXYZhv|}!R!S!T!X!i!k#[$O$Q$S$V$j$z%P%Z%]%d%i%k%u&[&k&l&s&z'R'U'`'a'd'f'g'r'z(Q(W(Z(l({)O)X)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#vtW%T!n!r-g-qQ%U!oQ%V!pQ%X!sQ%c-fS'j%W-kQ'l-hQ'm-iQ+v*TQ,u+wS-W,s-dR-s-uU#zu-Y-tR(i&^[gOr#l$l)[+ZX!wX#[$S$VQ#UZQ$PvR$Y|Q%_!xQ%f!{Q%l#PQ'^$xQ'y%bQ'}%gQ(V%mQ(Y%nQ*_(SQ,t+vQ-[,uR-c-ZQ$XxQ'u%`R*U'vQ-Z,sR-e-dR#OYR#TZR$}!iQ${!iV)t'a)u+mR%Q!kR%v#[Q(`%vR*n(aQ$c!RQ&h$VQ)W&zR+V)XQ#plQ$[!OQ$_!PR&p$^Q(s&oQ*v(uQ*w(vR,Z*xR$a!QXpOr)[+ZQ$h!UR&{$iQ$o!XR&|$jR)n'YQ)l'YV,j+i,k-R",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:234,context:c,nodeProps:[[s.NodeProp.group,-14,4,80,82,83,85,87,89,91,93,94,95,97,100,103,"Statement Statement",-22,6,16,19,21,37,47,48,52,55,56,59,60,61,62,65,68,69,70,74,75,76,77,"Expression",-9,105,107,110,112,113,117,119,124,126,"Statement"]],skippedNodes:[0,2],repeatNodeCount:32,tokenData:"&AaMgR!^OX$}XY!#xY[$}[]!#x]p$}pq!#xqr!&Srs!)yst!C{tu$}uv$+}vw$.awx$/mxy$Lgyz$Mmz{$Ns{|%#c|}%$o}!O%%u!O!P%([!P!Q%3b!Q!R%6Q!R![%:S![!]%EO!]!^%Gb!^!_%Hh!_!`%KW!`!a%Ld!a!b$}!b!c& P!c!d&!_!d!e&$P!e!h&!_!h!i&.R!i!t&!_!t!u&7g!u!w&!_!w!x&,a!x!}&!_!}#O&9q#O#P!%b#P#Q&:w#Q#R&;}#R#S&!_#S#T$}#T#U&!_#U#V&$P#V#Y&!_#Y#Z&.R#Z#f&!_#f#g&7g#g#i&!_#i#j&,a#j#o&!_#o#p&=Z#p#q&>P#q#r&?]#r#s&@Z#s$g$}$g~&!_<r%`Z%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}9[&^Z%p7[%gS%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9['^Z%p7[%gS%jW%m`%v!bOr'Prs&Rsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P8z(WZ%p7[%jWOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z)UZ%p7[%gS%jW%v!bOr(yrs)wsw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*QZ%p7[%gS%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*|Z%p7[%gS%v!bOr(yrs+osw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8r+xX%p7[%gS%v!bOw+owx,ex#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r,jX%p7[Ow+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r-[X%p7[Ow+owx-wx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o7[-|R%p7[O#o-w#p#q-w#r~-w8r.[T%p7[O#o+o#o#p.k#p#q+o#q#r.k#r~+o!f.rV%gS%v!bOw.kwx/Xx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/[VOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/tUOw.kx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f0ZPO~.k!f0cV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#p.k#p~0xS0}T%gSOw0xwx1^x#O0x#O#P2P#P~0xS1aTOw0xwx1px#O0x#O#P2P#P~0xS1sSOw0xx#O0x#O#P2P#P~0xS2SPO~0x8z2[T%p7[O#o(y#o#p2k#p#q(y#q#r2k#r~(y!n2tX%gS%jW%v!bOr2krs3asw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n3hX%gS%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4[X%gS%v!bOr2krs.ksw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4|X%jWOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k!n5nX%jWOr2krs3asw2kwx6Zx#O2k#O#P7h#P#o2k#o#p7n#p~2kW6`T%jWOr6Zrs6os#O6Z#O#P7b#P~6ZW6rTOr6Zrs7Rs#O6Z#O#P7b#P~6ZW7USOr6Zs#O6Z#O#P7b#P~6ZW7ePO~6Z!n7kPO~2k!n7uX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p2k#p~8b[8iV%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P~8b[9TV%gSOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b[9oV%gSOr8brs0xsw8bwx:Ux#O8b#O#P;[#P~8b[:ZV%jWOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b[:uV%jWOr8brs9Osw8bwx6Zx#O8b#O#P;[#P~8b[;_PO~8b8z;iZ%p7[%jWOr(yrs)wsw(ywx<[x#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y7d<cX%p7[%jWOr<[rs=Os#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=TX%p7[Or<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=uX%p7[Or<[rs-ws#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d>gT%p7[O#o<[#o#p6Z#p#q<[#q#r6Z#r~<[9[>{T%p7[O#o'P#o#p?[#p#q'P#q#r?[#r~'P#O?gX%gS%jW%m`%v!bOr?[rs@Ssw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#O@]X%gS%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#OARX%gS%m`%v!bOr?[rsAnsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[!vAwV%gS%m`%v!bOwAnwx/Xx#OAn#O#PB^#P#oAn#o#pBd#p~An!vBaPO~An!vBiV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#pAn#p~0x#OCRPO~?[#OC]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p?[#p~8b9[DTZ%p7[%gS%m`%v!bOr'PrsDvsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9SERX%p7[%gS%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~Dv9SEsT%p7[O#oDv#o#pAn#p#qDv#q#rAn#r~Dv<bF_Z%p7[%jW%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bGaZ%p7[%gS%jW%sp%v!b%x#tOrGQrs)wswGQwxFSx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bHXT%p7[O#oGQ#o#pHh#p#qGQ#q#rHh#r~GQ&UHuX%gS%jW%sp%v!b%x#tOrHhrs3aswHhwxIbx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UIkX%jW%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UJaX%jW%sp%x#tOrHhrs3aswHhwxJ|x#OHh#O#PLd#P#oHh#o#pLj#p~Hh$nKVX%jW%sp%x#tOrJ|rs6oswJ|wxJ|x#OJ|#O#PKr#P#oJ|#o#pKx#p~J|$nKuPO~J|$nK}V%jWOr6Zrs6os#O6Z#O#P7b#P#o6Z#o#pJ|#p~6Z&ULgPO~Hh&ULqX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#pHh#p~8b<bMiZ%p7[%jW%sp%x#tOrGQrs)wswGQwxN[x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ:zNgZ%p7[%jW%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[:z! _T%p7[O#oN[#o#pJ|#p#qN[#q#rJ|#r~N[<r! sT%p7[O#o$}#o#p!!S#p#q$}#q#r!!S#r~$}&f!!cX%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!S&f!#RPO~!!S&f!#]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bMg!$]a%p7[%gS%jW$o1s%m`%sp%v!b%x#tOX$}XY!#xY[$}[]!#x]p$}pq!#xqr$}rs&Rsw$}wxFSx#O$}#O#P!%b#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg!%gX%p7[OY$}YZ!#xZ]$}]^!#x^#o$}#o#p!!S#p#q$}#q#r!!S#r~$}<u!&eb%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#T$}#T#U!(s#U#f$}#f#g!(s#g#h!(s#h#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!(QZjR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!)WZ!jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{!*Y_%tp%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!BPsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!+h_%p7[%gS%jW%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!,gsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!,tZ%p7[%gS%e,X%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDT!-p_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!;Rx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!.|_%p7[%gS%jW%e,X%v!bOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!-gx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!0WZ%p7[%gS%e,X%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT!1OT%p7[O#o!.o#o#p!1_#p#q!.o#q#r!1_#r~!.o-w!1j]%gS%jW%e,X%v!bOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!3Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!2lX%gS%e,X%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k-w!3`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!4Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!4`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!5Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_,a!5`X%jW%e,XOY!5XYZ6ZZ]!5X]^6Z^r!5Xrs!5{s#O!5X#O#P!6a#P~!5X,a!6QT%e,XOr6Zrs7Rs#O6Z#O#P7b#P~6Z,a!6dPO~!5X-w!6jPO~!1_-w!6v]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!1_#p~!7o,e!7xZ%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P~!7o,e!8rV%gS%e,XOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b,e!9`Z%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!:Rx#O!7o#O#P!:{#P~!7o,e!:YZ%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!5Xx#O!7o#O#P!:{#P~!7o,e!;OPO~!7oDT!;[_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!<Zx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oBm!<d]%p7[%jW%e,XOY!<ZYZ<[Z]!<Z]^<[^r!<Zrs!=]s#O!<Z#O#P!>P#P#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZBm!=dX%p7[%e,XOr<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[Bm!>UT%p7[O#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZDe!>jT%p7[O#o!+X#o#p!>y#p#q!+X#q#r!>y#r~!+X.X!?W]%gS%jW%e,X%m`%v!bOY!>yYZ?[Z]!>y]^?[^r!>yrs!@Psw!>ywx!3Xx#O!>y#O#P!@w#P#o!>y#o#p!@}#p~!>y.X!@[X%gS%e,X%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[.X!@zPO~!>y.X!AW]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!>y#p~!7oGZ!B^Z%p7[%gS%e,X%m`%v!bOr'Prs!CPsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PGZ!C`X%k#|%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvMg!D`_Q1s%p7[%gS%jW%m`%sp%v!b%x#tOY!C{YZ$}Z]!C{]^$}^r!C{rs!E_sw!C{wx#Hqx#O!C{#O#P$(i#P#o!C{#o#p$*{#p#q!C{#q#r$)]#r~!C{JP!El_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Eksw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkJP!Fz_Q1s%p7[%gS%jW%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs!E_sw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIo!HS_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#8wx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!I`_Q1s%p7[%gS%jW%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Jj_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Kisw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Kt_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Lssw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIg!MO]Q1s%p7[%gS%v!bOY!LsYZ+oZ]!Ls]^+o^w!Lswx!Mwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg!NO]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx!Nwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg# O]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx# wx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsHP#!OXQ1s%p7[OY# wYZ-wZ]# w]^-w^#o# w#o#p#!k#p#q# w#q#r#!k#r~# w1s#!pRQ1sOY#!kZ]#!k^~#!kIg##QXQ1s%p7[OY!LsYZ+oZ]!Ls]^+o^#o!Ls#o#p##m#p#q!Ls#q#r##m#r~!Ls3Z##vZQ1s%gS%v!bOY##mYZ.kZ]##m]^.k^w##mwx#$ix#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#$nZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#%ax#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#%fZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#!kx#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#&^TQ1sOY##mYZ.kZ]##m]^.k^~##m3Z#&tZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p##m#p~#'g1w#'nXQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P~#'g1w#(`XQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#({x#O#'g#O#P#)m#P~#'g1w#)QXQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#!kx#O#'g#O#P#)m#P~#'g1w#)rTQ1sOY#'gYZ0xZ]#'g]^0x^~#'gIo#*YXQ1s%p7[OY!IRYZ(yZ]!IR]^(y^#o!IR#o#p#*u#p#q!IR#q#r#*u#r~!IR3c#+Q]Q1s%gS%jW%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#,S]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#,{sw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#-U]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs##msw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#.U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#.}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#/U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#/}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u1{#0UXQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P~#/}1{#0vXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#1cs#O#/}#O#P#2T#P~#/}1{#1hXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#!ks#O#/}#O#P#2T#P~#/}1{#2YTQ1sOY#/}YZ6ZZ]#/}]^6Z^~#/}3c#2nTQ1sOY#*uYZ2kZ]#*u]^2k^~#*u3c#3W]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#*u#p~#4P2P#4YZQ1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5SZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#5usw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5|ZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#'gsw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#6vZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#7ix#O#4P#O#P#8c#P~#4P2P#7pZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#/}x#O#4P#O#P#8c#P~#4P2P#8hTQ1sOY#4PYZ8bZ]#4P]^8b^~#4PIo#9Q_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#:Px#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRHX#:Y]Q1s%p7[%jWOY#:PYZ<[Z]#:P]^<[^r#:Prs#;Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#;Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs#<Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#<Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs# ws#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#=YXQ1s%p7[OY#:PYZ<[Z]#:P]^<[^#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PJP#=|XQ1s%p7[OY!FkYZ'PZ]!Fk]^'P^#o!Fk#o#p#>i#p#q!Fk#q#r#>i#r~!Fk3s#>v]Q1s%gS%jW%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#?osw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#?z]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#@ssw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#AO]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#Awsw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3k#BSZQ1s%gS%m`%v!bOY#AwYZAnZ]#Aw]^An^w#Awwx#$ix#O#Aw#O#P#Bu#P#o#Aw#o#p#CZ#p~#Aw3k#BzTQ1sOY#AwYZAnZ]#Aw]^An^~#Aw3k#CbZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p#Aw#p~#'g3s#DYTQ1sOY#>iYZ?[Z]#>i]^?[^~#>i3s#Dr]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#>i#p~#4PJP#Ex_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Fwsw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIw#GU]Q1s%p7[%gS%m`%v!bOY#FwYZDvZ]#Fw]^Dv^w#Fwwx!Mwx#O#Fw#O#P#G}#P#o#Fw#o#p#CZ#p#q#Fw#q#r#Aw#r~#FwIw#HUXQ1s%p7[OY#FwYZDvZ]#Fw]^Dv^#o#Fw#o#p#Aw#p#q#Fw#q#r#Aw#r~#FwMV#IO_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$%]x#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#J`_Q1s%p7[%gS%jW%sp%v!b%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx#Hqx#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#KfXQ1s%p7[OY#I}YZGQZ]#I}]^GQ^#o#I}#o#p#LR#p#q#I}#q#r#LR#r~#I}6y#Lb]Q1s%gS%jW%sp%v!b%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#MZx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Mf]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#N_x#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Nj]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx$ cx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR5c$ n]Q1s%jW%sp%x#tOY$ cYZJ|Z]$ c]^J|^r$ crs#0qsw$ cwx$ cx#O$ c#O#P$!g#P#o$ c#o#p$!{#p~$ c5c$!lTQ1sOY$ cYZJ|Z]$ c]^J|^~$ c5c$#SZQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P#o#/}#o#p$ c#p~#/}6y$#zTQ1sOY#LRYZHhZ]#LR]^Hh^~#LR6y$$d]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#LR#p~#4PMV$%j_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$&ix#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}Ko$&v_Q1s%p7[%jW%sp%x#tOY$&iYZN[Z]$&i]^N[^r$&irs#;Rsw$&iwx$&ix#O$&i#O#P$'u#P#o$&i#o#p$!{#p#q$&i#q#r$ c#r~$&iKo$'|XQ1s%p7[OY$&iYZN[Z]$&i]^N[^#o$&i#o#p$ c#p#q$&i#q#r$ c#r~$&iMg$(pXQ1s%p7[OY!C{YZ$}Z]!C{]^$}^#o!C{#o#p$)]#p#q!C{#q#r$)]#r~!C{7Z$)n]Q1s%gS%jW%m`%sp%v!b%x#tOY$)]YZ!!SZ]$)]]^!!S^r$)]rs#?osw$)]wx#MZx#O$)]#O#P$*g#P#o$)]#o#p$*{#p~$)]7Z$*lTQ1sOY$)]YZ!!SZ]$)]]^!!S^~$)]7Z$+U]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p$)]#p~#4PGz$,b]$}Q%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$-nZ!s,W%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$.t]$wQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{$/|_%q`%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Jex#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk$1^_%p7[%gS%jW%e,X%sp%v!b%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Ewx#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{DT$2h_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Basw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$3t_%p7[%gS%jW%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$2]sw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$4|Z%p7[%jW%e,XOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT$5tT%p7[O#o$3g#o#p$6T#p#q$3g#q#r$6T#r~$3g-w$6`]%gS%jW%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$7Xsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$7b]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$8Zsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$8d]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$9]sw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-o$9fZ%gS%e,X%v!bOY$9]YZ.kZ]$9]]^.k^w$9]wx$:Xx#O$9]#O#P$:s#P#o$9]#o#p$:y#p~$9]-o$:^V%e,XOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k-o$:vPO~$9]-o$;QZ%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P#o$;s#o#p$9]#p~$;s,]$;zX%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P~$;s,]$<lT%e,XOw0xwx1px#O0x#O#P2P#P~0x,]$=OPO~$;s-w$=YX%jW%e,XOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k-w$=xPO~$6T-w$>U]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$6T#p~$>},e$?WZ%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@QZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$@ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@zZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$;ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$AtV%jW%e,XOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b,e$B^PO~$>}DT$Bl_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Cksw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gC{$Cv]%p7[%gS%e,X%v!bOY$CkYZ+oZ]$Ck]^+o^w$Ckwx$Dox#O$Ck#O#P$Ec#P#o$Ck#o#p$:y#p#q$Ck#q#r$9]#r~$CkC{$DvX%p7[%e,XOw+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+oC{$EhT%p7[O#o$Ck#o#p$9]#p#q$Ck#q#r$9]#r~$CkGk$FUZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$F|T%p7[O#o$0{#o#p$G]#p#q$0{#q#r$G]#r~$0{1_$Gl]%gS%jW%e,X%sp%v!b%x#tOY$G]YZHhZ]$G]]^Hh^r$G]rs$7Xsw$G]wx$Hex#O$G]#O#P$I]#P#o$G]#o#p$Ic#p~$G]1_$HpX%jW%e,X%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh1_$I`PO~$G]1_$Il]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$G]#p~$>}Gk$JrZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx$Kex#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$KtZ%h!f%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[G{$LzZf,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u$NQZ!OR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{% W_T,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSxz$}z{%!V{!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%!j]_R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%#v]$z,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%%SZwR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%&Y^${,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`!a%'U!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}B^%'iZ&S&j%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%(o_!dQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%)n!P!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%*P]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%*x!P#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%+]Z!m,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%,cg!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%,O#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%.]a%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx{$}{|%/b|}$}}!O%/b!O!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%/s]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%1Pc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%0l#S#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%2oZ!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%3u_$|R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!P$}!P!Q%4t!Q!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%5X]%OQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%6eu!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!d$}!d!e%<U!e!g$}!g!h%-z!h!l$}!l!m%2[!m!q$}!q!r%?O!r!z$}!z!{%Ar!{#O$}#O#P! n#P#R$}#R#S%:S#S#U$}#U#V%<U#V#X$}#X#Y%-z#Y#^$}#^#_%2[#_#c$}#c#d%?O#d#l$}#l#m%Ar#m#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%9Z]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%:gi!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%:S#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%<g`%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%=|`!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%?a_%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%@s_!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%BTc%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%Csc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%Ec]x1s%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`%F[!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%FoZ%WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%GuZ#^,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%H{_jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!^$}!^!_%Iz!_!`!'m!`!a!'m!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%J_]$xQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Kk]%V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Lw^jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`!a%Ms!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%NW]$yQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{& f]]Q#tP%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg&!tc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&Rsw$}wxFSx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&$fg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&,a#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&&[_%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs&'Zsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe&'hZ%p7[%gS%e,X%m`%v!bOr'Prs&(Zsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&(hX%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&)b_%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx&*ax#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk&*nZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx&+ax#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&+nZ%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&,vc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&.hg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&5u!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&5u#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&0^Z%p7[%gS%m`%v!b%r,XOr'Prs&1Psw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDe&1[Z%p7[%gS%m`%v!bOr'Prs&1}sw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&2[X%p7[%gS%w,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&3UZ%p7[%jW%sp%x#t%l,XOrGQrs)wswGQwx&3wx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk&4SZ%p7[%jW%sp%x#tOrGQrs)wswGQwx&4ux#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&5SZ%p7[%jW%u,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&6[c%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&7|k%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!h&!_!h!i&5u!i!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#U&!_#U#V&,a#V#Y&!_#Y#Z&5u#Z#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_G{&:UZ!V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&;[Z!WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz&<b]$vQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy&=dX%gS%jW!ZGmOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bGz&>d]$uQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&?nX![7_%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!SGy&@nZ%P,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}",tokenizers:[h,p,0,1,2,3,4,5,6,7,8,9,10,$],topRules:{Script:[0,3]},specialized:[{term:186,get:e=>f[e]||-1}],tokenPrec:6594});t.parser=g},39:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=1024;let s=0;const n=new WeakMap;class i{constructor({deserialize:e}={}){this.id=s++,this.deserialize=e||(()=>{throw new Error("This node type doesn't define a deserialize function")})}static string(){return new i({deserialize:e=>e})}static number(){return new i({deserialize:Number})}static flag(){return new i({deserialize:()=>!0})}set(e,t){return e[this.id]=t,e}add(e){return"function"!=typeof e&&(e=a.match(e)),t=>{let r=e(t);return void 0===r?null:[this,r]}}}i.closedBy=new i({deserialize:e=>e.split(" ")}),i.openedBy=new i({deserialize:e=>e.split(" ")}),i.group=new i({deserialize:e=>e.split(" ")});const O=Object.create(null);class a{constructor(e,t,r,s=0){this.name=e,this.props=t,this.id=r,this.flags=s}static define(e){let t=e.props&&e.props.length?Object.create(null):O,r=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),s=new a(e.name||"",t,e.id,r);if(e.props)for(let r of e.props)Array.isArray(r)||(r=r(s)),r&&r[0].set(t,r[1]);return s}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(i.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let r in e)for(let s of r.split(" "))t[s]=e[r];return e=>{for(let r=e.prop(i.group),s=-1;s<(r?r.length:0);s++){let n=t[s<0?e.name:r[s]];if(n)return n}}}}a.none=new a("",Object.create(null),0,8);class o{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let r of this.types){let s=null;for(let t of e){let e=t(r);e&&(s||(s=Object.assign({},r.props)),e[0].set(s,e[1]))}t.push(s?new a(r.name,s,r.id,r.flags):r)}return new o(t)}}class ${constructor(e,t,r,s){this.type=e,this.children=t,this.positions=r,this.length=s}toString(){let e=this.children.map((e=>e.toString())).join();return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(e,t=0){let r=null!=e&&n.get(this)||this.topNode,s=new g(r);return null!=e&&(s.moveTo(e,t),n.set(this,s._tree)),s}fullCursor(){return new g(this.topNode,!0)}get topNode(){return new u(this,0,0,null)}resolve(e,t=0){return this.cursor(e,t).node}iterate(e){let{enter:t,leave:r,from:s=0,to:n=this.length}=e;for(let e=this.cursor();;){let i=!1;if(e.from<=n&&e.to>=s&&(e.type.isAnonymous||!1!==t(e.type,e.from,e.to))){if(e.firstChild())continue;e.type.isAnonymous||(i=!0)}for(;i&&r&&r(e.type,e.from,e.to),i=e.type.isAnonymous,!e.nextSibling();){if(!e.parent())return;i=!0}}}balance(e=r){return this.children.length<=m?this:P(this.type,a.none,this.children,this.positions,0,this.children.length,0,e,this.length,0)}static build(e){return function(e){var t;let{buffer:s,nodeSet:n,topID:i=0,maxBufferLength:O=r,reused:o=[],minRepeatType:u=n.types.length}=e,c=Array.isArray(s)?new x(s,s.length):s,h=n.types,f=0;function g(e,t,r,s,i){let{id:x,start:Q,end:w,size:S}=c,b=Q-e;if(S<0)return-1==S?(r.push(o[x]),s.push(b)):f=x,void c.next();let y,I,v=h[x];if(w-Q<=O&&(I=function(e,t){let r=c.fork(),s=0,n=0,i=0,a=r.end-O,o={size:0,start:0,skip:0};e:for(let O=r.pos-e;r.pos>O;){if(r.id==t){o.size=s,o.start=n,o.skip=i,i+=4,s+=4,r.next();continue}let e=r.size,$=r.pos-e;if(e<0||$<O||r.start<a)break;let p=r.id>=u?4:0,l=r.start;for(r.next();r.pos>$;){if(r.size<0)break e;r.id>=u&&(p+=4),r.next()}n=l,s+=e,i+=p}return(t<0||s==e)&&(o.size=s,o.start=n,o.skip=i),o.size>4?o:void 0}(c.pos-t,i))){let t=new Uint16Array(I.size-I.skip),r=c.pos-I.size,s=t.length;for(;c.pos>r;)s=d(I.start,t,s,i);y=new l(t,w-I.start,n,i<0?a.none:h[i]),b=I.start-e}else{let e=c.pos-S;c.next();let t=[],r=[],s=x>=u?x:-1;for(;c.pos>e;)c.id==s?c.next():g(Q,e,t,r,s);t.reverse(),r.reverse(),y=s>-1&&t.length>m?P(v,v,t,r,0,t.length,0,O,w-Q,f):p(new $(v,t,r,w-Q),f)}r.push(y),s.push(b)}function d(e,t,r,s){let{id:n,start:i,end:O,size:a}=c;if(c.next(),n==s)return r;let o=r;if(a>4){let n=c.pos-(a-4);for(;c.pos>n;)r=d(e,t,r,s)}return n<u&&(t[--r]=o,t[--r]=O-e,t[--r]=i-e,t[--r]=n),r}let Q=[],w=[];for(;c.pos>0;)g(e.start||0,0,Q,w,-1);let S=null!==(t=e.length)&&void 0!==t?t:Q.length?w[0]+Q[0].length:0;return new $(h[i],Q.reverse(),w.reverse(),S)}(e)}}function p(e,t){return t&&(e.contextHash=t),e}$.empty=new $(a.none,[],[],0);class l{constructor(e,t,r,s=a.none){this.buffer=e,this.length=t,this.set=r,this.type=s}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],r=this.buffer[e+3],s=this.set.types[t],n=s.name;if(/\W/.test(n)&&!s.isError&&(n=JSON.stringify(n)),r==(e+=4))return n;let i=[];for(;e<r;)i.push(this.childString(e)),e=this.buffer[e+3];return n+"("+i.join(",")+")"}findChild(e,t,r,s){let{buffer:n}=this,i=-1;for(let O=e;O!=t;O=n[O+3])if(-1e8!=s){let e=n[O+1],t=n[O+2];if(r>0){if(t>s&&(i=O),t>s)break}else if(e<s&&(i=O),t>=s)break}else if(i=O,r>0)break;return i}}class u{constructor(e,t,r,s){this.node=e,this.from=t,this.index=r,this._parent=s}get type(){return this.node.type}get name(){return this.node.type.name}get to(){return this.from+this.node.length}nextChild(e,t,r,s=!1){for(let n=this;;){for(let{children:i,positions:O}=n.node,a=t>0?i.length:-1;e!=a;e+=t){let a=i[e],o=O[e]+n.from;if(-1e8==r||!(t<0?o>=r:o+a.length<=r))if(a instanceof l){let s=a.findChild(0,a.buffer.length,t,-1e8==r?-1e8:r-o);if(s>-1)return new f(new h(n,a,e,o),null,s)}else if(s||!a.type.isAnonymous||d(a)){let i=new u(a,o,e,n);return s||!i.type.isAnonymous?i:i.nextChild(t<0?a.children.length-1:0,t,r)}}if(s||!n.type.isAnonymous)return null;if(e=n.index+t,n=n._parent,!n)return null}}get firstChild(){return this.nextChild(0,1,-1e8)}get lastChild(){return this.nextChild(this.node.children.length-1,-1,-1e8)}childAfter(e){return this.nextChild(0,1,e)}childBefore(e){return this.nextChild(this.node.children.length-1,-1,e)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent?this._parent.nextChild(this.index+1,1,-1):null}get prevSibling(){return this._parent?this._parent.nextChild(this.index-1,-1,-1):null}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}getChild(e,t=null,r=null){let s=c(this,e,t,r);return s.length?s[0]:null}getChildren(e,t=null,r=null){return c(this,e,t,r)}toString(){return this.node.toString()}}function c(e,t,r,s){let n=e.cursor,i=[];if(!n.firstChild())return i;if(null!=r)for(;!n.type.is(r);)if(!n.nextSibling())return i;for(;;){if(null!=s&&n.type.is(s))return i;if(n.type.is(t)&&i.push(n.node),!n.nextSibling())return null==s?i:[]}}class h{constructor(e,t,r,s){this.parent=e,this.buffer=t,this.index=r,this.start=s}}class f{constructor(e,t,r){this.context=e,this._parent=t,this.index=r,this.type=e.buffer.set.types[e.buffer.buffer[r]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(e,t){let{buffer:r}=this.context,s=r.findChild(this.index+4,r.buffer[this.index+3],e,-1e8==t?-1e8:t-this.context.start);return s<0?null:new f(this.context,this,s)}get firstChild(){return this.child(1,-1e8)}get lastChild(){return this.child(-1,-1e8)}childAfter(e){return this.child(1,e)}childBefore(e){return this.child(-1,e)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,-1)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new f(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new f(this.context,this._parent,e.findChild(t,this.index,-1,-1e8))}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}toString(){return this.context.buffer.childString(this.index)}getChild(e,t=null,r=null){let s=c(this,e,t,r);return s.length?s[0]:null}getChildren(e,t=null,r=null){return c(this,e,t,r)}}class g{constructor(e,t=!1){if(this.full=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof u)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}get name(){return this.type.name}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:r,buffer:s}=this.buffer;return this.type=t||s.set.types[s.buffer[e]],this.from=r+s.buffer[e+1],this.to=r+s.buffer[e+2],!0}yield(e){return!!e&&(e instanceof u?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enter(e,t){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree.node.children.length-1:0,e,t,this.full));let{buffer:r}=this.buffer,s=r.findChild(this.index+4,r.buffer[this.index+3],e,-1e8==t?-1e8:t-this.buffer.start);return!(s<0)&&(this.stack.push(this.index),this.yieldBuf(s))}firstChild(){return this.enter(1,-1e8)}lastChild(){return this.enter(-1,-1e8)}childAfter(e){return this.enter(1,e)}childBefore(e){return this.enter(-1,e)}parent(){if(!this.buffer)return this.yieldNode(this.full?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.full?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree._parent.nextChild(this._tree.index+e,e,-1e8,this.full));let{buffer:t}=this.buffer,r=this.stack.length-1;if(e<0){let e=r<0?0:this.stack[r]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,-1e8))}else{let e=t.buffer[this.index+3];if(e<(r<0?t.buffer.length:t.buffer[this.stack[r]+3]))return this.yieldBuf(e)}return r<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,-1e8,this.full))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let t,r,{buffer:s}=this;if(s){if(e>0){if(this.index<s.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(s.buffer.buffer[e+3]<this.index)return!1;({index:t,parent:r}=s)}else({index:t,_parent:r}=this._tree);for(;r;({index:t,_parent:r}=r))for(let s=t+e,n=e<0?-1:r.node.children.length;s!=n;s+=e){let e=r.node.children[s];if(this.full||!e.type.isAnonymous||e instanceof l||d(e))return!1}return!0}move(e){if(this.enter(e,-1e8))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(){return this.move(1)}prev(){return this.move(-1)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;t<0?this.childBefore(e):this.childAfter(e);)if(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e)){this.parent();break}return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,r=0;if(e&&e.context==this.buffer)e:for(let s=this.index,n=this.stack.length;n>=0;){for(let i=e;i;i=i._parent)if(i.index==s){if(s==this.index)return i;t=i,r=n+1;break e}s=this.stack[--n]}for(let e=r;e<this.stack.length;e++)t=new f(this.buffer,t,this.stack[e]);return this.bufferNode=new f(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree.node}}function d(e){return e.children.some((e=>!e.type.isAnonymous||e instanceof l||d(e)))}class x{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new x(this.buffer,this.index)}}const m=8;function P(e,t,r,s,n,i,O,o,l,u){let c=[],h=[];if(l<=o)for(let e=n;e<i;e++)c.push(r[e]),h.push(s[e]-O);else{let e=Math.max(o,Math.ceil(1.5*l/m));for(let l=n;l<i;){let n=l,f=s[l];for(l++;l<i&&!(s[l]+r[l].length-f>e);l++);if(l==n+1){let s=r[n];if(s instanceof $&&s.type==t&&s.length>e<<1){for(let e=0;e<s.children.length;e++)c.push(s.children[e]),h.push(s.positions[e]+f-O);continue}c.push(s)}else if(l==n+1)c.push(r[n]);else{let e=P(t,t,r,s,n,l,f,o,s[l-1]+r[l-1].length-f,u);t==a.none||Q(e.children,t)||(e=p(new $(a.none,e.children,e.positions,e.length),u)),c.push(e)}h.push(f-O)}}return p(new $(e,c,h,l),u)}function Q(e,t){for(let r of e)if(r.type==t)return!0;return!1}class w{constructor(e,t,r,s,n){this.from=e,this.to=t,this.tree=r,this.offset=s,this.open=n}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static applyChanges(e,t,r=128){if(!t.length)return e;let s=[],n=1,i=e.length?e[0]:null,O=0,a=0,o=0;for(;;){let $=O<t.length?t[O++]:null,p=$?$.fromA:1e9;if(p-a>=r)for(;i&&i.from<p;){let t=i;if(a>=t.from||p<=t.to||o){let e=Math.max(t.from,a)-o,r=Math.min(t.to,p)-o;t=e>=r?null:new w(e,r,t.tree,t.offset+o,(O>0?1:0)|($?2:0))}if(t&&s.push(t),i.to>p)break;i=n<e.length?e[n++]:null}if(!$)break;a=$.toA,o=$.toA-$.toB}return s}static addTree(e,t=[],r=!1){let s=[new w(0,e.length,e,0,r?2:0)];for(let r of t)r.to>e.length&&s.push(r);return s}}class S{constructor(e,t=e.length){this.string=e,this.length=t}get(e){return e<0||e>=this.length?-1:this.string.charCodeAt(e)}lineAfter(e){if(e<0)return"";let t=this.string.indexOf("\n",e);return this.string.slice(e,t<0?this.length:Math.min(t,this.length))}read(e,t){return this.string.slice(e,Math.min(this.length,t))}clip(e){return new S(this.string,e)}}t.DefaultBufferLength=r,t.NodeProp=i,t.NodeSet=o,t.NodeType=a,t.Tree=$,t.TreeBuffer=l,t.TreeCursor=g,t.TreeFragment=w,t.stringInput=function(e){return new S(e)}},669:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s,n=r(39);class i{constructor(e,t,r,s,n,i,O,a,o,$){this.p=e,this.stack=t,this.state=r,this.reducePos=s,this.pos=n,this.score=i,this.buffer=O,this.bufferBase=a,this.curContext=o,this.parent=$}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,r=0){let s=e.parser.context;return new i(e,[],t,r,r,0,[],0,s?new O(s,s.start):null,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){let t=e>>19,r=65535&e,{parser:s}=this.p,n=s.dynamicPrecedence(r);if(n&&(this.score+=n),0==t)return r<s.minRepeatTerm&&this.storeNode(r,this.reducePos,this.reducePos,4,!0),this.pushState(s.getGoto(this.state,r,!0),this.reducePos),void this.reduceContext(r);let i=this.stack.length-3*(t-1)-(262144&e?6:0),O=this.stack[i-2],a=this.stack[i-1],o=this.bufferBase+this.buffer.length-a;if(r<s.minRepeatTerm||131072&e){let e=s.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(r,O,e,o+4,!0)}if(262144&e)this.state=this.stack[i];else{let e=this.stack[i-3];this.state=s.getGoto(e,r,!0)}for(;this.stack.length>i;)this.stack.pop();this.reduceContext(r)}storeNode(e,t,r,s=4,n=!1){if(0==e){let e=this,s=this.buffer.length;if(0==s&&e.parent&&(s=e.bufferBase-e.parent.bufferBase,e=e.parent),s>0&&0==e.buffer[s-4]&&e.buffer[s-1]>-1){if(t==r)return;if(e.buffer[s-2]>=t)return void(e.buffer[s-2]=r)}}if(n&&this.pos!=r){let n=this.buffer.length;if(n>0&&0!=this.buffer[n-4])for(;n>0&&this.buffer[n-2]>r;)this.buffer[n]=this.buffer[n-4],this.buffer[n+1]=this.buffer[n-3],this.buffer[n+2]=this.buffer[n-2],this.buffer[n+3]=this.buffer[n-1],n-=4,s>4&&(s-=4);this.buffer[n]=e,this.buffer[n+1]=t,this.buffer[n+2]=r,this.buffer[n+3]=s}else this.buffer.push(e,t,r,s)}shift(e,t,r){if(131072&e)this.pushState(65535&e,this.pos);else if(0==(262144&e)){let s=this.pos,n=e,{parser:i}=this.p;(r>this.pos||t<=i.maxNode)&&(this.pos=r,i.stateFlag(n,1)||(this.reducePos=r)),this.pushState(n,s),t<=i.maxNode&&this.buffer.push(t,s,r,4),this.shiftContext(t)}else t<=this.p.parser.maxNode&&this.buffer.push(t,this.pos,r,4),this.pos=r}apply(e,t,r){65536&e?this.reduce(e):this.shift(e,t,r)}useNode(e,t){let r=this.p.reused.length-1;(r<0||this.p.reused[r]!=e)&&(this.p.reused.push(e),r++);let s=this.pos;this.reducePos=this.pos=s+e.length,this.pushState(t,s),this.buffer.push(r,s,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this.p.input,this))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let r=e.buffer.slice(t),s=e.bufferBase+t;for(;e&&s==e.bufferBase;)e=e.parent;return new i(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,r,s,this.curContext,e)}recoverByDelete(e,t){let r=e<=this.p.parser.maxNode;r&&this.storeNode(e,this.pos,t),this.storeNode(0,this.pos,t,r?8:4),this.pos=this.reducePos=t,this.score-=200}canShift(e){for(let t=new a(this);;){let r=this.p.parser.stateSlot(t.top,4)||this.p.parser.hasAction(t.top,e);if(0==(65536&r))return!0;if(0==r)return!1;t.reduce(r)}}get ruleStart(){for(let e=this.state,t=this.stack.length;;){let r=this.p.parser.stateSlot(e,5);if(!(65536&r))return 0;if(t-=3*(r>>19),(65535&r)<this.p.parser.minRepeatTerm)return this.stack[t+1];e=this.stack[t]}}startOf(e,t){let r=this.state,s=this.stack.length,{parser:n}=this.p;for(;;){let i=n.stateSlot(r,5),O=i>>19,a=65535&i;if(e.indexOf(a)>-1){let e=s-3*(i>>19),r=this.stack[e+1];if(null==t||t>r)return r}if(0==s)return null;0==O?(s-=3,r=this.stack[s]):(s-=3*(O-1),r=n.getGoto(this.stack[s-3],a,!0))}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let r=[];for(let s,n=0;n<t.length;n+=2)(s=t[n+1])!=this.state&&this.p.parser.hasAction(s,e)&&r.push(t[n],s);if(this.stack.length<120)for(let e=0;r.length<8&&e<t.length;e+=2){let s=t[e+1];r.some(((e,t)=>1&t&&e==s))||r.push(t[e],s)}t=r}let r=[];for(let e=0;e<t.length&&r.length<4;e+=2){let s=t[e+1];if(s==this.state)continue;let n=this.split();n.storeNode(0,n.pos,n.pos,4,!0),n.pushState(s,this.pos),n.shiftContext(t[e]),n.score-=200,r.push(n)}return r}forceReduce(){let e=this.p.parser.stateSlot(this.state,5);return 0!=(65536&e)&&(this.p.parser.validAction(this.state,e)||(this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100),this.reduce(e),!0)}forceAll(){for(;!this.p.parser.stateFlag(this.state,2)&&this.forceReduce(););return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this.p.input,this))}reduceContext(e){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this.p.input,this))}emitContext(){let e=this.curContext;if(!e.tracker.strict)return;let t=this.buffer.length-1;(t<0||-2!=this.buffer[t])&&this.buffer.push(e.hash,this.reducePos,this.reducePos,-2)}updateContext(e){if(e!=this.curContext.context){let t=new O(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}}class O{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.hash(t)}}!function(e){e[e.Token=200]="Token",e[e.Reduce=100]="Reduce",e[e.MaxNext=4]="MaxNext",e[e.MaxInsertStackDepth=300]="MaxInsertStackDepth",e[e.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(s||(s={}));class a{constructor(e){this.stack=e,this.top=e.state,this.rest=e.stack,this.offset=this.rest.length}reduce(e){let t=65535&e,r=e>>19;0==r?(this.rest==this.stack.stack&&(this.rest=this.rest.slice()),this.rest.push(this.top,0,0),this.offset+=3):this.offset-=3*(r-1);let s=this.stack.p.parser.getGoto(this.rest[this.offset-3],t,!0);this.top=s}}class o{constructor(e,t,r){this.stack=e,this.pos=t,this.index=r,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e){return new o(e,e.bufferBase+e.buffer.length,e.buffer.length)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new o(this.stack,this.pos,this.index)}}class ${constructor(){this.start=-1,this.value=-1,this.end=-1}accept(e,t){this.value=e,this.end=t}}class p{constructor(e,t){this.data=e,this.id=t}token(e,t,r){!function(e,t,r,s,n){let i=0,O=1<<n,a=s.p.parser.dialect;e:for(let n=r.start;0!=(O&e[i]);){let o=e[i+1];for(let t=i+3;t<o;t+=2)if((e[t+1]&O)>0){let i=e[t];if(a.allows(i)&&(-1==r.value||r.value==i||s.p.parser.overrides(i,r.value))){r.accept(i,n);break}}let $=t.get(n++);for(let t=0,r=e[i+2];t<r;){let s=t+r>>1,n=o+s+(s<<1),O=e[n],a=e[n+1];if($<O)r=s;else{if(!($>=a)){i=e[n+2];continue e}t=s+1}}break}}(this.data,e,t,r,this.id)}}function l(e,t=Uint16Array){if("string"!=typeof e)return e;let r=null;for(let s=0,n=0;s<e.length;){let i=0;for(;;){let t=e.charCodeAt(s++),r=!1;if(126==t){i=65535;break}t>=92&&t--,t>=34&&t--;let n=t-32;if(n>=46&&(n-=46,r=!0),i+=n,r)break;i*=46}r?r[n++]=i:r=new t(i)}return r}p.prototype.contextual=p.prototype.fallback=p.prototype.extend=!1;const u="undefined"!=typeof process&&/\bparse\b/.test(process.env.LOG);let c=null;function h(e,t,r){let s=e.cursor(t);for(;;)if(!(r<0?s.childBefore(t):s.childAfter(t)))for(;;){if((r<0?s.to<t:s.from>t)&&!s.type.isError)return r<0?Math.max(0,Math.min(s.to-1,t-5)):Math.min(e.length,Math.max(s.from+1,t+5));if(r<0?s.prevSibling():s.nextSibling())break;if(!s.parent())return r<0?0:e.length}}class f{constructor(e){this.fragments=e,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?h(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?h(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let r=this.trees[t],s=this.index[t];if(s==r.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let i=r.children[s],O=this.start[t]+r.positions[s];if(O>e)return this.nextStart=O,null;if(O==e&&O+i.length<=this.safeTo)return O==e&&O>=this.safeFrom?i:null;i instanceof n.TreeBuffer?(this.index[t]++,this.nextStart=O+i.length):(this.index[t]++,O+i.length>=e&&(this.trees.push(i),this.start.push(O),this.index.push(0)))}}}class g extends ${constructor(){super(...arguments),this.extended=-1,this.mask=0,this.context=0}clear(e){this.start=e,this.value=this.extended=-1}}const d=new $;class x{constructor(e){this.tokens=[],this.mainToken=d,this.actions=[],this.tokens=e.tokenizers.map((e=>new g))}getActions(e,t){let r=0,s=null,{parser:n}=e.p,{tokenizers:i}=n,O=n.stateSlot(e.state,3),a=e.curContext?e.curContext.hash:0;for(let n=0;n<i.length;n++){if(0==(1<<n&O))continue;let o=i[n],$=this.tokens[n];if((!s||o.fallback)&&((o.contextual||$.start!=e.pos||$.mask!=O||$.context!=a)&&(this.updateCachedToken($,o,e,t),$.mask=O,$.context=a),0!=$.value)){let t=r;if($.extended>-1&&(r=this.addActions(e,$.extended,$.end,r)),r=this.addActions(e,$.value,$.end,r),!o.extend&&(s=$,r>t))break}}for(;this.actions.length>r;)this.actions.pop();return s||(s=d,s.start=e.pos,e.pos==t.length?s.accept(e.p.parser.eofTerm,e.pos):s.accept(0,e.pos+1)),this.mainToken=s,this.actions}updateCachedToken(e,t,r,s){if(e.clear(r.pos),t.token(s,e,r),e.value>-1){let{parser:t}=r.p;for(let n=0;n<t.specialized.length;n++)if(t.specialized[n]==e.value){let i=t.specializers[n](s.read(e.start,e.end),r);if(i>=0&&r.p.parser.dialect.allows(i>>1)){0==(1&i)?e.value=i>>1:e.extended=i>>1;break}}}else r.pos==s.length?e.accept(r.p.parser.eofTerm,r.pos):e.accept(0,r.pos+1)}putAction(e,t,r,s){for(let t=0;t<s;t+=3)if(this.actions[t]==e)return s;return this.actions[s++]=e,this.actions[s++]=t,this.actions[s++]=r,s}addActions(e,t,r,s){let{state:n}=e,{parser:i}=e.p,{data:O}=i;for(let e=0;e<2;e++)for(let a=i.stateSlot(n,e?2:1);;a+=3){if(65535==O[a]){if(1!=O[a+1]){0==s&&2==O[a+1]&&(s=this.putAction(y(O,a+1),t,r,s));break}a=y(O,a+2)}O[a]==t&&(s=this.putAction(y(O,a+1),t,r,s))}return s}}var m;!function(e){e[e.Distance=5]="Distance",e[e.MaxRemainingPerStep=3]="MaxRemainingPerStep",e[e.MinBufferLengthPrune=200]="MinBufferLengthPrune",e[e.ForceReduceLimit=10]="ForceReduceLimit"}(m||(m={}));class P{constructor(e,t,r,s){this.parser=e,this.input=t,this.startPos=r,this.context=s,this.pos=0,this.recovering=0,this.nextStackID=9812,this.nested=null,this.nestEnd=0,this.nestWrap=null,this.reused=[],this.tokens=new x(e),this.topTerm=e.top[1],this.stacks=[i.start(this,e.top[0],this.startPos)];let n=null==s?void 0:s.fragments;this.fragments=n&&n.length?new f(n):null}advance(){if(this.nested){let e=this.nested.advance();return this.pos=this.nested.pos,e&&(this.finishNested(this.stacks[0],e),this.nested=null),null}let e,t,r,s=this.stacks,n=this.pos,i=this.stacks=[];for(let O=0;O<s.length;O++){let a,o=s[O];for(;;){if(o.pos>n)i.push(o);else if(a=this.checkNest(o))(!r||r.stack.score<o.score)&&(r=a);else{if(this.advanceStack(o,i,s))continue;{e||(e=[],t=[]),e.push(o);let r=this.tokens.mainToken;t.push(r.value,r.end)}}break}}if(r)return this.startNested(r),null;if(!i.length){let t=e&&function(e){let t=null;for(let r of e)r.pos==r.p.input.length&&r.p.parser.stateFlag(r.state,2)&&(!t||t.score<r.score)&&(t=r);return t}(e);if(t)return this.stackToTree(t);if(this.parser.strict)throw u&&e&&console.log("Stuck with token "+this.parser.getName(this.tokens.mainToken.value)),new SyntaxError("No parse at "+n);this.recovering||(this.recovering=5)}if(this.recovering&&e){let r=this.runRecovery(e,t,i);if(r)return this.stackToTree(r.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(i.length>e)for(i.sort(((e,t)=>t.score-e.score));i.length>e;)i.pop();i.some((e=>e.reducePos>n))&&this.recovering--}else if(i.length>1)e:for(let e=0;e<i.length-1;e++){let t=i[e];for(let r=e+1;r<i.length;r++){let s=i[r];if(t.sameState(s)||t.buffer.length>200&&s.buffer.length>200){if(!((t.score-s.score||t.buffer.length-s.buffer.length)>0)){i.splice(e--,1);continue e}i.splice(r--,1)}}}this.pos=i[0].pos;for(let e=1;e<i.length;e++)i[e].pos<this.pos&&(this.pos=i[e].pos);return null}advanceStack(e,t,r){let s=e.pos,{input:i,parser:O}=this,a=u?this.stackID(e)+" -> ":"";if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,r=t?e.curContext.hash:0;for(let i=this.fragments.nodeAt(s);i;){let s=this.parser.nodeSet.types[i.type.id]==i.type?O.getGoto(e.state,i.type.id):-1;if(s>-1&&i.length&&(!t||(i.contextHash||0)==r))return e.useNode(i,s),u&&console.log(a+this.stackID(e)+` (via reuse of ${O.getName(i.type.id)})`),!0;if(!(i instanceof n.Tree)||0==i.children.length||i.positions[0]>0)break;let o=i.children[0];if(!(o instanceof n.Tree))break;i=o}}let o=O.stateSlot(e.state,4);if(o>0)return e.reduce(o),u&&console.log(a+this.stackID(e)+` (via always-reduce ${O.getName(65535&o)})`),!0;let $=this.tokens.getActions(e,i);for(let n=0;n<$.length;){let i=$[n++],o=$[n++],p=$[n++],l=n==$.length||!r,c=l?e:e.split();if(c.apply(i,o,p),u&&console.log(a+this.stackID(c)+` (via ${0==(65536&i)?"shift":`reduce of ${O.getName(65535&i)}`} for ${O.getName(o)} @ ${s}${c==e?"":", split"})`),l)return!0;c.pos>s?t.push(c):r.push(c)}return!1}advanceFully(e,t){let r=e.pos;for(;;){let s=this.checkNest(e);if(s)return s;if(!this.advanceStack(e,null,null))return!1;if(e.pos>r)return Q(e,t),!0}}runRecovery(e,t,r){let s,n=null,i=!1;for(let O=0;O<e.length;O++){let a=e[O],o=t[O<<1],$=t[1+(O<<1)],p=u?this.stackID(a)+" -> ":"";if(a.deadEnd){if(i)continue;i=!0,a.restart(),u&&console.log(p+this.stackID(a)+" (restarted)");let e=this.advanceFully(a,r);if(e){!0!==e&&(s=e);continue}}let l=a.split(),c=p;for(let e=0;l.forceReduce()&&e<10;e++){u&&console.log(c+this.stackID(l)+" (via force-reduce)");let e=this.advanceFully(l,r);if(e){!0!==e&&(s=e);break}u&&(c=this.stackID(l)+" -> ")}for(let e of a.recoverByInsert(o))u&&console.log(p+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,r);this.input.length>a.pos?($==a.pos&&($++,o=0),a.recoverByDelete(o,$),u&&console.log(p+this.stackID(a)+` (via recover-delete ${this.parser.getName(o)})`),Q(a,r)):(!n||n.score<a.score)&&(n=a)}if(n)return n;if(s)for(let e of this.stacks)if(e.score>s.stack.score){s=void 0;break}return s&&this.startNested(s),null}forceFinish(){let e=this.stacks[0].split();return this.nested&&this.finishNested(e,this.nested.forceFinish()),this.stackToTree(e.forceAll())}stackToTree(e,t=e.pos){return this.parser.context&&e.emitContext(),n.Tree.build({buffer:o.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.startPos,length:t-this.startPos,minRepeatType:this.parser.minRepeatTerm})}checkNest(e){let t=this.parser.findNested(e.state);if(!t)return null;let r=t.value;return"function"==typeof r&&(r=r(this.input,e)),r?{stack:e,info:t,spec:r}:null}startNested(e){let{stack:t,info:r,spec:s}=e;this.stacks=[t],this.nestEnd=this.scanForNestEnd(t,r.end,s.filterEnd),this.nestWrap="number"==typeof s.wrapType?this.parser.nodeSet.types[s.wrapType]:s.wrapType||null,s.startParse?this.nested=s.startParse(this.input.clip(this.nestEnd),t.pos,this.context):this.finishNested(t)}scanForNestEnd(e,t,r){for(let s=e.pos;s<this.input.length;s++)if(d.start=s,d.value=-1,t.token(this.input,d,e),d.value>-1&&(!r||r(this.input.read(s,d.end))))return s;return this.input.length}finishNested(e,t){this.nestWrap?t=new n.Tree(this.nestWrap,t?[t]:[],t?[0]:[],this.nestEnd-e.pos):t||(t=new n.Tree(n.NodeType.none,[],[],this.nestEnd-e.pos));let r=this.parser.findNested(e.state);e.useNode(t,this.parser.getGoto(e.state,r.placeholder,!0)),u&&console.log(this.stackID(e)+" (via unnest)")}stackID(e){let t=(c||(c=new WeakMap)).get(e);return t||c.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function Q(e,t){for(let r=0;r<t.length;r++){let s=t[r];if(s.pos==e.pos&&s.sameState(e))return void(t[r].score<e.score&&(t[r]=e))}t.push(e)}class w{constructor(e,t,r){this.source=e,this.flags=t,this.disabled=r}allows(e){return!this.disabled||0==this.disabled[e]}}const S=e=>e;class b{constructor(e){if(this.bufferLength=n.DefaultBufferLength,this.strict=!1,this.cachedDialect=null,13!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (13)`);let t=l(e.tokenData),r=e.nodeNames.split(" ");this.minRepeatTerm=r.length,this.context=e.context;for(let t=0;t<e.repeatNodeCount;t++)r.push("");let s=[];for(let e=0;e<r.length;e++)s.push([]);function i(e,t,r){s[e].push([t,t.deserialize(String(r))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];for(let r=1;r<t.length;){let s=t[r++];if(s>=0)i(s,e,t[r++]);else{let n=t[r+-s];for(let O=-s;O>0;O--)i(t[r++],e,n);r++}}}if(this.specialized=new Uint16Array(e.specialized?e.specialized.length:0),this.specializers=[],e.specialized)for(let t=0;t<e.specialized.length;t++)this.specialized[t]=e.specialized[t].term,this.specializers[t]=e.specialized[t].get;this.states=l(e.states,Uint32Array),this.data=l(e.stateData),this.goto=l(e.goto);let O=Object.keys(e.topRules).map((t=>e.topRules[t][1]));this.nodeSet=new n.NodeSet(r.map(((t,r)=>n.NodeType.define({name:r>=this.minRepeatTerm?void 0:t,id:r,props:s[r],top:O.indexOf(r)>-1,error:0==r,skipped:e.skippedNodes&&e.skippedNodes.indexOf(r)>-1})))),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new p(t,e):e)),this.topRules=e.topRules,this.nested=(e.nested||[]).map((([e,t,r,s])=>({name:e,value:t,end:new p(l(r),0),placeholder:s}))),this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}parse(e,t=0,r={}){"string"==typeof e&&(e=n.stringInput(e));let s=new P(this,e,t,r);for(;;){let e=s.advance();if(e)return e}}startParse(e,t=0,r={}){return"string"==typeof e&&(e=n.stringInput(e)),new P(this,e,t,r)}getGoto(e,t,r=!1){let s=this.goto;if(t>=s[0])return-1;for(let n=s[t+1];;){let t=s[n++],i=1&t,O=s[n++];if(i&&r)return O;for(let r=n+(t>>1);n<r;n++)if(s[n]==e)return O;if(i)return-1}}hasAction(e,t){let r=this.data;for(let s=0;s<2;s++)for(let n,i=this.stateSlot(e,s?2:1);;i+=3){if(65535==(n=r[i])){if(1!=r[i+1]){if(2==r[i+1])return y(r,i+2);break}n=r[i=y(r,i+2)]}if(n==t||0==n)return y(r,i+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}findNested(e){let t=this.stateSlot(e,0);return 4&t?this.nested[t>>10]:null}validAction(e,t){if(t==this.stateSlot(e,4))return!0;for(let r=this.stateSlot(e,1);;r+=3){if(65535==this.data[r]){if(1!=this.data[r+1])return!1;r=y(this.data,r+2)}if(t==y(this.data,r+1))return!0}}nextStates(e){let t=[];for(let r=this.stateSlot(e,1);;r+=3){if(65535==this.data[r]){if(1!=this.data[r+1])break;r=y(this.data,r+2)}if(0==(1&this.data[r+2])){let e=this.data[r+1];t.some(((t,r)=>1&r&&t==e))||t.push(this.data[r],e)}}return t}overrides(e,t){let r=I(this.data,this.tokenPrecTable,t);return r<0||I(this.data,this.tokenPrecTable,e)<r}configure(e){let t=Object.assign(Object.create(b.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let r=this.topRules[e.top];if(!r)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=r}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let r=e.tokenizers.find((e=>e.from==t));return r?r.to:t}))),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),e.nested&&(t.nested=this.nested.map((t=>Object.prototype.hasOwnProperty.call(e.nested,t.name)?{name:t.name,value:e.nested[t.name],end:t.end,placeholder:t.placeholder}:t))),null!=e.strict&&(t.strict=e.strict),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get hasNested(){return this.nested.length>0}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){if(this.cachedDialect&&this.cachedDialect.source==e)return this.cachedDialect;let t=Object.keys(this.dialects),r=t.map((()=>!1));if(e)for(let s of e.split(" ")){let e=t.indexOf(s);e>=0&&(r[e]=!0)}let s=null;for(let e=0;e<t.length;e++)if(!r[e])for(let r,n=this.dialects[t[e]];65535!=(r=this.data[n++]);)(s||(s=new Uint8Array(this.maxTerm+1)))[r]=1;return this.cachedDialect=new w(e,r,s)}static deserialize(e){return new b(e)}}function y(e,t){return e[t]|e[t+1]<<16}function I(e,t,r){for(let s,n=t;65535!=(s=e[n]);n++)if(s==r)return n-t;return-1}t.NodeProp=n.NodeProp,t.NodeSet=n.NodeSet,t.NodeType=n.NodeType,t.Tree=n.Tree,t.TreeCursor=n.TreeCursor,t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||S,this.reduce=e.reduce||S,this.reuse=e.reuse||S,this.hash=e.hash,this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.Parser=b,t.Stack=i,t.Token=$}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s].call(i.exports,i,i.exports,r),i.exports}(()=>{const e=r(99),t=r(740),s=r(591),n=r(752);function i(e,t){console.log("Logging from WASM: ",t);const r=document.createElement("pre");return document.getElementById("output").appendChild(r),r.innerText=function(e,t){switch(e.tag){case"number":return t.toString();case"bool":return t?"True":"False";case"none":return"None";case"class":return e.name}}(e,t),t}document.addEventListener("DOMContentLoaded",(async function(){const r=new WebAssembly.Memory({initial:10,maximum:100}),O=await fetch("memory.wasm").then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,{js:{mem:r}})));var a={imports:{print_num:e=>i(s.NUM,e),print_bool:e=>i(s.BOOL,e),print_none:e=>i(s.NONE,e),abs:Math.abs,min:Math.min,max:Math.max,pow:Math.pow},errors:n.importObjectErrors,libmemory:O.instance.exports,memory_values:r,js:{memory:r}},o=new e.BasicREPL(a);function $(e){if(void 0===e)return void console.log("skip");if("none"===e.tag)return;const t=document.createElement("pre");switch(document.getElementById("output").appendChild(t),e.tag){case"num":t.innerText=String(e.value);break;case"bool":t.innerHTML=e.value?"True":"False";break;case"object":t.innerHTML=`<${e.name} object at ${e.address}`;break;default:throw new Error(`Could not render value: ${e}`)}}function p(e){e instanceof t.TypeCheckError&&(console.log(e.getA()),console.log(e.getErrMsg()));const r=document.createElement("pre");document.getElementById("output").appendChild(r),r.setAttribute("style","color: red"),r.innerText=String(e)}document.getElementById("run").addEventListener("click",(function(t){o=new e.BasicREPL(a);const r=document.getElementById("user-code");document.getElementById("output").innerHTML="",o.run(r.value).then((e=>{$(e),console.log("run finished")})).catch((e=>{p(e),console.log("run failed",e)}))})),function(){document.getElementById("output").innerHTML="";const e=document.getElementById("next-code");e.addEventListener("keypress",(t=>{if(t.shiftKey&&"Enter"===t.key);else if("Enter"===t.key){t.preventDefault();const r=document.createElement("div"),s=document.createElement("span");s.innerText="»",r.appendChild(s);const n=document.createElement("textarea");n.disabled=!0,n.className="repl-code",r.appendChild(n),document.getElementById("output").appendChild(r);const i=e.value;n.value=i,e.value="",o.run(i).then((e=>{$(e),console.log("run finished")})).catch((e=>{p(e),console.log("run failed",e)}))}}))}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,