(()=>{"use strict";var e={142:(e,t)=>{var r,s;Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyOp=t.UniOp=t.BinOp=void 0,function(e){e[e.Plus=0]="Plus",e[e.Minus=1]="Minus",e[e.Mul=2]="Mul",e[e.IDiv=3]="IDiv",e[e.Mod=4]="Mod",e[e.Eq=5]="Eq",e[e.Neq=6]="Neq",e[e.Lte=7]="Lte",e[e.Gte=8]="Gte",e[e.Lt=9]="Lt",e[e.Gt=10]="Gt",e[e.Is=11]="Is",e[e.And=12]="And",e[e.Or=13]="Or"}(r=t.BinOp||(t.BinOp={})),function(e){e[e.Neg=0]="Neg",e[e.Not=1]="Not"}(s=t.UniOp||(t.UniOp={})),t.stringifyOp=function(e){switch(e){case r.Plus:return"+";case r.Minus:return"-";case r.Mul:return"*";case r.IDiv:return"//";case r.Mod:return"%";case r.Eq:return"==";case r.Neq:return"!=";case r.Lte:return"<=";case r.Gte:return">=";case r.Lt:return"<";case r.Gt:return">";case r.Is:return"is";case r.And:return"and";case r.Or:return"or";case s.Neg:return"-";case s.Not:return"not";default:throw new Error("undefined op")}}},244:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.compile=t.makeLocals=t.emptyEnv=void 0;const s=r(142),n=r(591);function a(e){const t=[];return e.forEach((e=>{t.push(`(local $${e} i32)`)})),t}function i(e,t){switch(e.tag){case"store":return[...l(e.start,t),...l(e.offset,t),...l(e.value,t),"call $store"];case"assign":var r=o(e.value,t);return t.locals.has(e.name)?r.concat([`(local.set $${e.name})`]):r.concat([`(global.set $${e.name})`]);case"return":return(r=l(e.value,t)).push("return"),r;case"expr":return o(e.expr,t).concat(["(local.set $$last)"]);case"pass":return[];case"ifjmp":const s=t.labels.findIndex((t=>t===e.thn)),n=t.labels.findIndex((t=>t===e.els));return[...l(e.cond,t),`(if \n          (then\n            (local.set $$selector (i32.const ${s}))\n            (br $loop)\n          ) \n          (else \n            (local.set $$selector (i32.const ${n}))\n            (br $loop)\n          )\n         )`];case"jmp":return[`(local.set $$selector (i32.const ${t.labels.findIndex((t=>t===e.lbl))}))`,"(br $loop)"]}}function o(e,t){switch(e.tag){case"value":return l(e.value,t);case"binop":return[...l(e.left,t),...l(e.right,t),O(e.op)];case"uniop":const i=l(e.expr,t);switch(e.op){case s.UniOp.Neg:return[...i,"(local.set $$scratch)","(local.get $$scratch)","(i32.const 0)","(i32.const 0)","(local.get $$scratch)","(i32.const 0)","(call $load)","(i32.sub)","(call $store)","(local.get $$scratch)"];case s.UniOp.Not:return["(i32.const 0)",...i,"(i32.eq)"]}case"builtin1":const p=e.a.type,h=l(e.arg,t);var r=e.name;return"print"===e.name&&p===n.NUM?r="print_num":"print"===e.name&&p===n.BOOL?r="print_bool":"print"===e.name&&p===n.NONE&&(r="print_none"),h.concat([`(call $${r})`]);case"builtin2":return[...l(e.left,t),...l(e.right,t),`(call $${e.name})`];case"call":return(a=e.arguments.map((e=>l(e,t))).flat()).push(`(call $${e.name})`),a;case"call_indirect":var a=o(e.fn,t);return[...e.arguments.map((e=>l(e,t))).flat(),...a,`(call_indirect (type ${(0,n.makeWasmFunType)(e.arguments.length)}))`];case"alloc":return[...l(e.amount,t),"call $alloc"];case"load":return[...l(e.start,t),...l(e.offset,t),"call $load"]}}function l(e,t){switch(e.tag){case"num":var r=BigInt(e.value);if(r===BigInt(0))return["(i32.const 0)"];for(var s=0,n=[];r!=BigInt(0);)r<0&&(r*=BigInt(-1)),n.push(Number(r&BigInt(2147483647))),r/=BigInt(1<<31),s+=1;s+=1;var a=0,i=[];for(i.push(`(i32.const ${s})`),i.push("(call $alloc)"),i.push("(local.set $$scratch)"),i.push("(local.get $$scratch)"),i.push(`(i32.const ${a})`),i.push(`(i32.const ${s-1})`),i.push("call $store"),a+=1;a<s;a++)i.push("(local.get $$scratch)"),i.push(`(i32.const ${a})`),i.push(`(i32.const ${n[a-1]})`),i.push("call $store");return i.push("(local.get $$scratch)"),i;case"wasmint":return["(i32.const "+e.value+")"];case"bool":return[`(i32.const ${Number(e.value)})`];case"none":return["(i32.const 0)"];case"id":return t.locals.has(e.name)?[`(local.get $${e.name})`]:[`(global.get $${e.name})`]}}function O(e){switch(e){case s.BinOp.Plus:return"(call $$add)";case s.BinOp.Minus:return"(call $$sub)";case s.BinOp.Mul:return"(call $$mul)";case s.BinOp.IDiv:return"(call $$div)";case s.BinOp.Mod:return"(call $$mod)";case s.BinOp.Eq:return"(call $$eq)";case s.BinOp.Neq:return"(call $$neq)";case s.BinOp.Lte:return"(call $$lte)";case s.BinOp.Gte:return"(call $$gte)";case s.BinOp.Lt:return"(call $$lt)";case s.BinOp.Gt:return"(call $$gt)";case s.BinOp.Is:return"(i32.eq)";case s.BinOp.And:return"(i32.and)";case s.BinOp.Or:return"(i32.or)"}}function p(e,t){const r=l(e.value,t);return t.locals.has(e.name)?[...r,`(local.set $${e.name})`]:[...r,`(global.set $${e.name})`]}function h(e,t){var r=new Set;e.inits.forEach((e=>r.add(e.name))),r.add("$last"),r.add("$selector"),r.add("$scratch"),r.forEach(t.locals.add,t.locals),e.parameters.forEach((e=>t.locals.add(e.name))),t.labels=e.body.map((e=>e.label));const s=a(r).join("\n"),n=e.inits.map((e=>p(e,t))).flat().join("\n");var o=e.parameters.map((e=>`(param $${e.name} i32)`)).join(" "),l="(local.set $$selector (i32.const 0))\n";l+="(loop $loop\n";var O="(local.get $$selector)\n";return O+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{O=`(block ${e.label}\n              ${O}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>i(e,t).join("\n"))).join("\n")}\n            `})),l+=O,l+=") ;; end $loop",t.locals.clear(),[`\n  (func $${e.name} ${o} (result i32)\n    ${s}\n    ${n}\n    ${l}\n    (i32.const 0)\n    (return))`]}t.emptyEnv={globals:new Map,classes:new Map,classIndices:new Map,functionNames:new Map,locals:new Set,labels:[],offset:0,vtableMethods:[]},t.makeLocals=a,t.compile=function(e,t){const r=t,s=new Set;s.add("$last"),s.add("$selector"),s.add("$scratch"),s.forEach(t.locals.add,t.locals);const o=a(s),l=e.inits.map((e=>e.name)),O=[];e.funs.forEach((e=>{O.push(h(e,r).join("\n"))}));const u=e.classes.map((e=>function(e,t){const r=[...e.methods];return r.forEach((t=>t.name=(0,n.createMethodName)(e.name,t.name))),r.map((e=>h(e,t))).flat()}(e,r))).flat(),c=O.concat(u).join("\n\n"),$=e.inits.map((e=>p(e,r))).flat();r.labels=e.body.map((e=>e.label));var f="(local.set $$selector (i32.const 0))\n";f+="(loop $loop\n";var m="(local.get $$selector)\n";m+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{m=`(block ${e.label}\n              ${m}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>i(e,r).join("\n"))).join("\n")}\n            `})),f+=m;const d=[...o,...$,f+=") ;; end $loop"];return r.locals.clear(),e.inits.forEach((e=>r.globals.set(e.name,!0))),{globals:l,functions:c,mainSource:d.join("\n"),newEnv:r}}},752:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.wasmErrorImports=t.importObjectErrors=t.flattenAssertNotNone=t.assert_not_none=t.OperationOnNoneError=t.OperationOnNoneNote=t.flattenDivideByZero=t.divide_by_zero=t.DivideByZeroError=t.DivideByZeroNote=t.getRE=t.registerRE=t.runtimeErrorRegistry=t.RuntimeError=t.drawSquiggly=t.fullSrcLine=t.TYPE_ERROR_STRING=t.RUNTIME_ERROR_STRING=void 0;const s=r(850);function n(e,t,r,s){const n=t-r+1;return e.slice(n,s)}function a(e,t,r,s){return e===t?`${" ".repeat(r-1)}${"^".repeat(s-r)}`:""}t.RUNTIME_ERROR_STRING="RUNTIME ERROR",t.TYPE_ERROR_STRING="TYPE ERROR",t.fullSrcLine=n,t.drawSquiggly=a;class i extends Error{constructor(e,r){const s=new.target.prototype;super(),this.__proto__=s,this.a=r??void 0,this.SRC=e??void 0,this.name=t.RUNTIME_ERROR_STRING,this.message="You shouldn't see this. Compiler's cursed. Check if you prepared the error before throwing it out.",this.note=""}getA(){return this.a}prepare(){var e="";if(this.a&&this.SRC){const t=this.a,r=this.SRC,s=t.fromLoc,i=t.endLoc,o=t.eolLoc;e=` on line ${s.row} at col ${s.col}\n\n${n(r,s.srcIdx,s.col,o.srcIdx)}\n${a(s.row,i.row,s.col,i.col)}`}const t=this.note+e;this.message=t}getErrMsg(){return String(this)}}function o(e,r=t.runtimeErrorRegistry){return r.push(e),r.length-1}function l(e,r=t.runtimeErrorRegistry){return r[e]}function O(e,t){if(0===e){const e=l(t);throw e.prepare(),e}return e}t.RuntimeError=i,t.runtimeErrorRegistry=new Array,t.registerRE=o,t.getRE=l,t.DivideByZeroNote="cannot divide by zero";class p extends i{constructor(){super(...arguments),this.note=t.DivideByZeroNote}}t.DivideByZeroError=p,t.divide_by_zero=O,t.flattenDivideByZero=function(e,r){const n=o(new p(t.importObjectErrors.src,e));return{tag:"expr",expr:{tag:"call",name:"divide_by_zero",arguments:[r,(0,s.flattenWasmInt)(n)]}}},t.OperationOnNoneNote="cannot perform operation on none";class h extends i{constructor(){super(...arguments),this.note=t.OperationOnNoneNote}}t.OperationOnNoneError=h,t.assert_not_none=O,t.flattenAssertNotNone=function(e,r){const n=o(new h(t.importObjectErrors.src,e));return{tag:"expr",expr:{tag:"call",name:"assert_not_none",arguments:[r,(0,s.flattenWasmInt)(n)]}}},t.importObjectErrors={src:"",assert_not_none:t.assert_not_none,divide_by_zero:t.divide_by_zero},t.wasmErrorImports='\n    (func $assert_not_none (import "errors" "assert_not_none") (param i32) (param i32) (result i32))\n    (func $divide_by_zero (import "errors" "divide_by_zero")  (param i32) (param i32) (result i32))\n'},850:function(e,t,r){var s=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var n=Object.getOwnPropertyDescriptor(t,r);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,n)}:function(e,t,r,s){void 0===s&&(s=r),e[s]=t[r]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&s(t,e,r);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.flattenWasmInt=t.lowerProgram=t.closureName=void 0;const i=a(r(142)),o=a(r(752)),l=r(591);let O=new Map;function p(e){if(O.has(e)){var t=O.get(e);return O.set(e,t+1),e+(t+1)}return O.set(e,1),e+1}function h(e,t){return`${[e,...t.map((e=>e.name))].reverse().join("_$")}_$closure$`}function u(e,t,r){var s=h(e.name,r),n=(0,l.CLASS)(s),a={name:"self",type:n},i={...t,functionNames:new Map(t.functionNames)};e.children.forEach((t=>i.functionNames.set(t.name,h(t.name,[e,...r]))));var o=e.children.map((t=>u(t,i,[e,...r]))),O={tag:"assign",name:e.name,value:{a:{type:n},tag:"construct",name:s}},p={name:e.name,type:n,value:{tag:"none"}};return[[{name:s,fields:[],methods:[{name:"__init__",parameters:[a],ret:e.ret,inits:[],body:[],nonlocals:[],children:[]},{...e,name:l.APPLY,parameters:[a,...e.parameters],inits:[p,...o.map((e=>e[1])),...e.inits],body:[O,...o.map((e=>e[2])),...e.body]}],typeParams:[]},...o.map((e=>e[0])).flat()],p,O]}function c(e,t){return e.map((e=>{return t=e,{...t,value:f(t.value)};var t}))}function $(e,t){const[r,s]=function(e,t){const r=e.map((e=>function(e,t){var r=[],s={a:e.a,label:p("$startFun"),stmts:[]};r.push(s);var[n,a]=m(e.body,r,t);return[a,{...e,inits:[...n,...c(e.inits)],body:r}]}(e,t)));return[r.map((e=>e[0])).flat(),r.map((e=>e[1]))]}(e.methods,t);return[...r,{...e,fields:c(e.fields),methods:s}]}function f(e){switch(e.tag){case"num":return{...e,value:BigInt(e.value.toLocaleString("fullwide",{useGrouping:!1}))};case"bool":case"none":return e}}function m(e,t,r){var s=[],n=[];return e.forEach((e=>{const a=function(e,t,r){switch(e.tag){case"assign":var[s,n,a,i]=d(e.value,t,r);return t[t.length-1].stmts.push(...n,{a:e.a,tag:"assign",name:e.name,value:a}),[s,i];case"return":var[s,n,o,i]=g(e.value,t,r);return t[t.length-1].stmts.push(...n,{tag:"return",a:e.a,value:o}),[s,i];case"expr":var[O,h,u,i]=d(e.expr,t,r);return t[t.length-1].stmts.push(...h,{tag:"expr",a:e.a,expr:u}),[O,i];case"pass":return[[],[]];case"field-assign":{var[c,$,f,b]=g(e.obj,t,r),[x,w,P,Q]=g(e.value,t,r);if("class"!==e.obj.a.type.tag)throw new Error("Compiler's cursed, go home.");const s={tag:"wasmint",value:r.classes.get(e.obj.a.type.name).get(e.field)[0]};return y(t,...$,...w,{tag:"store",a:e.a,start:f,offset:s,value:P}),[[...c,...x],b.concat(Q)]}case"if":var S=p("$then"),v=p("$else"),q=p("$end"),I={tag:"jmp",lbl:q},[k,R,W,_]=g(e.cond,t,r),Y={tag:"ifjmp",cond:W,thn:S,els:v};y(t,...R,Y),t.push({a:e.a,label:S,stmts:[]});var[E,T]=m(e.thn,t,r);y(t,I),t.push({a:e.a,label:v,stmts:[]});var[X,N]=m(e.els,t,r);return y(t,I),t.push({a:e.a,label:q,stmts:[]}),[[...k,...E,...X],[..._,...T,...N]];case"while":var Z=p("$whilestart"),j=p("$whilebody"),C=p("$whileend");r.labels.push(Z,j,C),y(t,{tag:"jmp",lbl:Z}),t.push({a:e.a,label:Z,stmts:[]});var[k,R,W,_]=g(e.cond,t,r);y(t,...R,{tag:"ifjmp",cond:W,thn:j,els:C}),t.push({a:e.a,label:j,stmts:[]});var[U,G]=m(e.body,t,r);return y(t,{tag:"jmp",lbl:Z}),t.push({a:e.a,label:C,stmts:[]}),[[...k,...U],[..._,...G]];case"continue":return r.labels.length>2&&y(t,{tag:"jmp",lbl:r.labels[r.labels.length-3]}),[[],[]];case"break":return r.labels.length>0&&y(t,{tag:"jmp",lbl:r.labels[r.labels.length-1]}),[[],[]];case"for":var M=p("$forstart"),A=p("$forbody"),V=p("$forend"),B=r;B.labels.push(M,A,V),m([{tag:"expr",expr:{tag:"method-call",obj:e.values,method:"reset",arguments:[],a:{...e.a,type:l.NONE}},a:{...e.a,type:l.NONE}}],t,B),y(t,{tag:"jmp",lbl:M}),t.push({a:e.a,label:M,stmts:[]});var z={tag:"method-call",obj:e.values,method:"hasnext",arguments:[],a:{...e.a,type:l.BOOL}},L={tag:"method-call",obj:e.values,method:"next",arguments:[],a:e.a},[k,R,W]=g(z,t,B);y(t,...R,{tag:"ifjmp",cond:W,thn:A,els:V}),t.push({a:e.a,label:A,stmts:[]}),m([{tag:"assign",name:e.iterator,value:L,a:e.a}],t,B);var[U,G]=m(e.body,t,B);return y(t,{tag:"jmp",lbl:M}),t.push({a:e.a,label:V,stmts:[]}),[[...k,...U],[...G]]}}(e,t,r);s.push(...a[0]),n.push(...a[1])})),[s,n]}function d(e,t,r){switch(e.tag){case"uniop":var[s,n,a,O]=g(e.expr,t,r);return[s,n,{...e,expr:a},O];case"binop":var[h,u,c,m]=g(e.left,t,r),[b,x,w,P]=g(e.right,t,r),Q=[];return e.op!=i.BinOp.IDiv&&e.op!=i.BinOp.Mod||Q.push(o.flattenDivideByZero(e.a,w)),[[...h,...b],[...u,...x,...Q],{...e,left:c,right:w},[...m,...P]];case"builtin1":var[s,n,a,O]=g(e.arg,t,r);return[s,n,{tag:"builtin1",a:e.a,name:e.name,arg:a},O];case"builtin2":var[h,u,c,m]=g(e.left,t,r),[b,x,w,P]=g(e.right,t,r);return[[...h,...b],[...u,...x],{...e,left:c,right:w},[...m,...P]];case"call":const[A,V,B,z]=g(e.fn,t,r),L=e.arguments.map((e=>g(e,t,r))),D=L.map((e=>e[0])).flat(),H=L.map((e=>e[1])).flat(),F=L.map((e=>e[2])).flat(),K=L.map((e=>e[3])).flat(),J={tag:"wasmint",value:0};return[[...A,...D],[...V,o.flattenAssertNotNone(e.a,B),...H],{...e,tag:"call_indirect",fn:{tag:"load",start:B,offset:J},arguments:[B,...F]},[...z,...K]];case"method-call":{const[s,n,a,i]=g(e.obj,t,r),l=e.arguments.map((e=>g(e,t,r))),O=l.map((e=>e[0])).flat(),p=l.map((e=>e[1])).flat(),h=l.map((e=>e[2])).flat(),u=l.map((e=>e[3])).flat();var S=e.obj.a;if("class"!==S.type.tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+S.type.tag);const c=S.type.name;return[[...s,...O],[...n,o.flattenAssertNotNone(e.a,a),...p],{tag:"call",name:`${c}$${e.method}`,arguments:[a,...h]},[...i,...u]]}case"lookup":{const[s,n,a,i]=g(e.obj,t,r);if("class"!==e.obj.a.type.tag)throw new Error("Compiler's cursed, go home");const l=r.classes.get(e.obj.a.type.name),[O,p]=l.get(e.field);return[s,[...n,o.flattenAssertNotNone(e.a,a)],{tag:"load",start:a,offset:{tag:"wasmint",value:O}},i]}case"construct":const ee=[...r.classes.get(e.name).entries()],te=p("newObj"),re={tag:"alloc",amount:{tag:"wasmint",value:ee.length+1}},se=ee.map((e=>{const[t,[r,s]]=e;return{tag:"store",start:{tag:"id",name:te},offset:{tag:"wasmint",value:r},value:s}}));return[[{name:te,type:e.a.type,value:{tag:"none"}}],[{tag:"assign",name:te,value:re},{tag:"store",start:{tag:"id",name:te},offset:{tag:"wasmint",value:0},value:{tag:"wasmint",value:r.classIndices.get(e.name)}},...se,{tag:"expr",expr:{tag:"call",name:`${e.name}$__init__`,arguments:[{a:e.a,tag:"id",name:te}]}}],{a:e.a,tag:"value",value:{a:e.a,tag:"id",name:te}},[]];case"id":return[[],[],{tag:"value",value:{...e}},[]];case"literal":return[[],[],{tag:"value",value:f(e.value)},[]];case"if-expr":{var v=p("$ifExprThen"),q=p("$ifExprElse"),I=p("$ifExprEnd"),k=p("$ifExprTmp"),R={tag:"jmp",lbl:I};let[s,n,a,i]=g(e.cond,t,r);y(t,...n,{tag:"ifjmp",cond:a,thn:v,els:q}),t.push({a:e.a,label:v,stmts:[]});var[W,_,Y,E]=d(e.thn,t,r);y(t,..._,{a:e.a,tag:"assign",name:k,value:Y},R),t.push({a:e.a,label:q,stmts:[]});var[T,X,N,Z]=d(e.els,t,r);return y(t,...X,{a:e.a,tag:"assign",name:k,value:N},R),t.push({a:e.a,label:I,stmts:[]}),[[...s,...T,...W,{a:e.a,name:k,type:e.a.type,value:{a:{type:{tag:"none"}},tag:"none"}}],[],{a:e.a,tag:"value",value:{a:e.a,tag:"id",name:k}},[...i,...E,...Z]]}case"lambda":var[j,C]=(U=e,G=p("lambda"),M=U.params.map(((e,t)=>({name:e,type:U.type.params[t]}))),[{name:G,fields:[],methods:[{name:"__init__",parameters:[{name:"self",type:(0,l.CLASS)(G)}],ret:l.NONE,inits:[],body:[],nonlocals:[],children:[]},{name:l.APPLY,parameters:[{name:"self",type:(0,l.CLASS)(G)},...M],ret:U.type.ret,inits:[],body:[{a:{type:U.type.ret},tag:"return",value:U.expr}],nonlocals:[],children:[]}],typeParams:[]},{a:U.a,tag:"construct",name:G}]);const ne=new Map;j.fields.forEach(((e,t)=>ne.set(e.name,[t,e.value]))),r.classes.set(j.name,ne),r.classIndices.set(j.name,r.vtableMethods.length),r.vtableMethods.push(...j.methods.filter((e=>!e.name.includes("__init__"))).map((e=>[(0,l.createMethodName)(j.name,e.name),e.parameters.length])));const ae=$(j,r);ae[0].a=e.a;const[ie,oe,le,Oe]=d(C,t,r);return[ie,oe,le,[...ae,...Oe]]}var U,G,M}function g(e,t,r){var[s,n,a,i]=d(e,t,r);if("value"===a.tag)return[s,n,a.value,i];var o=p("valname"),l={tag:"assign",a:e.a,name:o,value:a};return[[...s,{a:e.a,name:o,type:e.a.type,value:{tag:"none"}}],[...n,l],{tag:"id",name:o,a:e.a},i]}function y(e,...t){e[e.length-1].stmts.push(...t)}t.closureName=h,t.lowerProgram=function(e,t){O=new Map;var r=[],s={a:e.a,label:p("$startProg"),stmts:[]};r.push(s),e.funs.forEach((e=>t.functionNames.set(e.name,h(e.name,[]))));var[n,a,i]=function(e,t){const r=e.map((e=>u(e,t,[])));return[r.map((e=>e[0])).flat(),r.map((e=>e[1])),r.map((e=>e[2]))]}(e.funs,t);[...n,...e.classes].forEach((e=>{t.classIndices.set(e.name,t.vtableMethods.length),t.vtableMethods.push(...e.methods.filter((e=>!e.name.includes("__init__"))).map((t=>[(0,l.createMethodName)(e.name,t.name),t.parameters.length])))}));var o=function(e,t){return e.map((e=>$(e,t))).flat()}([...n,...e.classes],t),[f,d]=m([...i,...e.stmts],r,t);return{a:e.a,funs:[],inits:[...f,...c([...a,...e.inits])],classes:[...o,...d],body:r}},t.flattenWasmInt=function(e){return{tag:"wasmint",value:e}}},789:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.monomorphizeProgram=t.processInits=t.processMethodParams=t.getCanonicalTypeName=t.monomorphizeClass=t.processStmts=t.processExprs=t.resolveZero=t.concretizeGenericTypes=void 0;const s=r(591);function n(e,t){switch(e.tag){case"typevar":return t.typeVars.get(e.name);case"class":const r=e.params.map((e=>n(e,t)));return{...e,params:r};default:return e}}function a(e,t){switch(e.tag){case"number":return{a:{...t,type:s.NUM},tag:"num",value:0};case"bool":return{a:{...t,type:s.BOOL},tag:"bool",value:!1};case"class":return{a:{...t,type:s.NONE},tag:"none"}}}function i(e,t){if(void 0===e.a.type)return e;switch(e.a.type=n(e.a.type,t),e.tag){case"binop":const r=i(e.left,t),n=i(e.right,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},left:r,right:n}:{...e,left:r,right:n};case"call":const a=e.arguments.map((e=>i(e,t)));return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},arguments:a}:{...e,arguments:a};case"construct":if("class"===e.a.type.tag&&e.a.type.params.length>0){const t=O(e.a.type);return{...e,a:{...e.a,type:(0,s.CLASS)(t)},name:t}}return e;case"id":return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))}}:e;case"index":const o=i(e.index,t),l=i(e.obj,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},index:o,obj:l}:{...e,index:o,obj:l};case"lookup":const p=i(e.obj,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},obj:p}:{...e,obj:p};case"method-call":const h=e.arguments.map((e=>i(e,t))),u=i(e.obj,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},arguments:h,obj:u}:{...e,arguments:h,obj:u};case"uniop":const c=i(e.expr,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},expr:c}:{...e,expr:c};case"builtin1":const $=i(e.arg,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},arg:$}:{...e,arg:$};case"builtin2":const f=i(e.left,t),m=i(e.right,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},left:f,right:m}:{...e,left:f,right:m};default:return e}}function o(e,t){if(void 0===e.a.type)return e;switch(e.a.type=n(e.a.type,t),e.tag){case"assign":const r=i(e.value,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},value:r}:{...e,value:r};case"expr":const n=i(e.expr,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},expr:n}:{...e,expr:n};case"field-assign":const a=i(e.obj,t),l=i(e.value,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},obj:a,value:l}:{...e,obj:a,value:l};case"index-assign":const p=i(e.obj,t),h=i(e.index,t),u=i(e.value,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},obj:p,index:h,value:u}:{...e,obj:p,index:h,value:u};case"if":const c=i(e.cond,t),$=e.thn.map((e=>o(e,t))),f=e.els.map((e=>o(e,t)));return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},cond:c,thn:$,els:f}:{...e,cond:c,thn:$,els:f};case"return":const m=i(e.value,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},value:m}:{...e,value:m};case"while":const d=i(e.cond,t),g=e.body.map((e=>o(e,t)));return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},cond:d,body:g}:{...e,cond:d,body:g};case"for":const{body:y,iterator:b,values:x}=e,w=y.map((e=>o(e,t))),P=i(x,t);return"class"===e.a.type.tag&&e.a.type.params.length>0?{...e,a:{...e.a,type:(0,s.CLASS)(O(e.a.type))},iterator:b,body:w,values:P}:{...e,iterator:b,values:P,body:w};default:return e}}function l(e,t,r,s){let i=r[s.classesInx.get(e)],l=JSON.parse(JSON.stringify(i));return l.name=t,l.typeParams=[],l.fields=l.fields.map((e=>(("typevar"===e.type.tag||"class"===e.type.tag&&e.type.params.length>0)&&(e.type=n(e.type,s),e.value=a(e.type,e.a)),e))),l.methods=l.methods.map((e=>(e.parameters=e.parameters.map((e=>{const t=n(e.type,s);return{...e,type:t}})),e.inits=e.inits.map((e=>(("typevar"===e.type.tag||"class"===e.type.tag&&e.type.params.length>0)&&(e.type=n(e.type,s),e.value=a(e.type,e.a)),e))),e.ret=n(e.ret,s),e))),l.fields=h(l.fields,r,s),l.methods=l.methods.map((e=>({...e,parameters:p(e.parameters,r,s),inits:h(e.inits,r,s),body:e.body.map((e=>o(e,s)))}))),l}function O(e){switch(e.tag){case"number":case"bool":return e.tag;case"class":const t=e.params.map((e=>O(e))).join("$");return e.name+"$"+t;default:throw new Error(`Invalid State Exception : unexpected type passed as a generic type ${e.tag}`)}}function p(e,t,r){return e.map((e=>{if("class"===e.type.tag&&e.type.params.length>0){const n=O(e.type);if(!r.morphedClasses.has(n)){const s=e.type.name;e.type.params.forEach(((e,n)=>r.typeVars.set(t[r.classesInx.get(s)].typeParams[n],e))),r.morphedClasses.add(n),t.push(l(s,n,t,r))}return{...e,type:(0,s.CLASS)(n)}}return e}))}function h(e,t,r){return e.map((e=>{if("class"===e.type.tag&&e.type.params.length>0){const n=O(e.type);if(!r.morphedClasses.has(n)){const s=e.type.name;e.type.params.forEach(((e,n)=>r.typeVars.set(t[r.classesInx.get(s)].typeParams[n],e))),r.morphedClasses.add(n),t.push(l(s,n,t,r))}return{...e,type:(0,s.CLASS)(n)}}return e}))}t.concretizeGenericTypes=n,t.resolveZero=a,t.processExprs=i,t.processStmts=o,t.monomorphizeClass=l,t.getCanonicalTypeName=O,t.processMethodParams=p,t.processInits=h,t.monomorphizeProgram=function(e){let t=new Map;e.classes.forEach(((e,r)=>t.set(e.name,r)));let r={classesInx:t,typeVars:new Map,morphedClasses:new Set};const s=h(e.inits,e.classes,r),n=e.classes.filter((e=>0===e.typeParams.length)),a=e.stmts.map((e=>o(e,r)));return{...e,inits:s,classes:n,typeVarInits:[],stmts:a}}},417:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateEnvironments=t.optimizeProgram=t.generateEnvironmentFunctions=t.generateEnvironmentProgram=t.optimizeClass=t.optimizeFunction=t.computePredecessorSuccessor=t.optimizeStatements=t.optimizeExpression=t.evaluateUniOp=t.evaluateBinOp=t.checkIfFoldableBinOp=t.optimizeValue=void 0;const s=r(142),n=r(358);function a(e,t){if("id"!==e.tag)return e;if(t.vars.has(e.name)){if(["nac","undef"].includes(t.vars.get(e.name).tag))return e;e=t.vars.get(e.name).value}return e}function i(e,t,r){if([s.BinOp.IDiv,s.BinOp.Mod].includes(e)){if(!(0,n.isTagBigInt)(t)||!(0,n.isTagBigInt)(r))throw new Error("Compiler Error: Function should be invoked only if the expression can be folded");if(0n===r.value)return!1}return!0}function o(e,t,r){if([s.BinOp.Plus,s.BinOp.Minus,s.BinOp.IDiv,s.BinOp.Mul,s.BinOp.Gt,s.BinOp.Lt,s.BinOp.Gte,s.BinOp.Lte,s.BinOp.Mod].includes(e)){if(!(0,n.isTagBigInt)(t)||!(0,n.isTagBigInt)(r))throw new Error("Compiler Error: Function should be invoked only if the expression can be folded");switch(e){case s.BinOp.Plus:return{tag:"num",value:t.value+r.value};case s.BinOp.Minus:return{tag:"num",value:t.value-r.value};case s.BinOp.Mul:return{tag:"num",value:t.value*r.value};case s.BinOp.IDiv:return{tag:"num",value:t.value/r.value};case s.BinOp.Mod:return{tag:"num",value:t.value%r.value};case s.BinOp.Gt:return{tag:"bool",value:t.value>r.value};case s.BinOp.Lt:return{tag:"bool",value:t.value<r.value};case s.BinOp.Gte:return{tag:"bool",value:t.value>=r.value};case s.BinOp.Lte:return{tag:"bool",value:t.value<=r.value}}}else if([s.BinOp.And,s.BinOp.Or].includes(e)){if(!(0,n.isTagBoolean)(t)||!(0,n.isTagBoolean)(r))throw new Error("Compiler Error: Function should be invoked only if the expression can be folded");switch(e){case s.BinOp.And:return{tag:"bool",value:t.value&&r.value};case s.BinOp.Or:return{tag:"bool",value:t.value||r.value}}}else{if(![s.BinOp.Eq,s.BinOp.Neq].includes(e)){if(!(0,n.isTagNone)(t)||!(0,n.isTagNone)(r))throw new Error("Compiler Error: Function should be invoked only if the expression can be folded");return{tag:"bool",value:!0}}if(!(0,n.isTagEqual)(t,r)||(0,n.isTagNone)(t)||(0,n.isTagNone)(r)||(0,n.isTagId)(t)||(0,n.isTagId)(r))throw new Error("Compiler Error: Function should be invoked only if the expression can be folded");if(e===s.BinOp.Eq)return{tag:"bool",value:t.value===r.value}}}function l(e,t){switch(e){case s.UniOp.Neg:if((0,n.isTagId)(t)||(0,n.isTagNone)(t)||(0,n.isTagBoolean)(t))throw new Error("Compiler Error");return{tag:"num",value:-1n*t.value};case s.UniOp.Not:if(!(0,n.isTagBoolean)(t))throw new Error("Compiler Error");return{tag:"bool",value:!t.value}}}function O(e,t){switch(e.tag){case"value":var r=a(e.value,t);return{...e,value:r};case"binop":var s=a(e.left,t),n=a(e.right,t);return"id"!==s.tag&&"id"!==n.tag&&i(e.op,s,n)?{tag:"value",value:o(e.op,s,n)}:{...e,left:s,right:n};case"uniop":return"id"===(O=a(e.expr,t)).tag?{...e,expr:O}:(l(e.op,O),e);case"builtin1":var O=a(e.arg,t);return{...e,arg:O};case"builtin2":return s=a(e.left,t),n=a(e.right,t),{...e,left:s,right:n};case"call":var p=e.arguments.map((e=>a(e,t)));return{...e,arguments:p};case"alloc":var h=a(e.amount,t);return{...e,amount:h};case"load":var u=a(e.start,t),c=a(e.offset,t);return{...e,start:u,offset:c};default:return e}}function p(e,t){switch(e.tag){case"assign":return"value"===(s=O(e.value,t)).tag?"id"===s.value.tag?t.vars.set(e.name,{tag:"nac"}):t.vars.set(e.name,{tag:"val",value:s.value}):t.vars.set(e.name,{tag:"nac"}),{...e,value:s};case"return":var r=a(e.value,t);return{...e,value:r};case"expr":var s=O(e.expr,t);return{...e,expr:s};case"pass":case"jmp":case"store":return e;case"ifjmp":return r=a(e.cond,t),{...e,cond:r}}}function h(e){let t=new Map,r=new Map,s=new Map;return e.forEach((e=>{s.set(e.label,e);const n=e.stmts[e.stmts.length-1];void 0!==n&&"ifjmp"===n.tag?(t.has(e.label)&&!t.get(e.label).includes(n.thn)?t.set(e.label,[...t.get(e.label),n.thn]):t.has(e.label)||t.set(e.label,[n.thn]),t.has(e.label)&&!t.get(e.label).includes(n.els)?t.set(e.label,[...t.get(e.label),n.els]):t.has(e.label)||t.set(e.label,[n.els]),r.has(n.thn)&&!r.get(n.thn).includes(e.label)?r.set(n.thn,[...r.get(n.thn),e.label]):r.has(n.thn)||r.set(n.thn,[e.label]),r.has(n.els)&&!r.get(n.els).includes(e.label)?r.set(n.els,[...r.get(n.els),e.label]):r.has(n.els)||r.set(n.els,[e.label])):void 0!==n&&"jmp"===n.tag&&(t.has(e.label)&&!t.get(e.label).includes(n.lbl)?t.set(e.label,[...t.get(e.label),n.lbl]):t.has(e.label)||t.set(e.label,[n.lbl]),r.has(n.lbl)&&!r.get(n.lbl).includes(e.label)?r.set(n.lbl,[...r.get(n.lbl),e.label]):r.has(n.lbl)||r.set(n.lbl,[e.label]))})),[r,t,s]}function u(e,t){var r={vars:new Map};return e.forEach((e=>{t?r.vars.set(e.name,{tag:"undef"}):r.vars.set(e.name,{tag:"val",value:e.value})})),r}function c(e){return{vars:new Map(e.vars)}}function $(e,t,r){e.forEach((e=>{r?t.vars.set(e.name,{tag:"undef"}):t.vars.set(e.name,{tag:"nac"})}))}function f(e,t){var r=!1,s=e.stmts.map((e=>{var s=p(e,t);return r||(0,n.checkStmtEquality)(s,e)||(r=!0),s}));return[{...e,stmts:s},r]}function m(e){var[t,r]=y(e),s=!1,n=e.body.map((e=>{var r=c(t.get(e.label)),[n,a]=f(e,r);return!s&&a&&(s=!0),n}));return{...e,body:n}}function d(e){var t=e.methods.map((e=>m(e)));return{...e,methods:t}}function g(e){var t=u(e.inits,!1),r=new Map,s=new Map,n=u(e.inits,!0);e.body.forEach((e=>{r.set(e.label,c(n)),s.set(e.label,c(n))}));var[a,i,o]=h(e.body);return a.set(e.body[0].label,["VD"]),i.set("VD",[e.body[0].label]),s.set("VD",t),b([e.body[0].label],r,s,a,i,o),[r,s]}function y(e){var t=u(e.inits,!1);$(e.parameters,t,!1);var r=new Map,s=new Map,n=u(e.inits,!0);$(e.parameters,t,!0),e.body.forEach((e=>{r.set(e.label,c(n)),s.set(e.label,c(n))})),r.set(e.body[0].label,t);var[a,i,o]=h(e.body);return a.set(e.body[0].label,["VD"]),i.set("VD",[e.body[0].label]),s.set("VD",t),b([e.body[0].label],r,s,a,i,o),[r,s]}function b(e,t,r,s,a,i){if(0===e.length)return;const o=e.pop(),l=function(e,t){if(0===e.length)throw new Error("CompileError: Block with predecessors");var r=t.get(e[0]);return e.slice(1).forEach((e=>{r=function(e,t){var r={vars:new Map};return e.vars.forEach(((e,s)=>{const a=t.vars.get(s);"nac"===a.tag||"nac"===e.tag?r.vars.set(s,{tag:"nac"}):"undef"===e.tag&&"undef"===a.tag?r.vars.set(s,{tag:"undef"}):"undef"===e.tag?r.vars.set(s,{tag:"val",value:a.value}):"undef"===a.tag||(0,n.checkValueEquality)(e.value,a.value)?r.vars.set(s,{tag:"val",value:e.value}):r.vars.set(s,{tag:"nac"})})),r}(r,t.get(e))})),r}(s.get(o),r);if(function(e,t){const r=e.vars,s=t.vars;for(const e of r.keys()){const t=r.get(e),a=s.get(e);if(!(0,n.checkCompileValEquality)(t,a))return!1}return!0}(t.get(o),l))return void b(e,t,r,s,a,i);var p,h,u;t.set(o,l),r.set(o,(p=l,h=i.get(o),u={vars:new Map(p.vars)},h.stmts.forEach((e=>{if(void 0===e&&console.log(h.stmts),"assign"===e.tag){const t=O(e.value,u);"value"===t.tag?"id"===t.value.tag?u.vars.set(e.name,{tag:"nac"}):u.vars.set(e.name,{tag:"val",value:t.value}):u.vars.set(e.name,{tag:"nac"})}})),u));const c=void 0===a.get(o)?[]:a.get(o);b([...e,...c],t,r,s,a,i)}t.optimizeValue=a,t.checkIfFoldableBinOp=i,t.evaluateBinOp=o,t.evaluateUniOp=l,t.optimizeExpression=O,t.optimizeStatements=p,t.computePredecessorSuccessor=h,t.optimizeFunction=m,t.optimizeClass=d,t.generateEnvironmentProgram=g,t.generateEnvironmentFunctions=y,t.optimizeProgram=function(e){var[t,r]=g(e),s=!1,n=e.body.map((e=>{var r=c(t.get(e.label)),[n,a]=f(e,r);return!s&&a&&(s=!0),n})),a=e.classes.map((e=>d(e))),i=e.funs.map((e=>m(e)));return{...e,body:n,classes:a,funs:i}},t.generateEnvironments=b},358:(e,t)=>{function r(e){return"none"===e.tag}function s(e){return"bool"===e.tag}function n(e){return"num"===e.tag}function a(e,t){if(e.tag!==t.tag)return!1;if("none"===e.tag||"none"===t.tag)return!0;if("id"===e.tag||"id"===t.tag){if("id"!==t.tag||e.tag!==t.tag)throw new Error("Compiler Error!");return e.name===t.name}return e.value===t.value}function i(e,t){if(e.tag!==t.tag)return!1;switch(e.tag){case"value":if("value"!==t.tag)throw new Error("Compiler Error!");return a(e.value,t.value);case"binop":if("binop"!==t.tag)throw new Error("Compiler Error!");return e.op===t.op&&a(e.left,t.left)&&a(e.right,t.right);case"uniop":if("uniop"!==t.tag)throw new Error("Compiler Error!");return e.op===t.op&&a(e.expr,t.expr);case"builtin1":if("builtin1"!==t.tag)throw new Error("Compiler Error!");return e.name===t.name&&a(e.arg,t.arg);case"builtin2":if("builtin2"!==t.tag)throw new Error("Compiler Error!");return e.name===t.name&&a(e.left,t.left)&&a(e.right,t.right);case"call":if("call"!==t.tag)throw new Error("Compiler Error!");if(e.name!==t.name||e.arguments.length!==t.arguments.length)return!1;for(let r=0;r<e.arguments.length;r++)if(!a(e.arguments[r],t.arguments[r]))return!1;return!0;case"alloc":if("alloc"!==t.tag)throw new Error("Compiler Error!");return a(e.amount,t.amount);case"load":if("load"!==t.tag)throw new Error("Compiler Error!");return a(e.start,t.start)&&a(e.offset,t.offset)}}Object.defineProperty(t,"__esModule",{value:!0}),t.checkStmtEquality=t.checkExprEquality=t.checkCompileValEquality=t.checkValueEquality=t.isTagEqual=t.isTagNumber=t.isTagBigInt=t.isTagBoolean=t.isTagNone=t.isTagId=void 0,t.isTagId=function(e){return"id"===e.tag},t.isTagNone=r,t.isTagBoolean=s,t.isTagBigInt=n,t.isTagNumber=function(e){return"wasmint"===e.tag},t.isTagEqual=function(e,t){return!!(n(e)&&n(t)||s(e)&&s(t)||r(e)&&r(t))},t.checkValueEquality=a,t.checkCompileValEquality=function(e,t){return e.tag===t.tag&&("val"!==e.tag||a(e.value,t.value))},t.checkExprEquality=i,t.checkStmtEquality=function(e,t){if(e.tag!==t.tag)return!1;switch(e.tag){case"assign":if("assign"!==t.tag)throw new Error("Compiler Error!");return e.name===t.name&&i(e.value,t.value);case"return":if("return"!==t.tag)throw new Error("Compiler Error!");return a(e.value,t.value);case"expr":if("expr"!==t.tag)throw new Error("Compiler Error!");return i(e.expr,t.expr);case"pass":if("pass"!==t.tag)throw new Error("Compiler Error!");return!0;case"ifjmp":if("ifjmp"!==t.tag)throw new Error("Compiler Error!");return e.thn===t.thn&&e.els===t.els&&a(e.cond,t.cond);case"jmp":if("jmp"!==t.tag)throw new Error("Compiler Error!");return e.lbl===t.lbl;case"store":if("store"!==t.tag)throw new Error("Compiler Error!");return a(e.start,t.start)&&a(e.offset,t.offset)}}},660:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.traverseHelper=t.traverse=t.isClassDef=t.isFunDef=t.isScopeDef=t.isTypeVarInit=t.isVarInit=t.traverseDefs=t.traverseClassHelper=t.traverseClass=t.traverseGenericParams=t.traverseFunDefHelper=t.traverseFunDef=t.traverseScopeDef=t.traverseTypeVarInitHelper=t.traverseTypeVarInit=t.traverseVarInitHelper=t.traverseVarInit=t.traverseParameters=t.traverseParameterHelper=t.traverseParameter=t.traverseTypeList=t.traverseType=t.traverseStmtHelper=t.traverseStmt=t.traverseLambdaParams=t.traverseArguments=t.traverseExprHelper=t.traverseExpr=t.traverseLiteralHelper=t.traverseLiteral=t.nextLineBreakLoc=t.indToLoc=t.binarySearch=void 0;const s=r(893),n=r(142),a=r(591),i=r(665);function o(e,t){for(var r=0,s=e.length,n=0;r<=s;){const a=r+s>>1;e[a]<t?(n=a,r=a+1):s=a-1}return n}function l(e,t){const r=o(t.lineBreakIndices,e)+1;return{row:r,col:e-t.lineBreakIndices[r-1],srcIdx:e}}function O(e,t){const r=1===e.col?e.row-1:e.row;return{row:r,col:t.lineBreakIndices[r]-t.lineBreakIndices[r-1],srcIdx:t.lineBreakIndices[r]}}function p(e,t=!1){return function(r,s,n,...a){const i=l(r.from,n),o=e(r,s,n,...a),p=l(r.to,n),h=O(p,n);return t?{...o,a:{...o.a,fromLoc:i,endLoc:p,eolLoc:h,src:s}}:{...o,a:{...o.a,fromLoc:i,endLoc:p,eolLoc:h}}}}function h(e,t,r){switch(e.type.name){case"Number":return{tag:"num",value:Number(t.substring(e.from,e.to))};case"Boolean":return{tag:"bool",value:"True"===t.substring(e.from,e.to)};case"None":return{tag:"none"};case"VariableName":if("__ZERO__"!==t.substring(e.from,e.to).trim())throw new Error("ParseError: Not a literal");return{tag:"zero"};default:throw new Error("Not literal")}}function u(e,r,s){switch(e.type.name){case"Number":case"Boolean":case"None":return{tag:"literal",value:(0,t.traverseLiteral)(e,r,s)};case"VariableName":return{tag:"id",name:r.substring(e.from,e.to)};case"CallExpression":e.firstChild();const f=(0,t.traverseExpr)(e,r,s);if(e.nextSibling(),"id"===f.tag&&"mklambda"===f.name){e.firstChild(),e.nextSibling();const n=m(e,r,s);if("callable"!==n.tag)throw new Error("First argument to mklambda must be callable.");if(e.nextSibling(),e.nextSibling(),"LambdaExpression"!==e.type.name)throw new Error("Second argument to mklambda must be a lamdba.");e.firstChild(),e.nextSibling();var a=$(e,r);e.nextSibling(),e.nextSibling();var i=(0,t.traverseExpr)(e,r,s);return e.parent(),e.parent(),e.parent(),{tag:"lambda",type:n,params:a,expr:i}}let d=c(e,r,s);if(e.parent(),"lookup"===f.tag)return{tag:"method-call",obj:f.obj,method:f.field,arguments:d};if("id"===f.tag){const e=f.name;if("print"===e||"abs"===e)return{tag:"builtin1",name:e,arg:d[0]};if("max"===e||"min"===e||"pow"===e)return{tag:"builtin2",name:e,left:d[0],right:d[1]}}return{tag:"call",fn:f,arguments:d};case"BinaryExpression":e.firstChild();const g=(0,t.traverseExpr)(e,r,s);switch(e.nextSibling(),r.substring(e.from,e.to)){case"+":o=n.BinOp.Plus;break;case"-":o=n.BinOp.Minus;break;case"*":o=n.BinOp.Mul;break;case"//":o=n.BinOp.IDiv;break;case"%":o=n.BinOp.Mod;break;case"==":o=n.BinOp.Eq;break;case"!=":o=n.BinOp.Neq;break;case"<=":o=n.BinOp.Lte;break;case">=":o=n.BinOp.Gte;break;case"<":o=n.BinOp.Lt;break;case">":o=n.BinOp.Gt;break;case"is":o=n.BinOp.Is;break;case"and":o=n.BinOp.And;break;case"or":o=n.BinOp.Or;break;default:throw new Error("Could not parse op at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}e.nextSibling();const y=(0,t.traverseExpr)(e,r,s);return e.parent(),{tag:"binop",op:o,left:g,right:y};case"ParenthesizedExpression":return e.firstChild(),e.nextSibling(),i=(0,t.traverseExpr)(e,r,s),e.parent(),i;case"UnaryExpression":var o;switch(e.firstChild(),r.substring(e.from,e.to)){case"-":o=n.UniOp.Neg;break;case"not":o=n.UniOp.Not;break;default:throw new Error("Could not parse op at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}return e.nextSibling(),i=(0,t.traverseExpr)(e,r,s),e.parent(),{tag:"uniop",op:o,expr:i};case"MemberExpression":e.firstChild();var l=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var O=r.substring(e.from,e.to);return e.parent(),{tag:"lookup",obj:l,field:O};case"self":return{tag:"id",name:"self"};case"ConditionalExpression":e.firstChild();var p=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var h=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var u=(0,t.traverseExpr)(e,r,s);return e.parent(),{tag:"if-expr",thn:p,cond:h,els:u};default:throw new Error("Could not parse expr at "+e.from+" "+e.to+": "+r.substring(e.from,e.to))}}function c(e,r,s){e.firstChild();const n=[];for(e.nextSibling();")"!==e.type.name;){let a=(0,t.traverseExpr)(e,r,s);n.push(a),e.nextSibling(),e.nextSibling()}return e.parent(),n}function $(e,t){let r=e.firstChild();if(!r)return[];const s=[];for(;r;){let n=t.substring(e.from,e.to);s.push(n),e.nextSibling(),r=e.nextSibling()}return e.parent(),s}function f(e,r,s){switch(e.node.type.name){case"ReturnStatement":return e.firstChild(),n=e.nextSibling()?(0,t.traverseExpr)(e,r,s):{tag:"literal",value:{tag:"none"}},e.parent(),{tag:"return",value:n};case"AssignStatement":e.firstChild();const h=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.nextSibling();var n=(0,t.traverseExpr)(e,r,s);if(e.parent(),"lookup"===h.tag)return{tag:"field-assign",obj:h.obj,field:h.field,value:n};if("id"===h.tag)return{tag:"assign",name:h.name,value:n};throw new Error("Unknown target while parsing assignment");case"ExpressionStatement":e.firstChild();const u=(0,t.traverseExpr)(e,r,s);return e.parent(),{tag:"expr",expr:u};case"IfStatement":e.firstChild(),e.nextSibling();var a=(0,t.traverseExpr)(e,r,s);e.nextSibling(),e.firstChild();for(var i=[],o=[];e.nextSibling();)i.push((0,t.traverseStmt)(e,r,s));if(e.parent(),e.nextSibling()){for(e.nextSibling(),e.firstChild();e.nextSibling();)o.push((0,t.traverseStmt)(e,r,s));e.parent()}return e.parent(),{tag:"if",cond:a,thn:i,els:o};case"WhileStatement":e.firstChild(),e.nextSibling(),a=(0,t.traverseExpr)(e,r,s),e.nextSibling();var l=[];for(e.firstChild();e.nextSibling();)l.push((0,t.traverseStmt)(e,r,s));return e.parent(),e.parent(),{tag:"while",cond:a,body:l};case"PassStatement":return{tag:"pass"};case"ContinueStatement":return{tag:"continue"};case"BreakStatement":return{tag:"break"};case"ForStatement":if(e.firstChild(),e.nextSibling(),"VariableName"!=e.type.name)throw new Error("Iterator must be a variable");var O=r.substring(e.from,e.to);e.nextSibling(),e.nextSibling();var p=(0,t.traverseExpr)(e,r,s);for(e.nextSibling(),l=[],e.firstChild();e.nextSibling();)l.push((0,t.traverseStmt)(e,r,s));return e.parent(),e.parent(),{tag:"for",iterator:O,values:p,body:l};default:throw new Error("Could not parse stmt at "+e.node.from+" "+e.node.to+": "+r.substring(e.from,e.to))}}function m(e,t,r){switch(e.type.name){case"VariableName":let s=t.substring(e.from,e.to);switch(s){case"int":return a.NUM;case"bool":return a.BOOL;default:return(0,a.CLASS)(s)}case"None":return a.NONE;case"MemberExpression":e.firstChild();let n=t.substring(e.from,e.to).trim();if("Callable"===n){e.nextSibling(),e.nextSibling();const s=d(e,t,r);e.nextSibling(),e.nextSibling();const n=m(e,t,r);return e.parent(),(0,a.CALLABLE)(s,n)}e.nextSibling(),e.nextSibling();const i=[];for(;"]"!==e.type.name;)i.push(m(e,t,r)),e.nextSibling(),e.nextSibling();return e.parent(),{tag:"class",name:n,params:i};default:throw new Error("ParseError : Could not parse type")}}function d(e,t,r){e.firstChild();const s=[];for(e.nextSibling();"]"!==e.type.name;){let n=m(e,t,r);e.nextSibling(),e.nextSibling(),s.push(n)}return e.parent(),s}function g(e,t,r){let s=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw new Error("Missed type annotation for parameter "+s);e.firstChild(),e.nextSibling();let n=m(e,t,r);return e.parent(),{name:s,type:n}}function y(e,r,s){e.firstChild();const n=[];for(e.nextSibling();")"!==e.type.name;)n.push((0,t.traverseParameter)(e,r,s)),e.nextSibling(),e.nextSibling();return e.parent(),n}function b(e,r,s){e.firstChild();var n=r.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw e.parent(),Error("invalid variable init");e.firstChild(),e.nextSibling();const a=m(e,r,s);e.parent(),e.nextSibling(),e.nextSibling();var i=(0,t.traverseLiteral)(e,r,s);return e.parent(),{name:n,type:a,value:i}}function x(e,t,r){e.firstChild();var s=t.substring(e.from,e.to).trim();e.nextSibling(),e.nextSibling(),e.firstChild(),e.nextSibling(),e.firstChild(),e.nextSibling();let n=s;if("String"===e.type.name&&(n=t.substring(e.from+1,e.to-1).trim(),e.nextSibling()),")"!==e.type.name)throw Error("ParseError : constrained type variables are not supported.");return e.parent(),e.parent(),e.parent(),{name:s,canonicalName:n,types:[]}}function w(e,t,r){if(e.firstChild(),"nonlocal"!==e.type.name)throw e.parent(),Error("invalid variable scope");e.nextSibling();const s=t.substring(e.from,e.to);return e.parent(),{name:s}}function P(e,r,s){e.firstChild(),e.nextSibling();var n=r.substring(e.from,e.to);e.nextSibling();var i=y(e,r,s);e.nextSibling();let o=a.NONE;"TypeDef"===e.type.name&&(e.firstChild(),o=m(e,r,s),e.parent(),e.nextSibling()),e.firstChild();for(var l=[],O=[],p=[],h=[],u=e.nextSibling();u;){if(v(e))l.push((0,t.traverseVarInit)(e,r,s));else if(I(e))O.push(w(e,r));else{if(!k(e))break;p.push((0,t.traverseFunDef)(e,r,s))}u=e.nextSibling()}for(;u;)h.push((0,t.traverseStmt)(e,r,s)),u=e.nextSibling();return e.parent(),e.parent(),{name:n,parameters:i,ret:o,inits:l,body:h,nonlocals:O,children:p}}function Q(e,t){const r=[];if("ArgList"!==e.type.name)return r;if(e.firstChild(),e.nextSibling(),"MemberExpression"!==e.type.name)return e.parent(),r;if(e.firstChild(),"Generic"!==t.substring(e.from,e.to).trim())return e.parent(),e.parent(),r;e.nextSibling(),e.nextSibling();let s=e;for(;"]"!==s.type.name;)r.push(t.substring(s.from,s.to).trim()),s.nextSibling(),s.nextSibling();return e.parent(),e.parent(),r}function S(e,r,s){const n=[],i=[];e.firstChild(),e.nextSibling();const o=r.substring(e.from,e.to);e.nextSibling();const l=Q(e,r);for(e.nextSibling(),e.firstChild();e.nextSibling();)if(v(e))n.push((0,t.traverseVarInit)(e,r,s));else{if(!k(e))throw new Error(`Could not parse the body of class: ${o}`);i.push((0,t.traverseFunDef)(e,r,s))}if(e.parent(),e.parent(),!i.find((e=>"__init__"===e.name))){const e=l.map((e=>(0,a.CLASS)(e)));i.push({name:"__init__",parameters:[{name:"self",type:(0,a.CLASS)(o,e)}],ret:a.NONE,inits:[],body:[],nonlocals:[],children:[]})}return{name:o,typeParams:l,fields:n,methods:i}}function v(e,t,r){if("AssignStatement"===e.type.name){e.firstChild(),e.nextSibling();const t="TypeDef"===e.type.name;return e.parent(),t}return!1}function q(e,t){return"AssignStatement"===e.type.name&&(e.firstChild(),e.nextSibling(),e.nextSibling(),"CallExpression"!==e.type.name?(e.parent(),!1):(e.firstChild(),"VariableName"!==e.type.name||"TypeVar"!==t.substring(e.from,e.to).trim()?(e.parent(),e.parent(),!1):(e.parent(),e.parent(),!0)))}function I(e,t){return"ScopeStatement"===e.type.name}function k(e,t,r){return"FunctionDefinition"===e.type.name}function R(e,t,r){return"ClassDefinition"===e.type.name}function W(e,r,s){if("Script"===e.node.type.name){const a=[],i=[],o=[],l=[],O=[];for(var n=e.firstChild();n;){if(v(e))a.push((0,t.traverseVarInit)(e,r,s));else if(q(e,r))O.push((0,t.traverseTypeVarInit)(e,r,s));else if(k(e))i.push((0,t.traverseFunDef)(e,r,s));else{if(!R(e))break;o.push((0,t.traverseClass)(e,r,s))}n=e.nextSibling()}for(;n;)l.push((0,t.traverseStmt)(e,r,s)),n=e.nextSibling();return e.parent(),{funs:i,inits:a,typeVarInits:O,classes:o,stmts:l}}throw new Error("Could not parse program at "+e.node.from+" "+e.node.to)}t.binarySearch=o,t.indToLoc=l,t.nextLineBreakLoc=O,t.traverseLiteral=p(h),t.traverseLiteralHelper=h,t.traverseExpr=p(u),t.traverseExprHelper=u,t.traverseArguments=c,t.traverseLambdaParams=$,t.traverseStmt=p(f),t.traverseStmtHelper=f,t.traverseType=m,t.traverseTypeList=d,t.traverseParameter=p(g),t.traverseParameterHelper=g,t.traverseParameters=y,t.traverseVarInit=p(b),t.traverseVarInitHelper=b,t.traverseTypeVarInit=p(x),t.traverseTypeVarInitHelper=x,t.traverseScopeDef=w,t.traverseFunDef=p(P),t.traverseFunDefHelper=P,t.traverseGenericParams=Q,t.traverseClass=p(S),t.traverseClassHelper=S,t.traverseDefs=function(e,r,s){const n=[],a=[],i=[];for(;;){if(v(e))n.push((0,t.traverseVarInit)(e,r,s));else if(k(e))a.push((0,t.traverseFunDef)(e,r,s));else{if(!R(e))return[n,a,i];i.push((0,t.traverseClass)(e,r,s))}e.nextSibling()}},t.isVarInit=v,t.isTypeVarInit=q,t.isScopeDef=I,t.isFunDef=k,t.isClassDef=R,t.traverse=p(W,!0),t.traverseHelper=W,t.parse=function(e){const r={lineBreakIndices:[]};e+="\n",r.lineBreakIndices=[-1];for(var n=0;n<e.length;n++)"\n"==e[n]&&r.lineBreakIndices.push(n);const a=s.parser.parse(e);return(0,i.stringifyTree)(a.cursor(),e,0),(0,t.traverse)(a.cursor(),e,r)}},99:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BasicREPL=void 0;const s=r(277),n=r(740),a=r(417),i=r(660),o=r(850);t.BasicREPL=class{constructor(e){if(this.importObject=e,!e.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});new Int32Array(e.buffer)[0]=4,this.importObject.js={memory:e}}this.currentEnv={globals:new Map,classes:new Map,classIndices:new Map,functionNames:new Map,locals:new Set,labels:[],offset:1,vtableMethods:[]},this.currentTypeEnv=n.defaultTypeEnv,this.functions=""}async run(e){const t={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},[r,n,a,i,o]=await(0,s.run)(e,t);this.currentEnv=n,this.currentTypeEnv=a,this.functions+=i;const l=this.importObject.env||{};return Object.keys(o.instance.exports).forEach((e=>{const t=o.instance.exports[e];t instanceof WebAssembly.Global&&(l[e]=t)})),this.importObject.env=l,r}optimize(e){const t={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},r=(0,i.parse)(e),[l,O]=(0,n.tc)(t.typeEnv,r),p=(0,s.augmentEnv)(t.env,l),h=(0,o.lowerProgram)(l,p);if(!this.importObject.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});this.importObject.js={memory:e}}return[h,(0,a.optimizeProgram)(h)]}tc(e){this.importObject,this.currentEnv,this.currentTypeEnv,this.functions;const t=(0,i.parse)(e),[r,s]=(0,n.tc)(this.currentTypeEnv,t);return r.a.type}}},277:function(e,t,r){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.run=t.augmentEnv=t.runWat=void 0;const n=s(r(504)),a=r(244),i=r(660),o=r(740),l=r(591),O=r(850),p=r(789),h=r(417),u=r(752);if("undefined"!=typeof process){const e=process.on;process.on=(...t)=>"uncaughtException"===t[0]?void 0:e.apply(process,t)}async function c(e,t){var r=(await(0,n.default)()).parseWat("test.wat",e).toBinary({}),s=await WebAssembly.instantiate(r.buffer,t);return[s.instance.exports.exported_func(),s]}function $(e,t){const r=new Map(e.globals),s=new Map(e.classes),n=new Map(e.classIndices),a=new Map(e.functionNames);var i=e.offset;return t.inits.forEach((e=>{r.set(e.name,!0)})),t.funs.forEach((e=>{a.set(e.name,(0,O.closureName)(e.name,[]));const t=(e,r)=>{s.set((0,O.closureName)(e.name,r),new Map),e.children.forEach((s=>t(s,[e,...r])))};t(e,[])})),t.classes.forEach((e=>{const t=new Map;e.fields.forEach(((e,r)=>t.set(e.name,[r+1,e.value]))),s.set(e.name,t)})),{globals:r,classes:s,classIndices:n,functionNames:a,locals:e.locals,labels:e.labels,offset:i,vtableMethods:e.vtableMethods}}t.runWat=c,t.augmentEnv=$,t.run=async function(e,t){t.importObject.errors.src=e;const r=(0,i.parse)(e),[s,n]=(0,o.tc)(t.typeEnv,r),f=(0,p.monomorphizeProgram)(s),m=$(t.env,f),d=(0,O.lowerProgram)(f,m),g=(0,h.optimizeProgram)(d),y=f.a.type;var b="",x="";y!==l.NONE&&(b="(result i32)",x="(local.get $$last)");let w=t.env.globals;const P=(0,a.compile)(g,m),Q=`(table ${m.vtableMethods.length} funcref)\n    (elem (i32.const 0) ${m.vtableMethods.map((e=>`$${e[0]}`)).join(" ")})`,S=new Set;m.vtableMethods.forEach((([e,t])=>S.add(t)));let v="";S.forEach((e=>{let t="";e>0&&(t=`(param${" i32".repeat(e)})`),v+=`(type ${(0,l.makeWasmFunType)(e)} (func ${t} (result i32)))\n`}));const q=[...w.keys()].map((e=>`(import "env" "${e}" (global $${e} (mut i32)))`)).join("\n"),I=P.globals.map((e=>`(global $${e} (export "${e}") (mut i32) (i32.const 0))`)).join("\n"),k=t.importObject;if(!k.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});k.js={memory:e}}const R=`(module\n    (import "js" "memory" (memory 1))\n    ${u.wasmErrorImports}\n    (func $print_num (import "imports" "print_num") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $min (import "imports" "min") (param i32) (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32) (param i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32) (param i32) (result i32))\n    (func $alloc (import "libmemory" "alloc") (param i32) (result i32))\n    (func $load (import "libmemory" "load") (param i32) (param i32) (result i32))\n    (func $store (import "libmemory" "store") (param i32) (param i32) (param i32))\n    (func $$add (import "imports" "$add") (param i32) (param i32) (result i32))\n    (func $$sub (import "imports" "$sub") (param i32) (param i32) (result i32))\n    (func $$mul (import "imports" "$mul") (param i32) (param i32) (result i32))\n    (func $$div (import "imports" "$div") (param i32) (param i32) (result i32))\n    (func $$mod (import "imports" "$mod") (param i32) (param i32) (result i32))\n    (func $$eq (import "imports" "$eq") (param i32) (param i32) (result i32))\n    (func $$neq (import "imports" "$neq") (param i32) (param i32) (result i32))\n    (func $$lte (import "imports" "$lte") (param i32) (param i32) (result i32))\n    (func $$gte (import "imports" "$gte") (param i32) (param i32) (result i32))\n    (func $$lt (import "imports" "$lt") (param i32) (param i32) (result i32))\n    (func $$gt (import "imports" "$gt") (param i32) (param i32) (result i32))\n    ${v}\n    ${q}\n    ${I}\n    ${Q}\n    ${t.functions}\n    ${P.functions}\n    (func (export "exported_func") ${b}\n      ${P.mainSource}\n      ${x}\n    )\n  )`,[W,_]=await c(R,k);return[(0,l.PyValue)(y,W),P.newEnv,n,P.functions,_]}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyTree=void 0,t.stringifyTree=function e(t,r,s){var n="";if(n+=" ".repeat(2*s)+t.type.name,["Number","CallExpression","BinaryExpression","UnaryExpression","ArithOp","VariableName"].includes(t.type.name)&&(n+=" --\x3e "+r.substring(t.from,t.to)),n+="\n",t.firstChild()){do{n+=e(t,r,s+1)}while(t.nextSibling());t.parent()}return n}},740:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tcIterator=t.tcLiteral=t.tcExpr=t.tcStmt=t.tcBlock=t.tcClass=t.tcTypeVars=t.resolveTypeTypeParams=t.resolveParameterTypeParams=t.resolveFunDefTypeParams=t.resolveVarInitTypeParams=t.resolveClassTypeParams=t.tcGenericClass=t.tcDef=t.tcInit=t.tc=t.augmentTEnv=t.specializeType=t.specializeMethodType=t.specializeFieldType=t.isValidType=t.join=t.isAssignable=t.isSubtype=t.isNoneOrClassOrCallable=t.equalType=t.equalTypeParams=t.equalCallable=t.emptyLocalTypeEnv=t.emptyGlobalTypeEnv=t.defaultTypeEnv=t.TypeCheckError=void 0;const s=r(142),n=r(591),a=r(752);class i extends Error{constructor(e,t,r){const s=r?.fromLoc,n=r?.endLoc,i=r?.eolLoc,o=new.target.prototype,l="TYPE ERROR: "+t+(r?` on line ${s.row} at col ${s.col}`:"")+`\n\n${r?(0,a.fullSrcLine)(e,s.srcIdx,s.col,i.srcIdx):""}\n${r?(0,a.drawSquiggly)(s.row,n.row,s.col,n.col):""}`;super(l),this.a=r??void 0,this.errMsg=l,this.__proto__=o}getA(){return this.a}getErrMsg(){return this.errMsg}}t.TypeCheckError=i;const o=new Map;function l(){return{vars:new Map,expectedRet:n.NONE,actualRet:n.NONE,topLevel:!0}}function O(e,t){if(e.length!==t.length)throw new i("Tried to zip two arrays of different length");return e.map(((e,r)=>[e,t[r]]))}function p(e,t){return e.params.length===t.params.length&&e.params.every(((e,r)=>h(e,t.params[r])))&&h(e.ret,t.ret)}function h(e,t){return e===t||"class"===e.tag&&"class"===t.tag&&e.name===t.name||"callable"===e.tag&&"callable"===t.tag&&p(e,t)||"typevar"===e.tag&&"typevar"===t.tag&&e.name===t.name}function u(e){return"none"===e.tag||"class"===e.tag||"callable"===e.tag}function c(e,t,r){return h(t,r)||"none"===t.tag&&("class"===r.tag||"callable"===r.tag)}function $(e,t,r){return c(0,t,r)}function f(e,t){if("number"===t.tag||"bool"===t.tag||"none"===t.tag)return!0;if("either"===t.tag)return!0;if("typevar"===t.tag)return!0;if("callable"===t.tag)return!0;if(!e.classes.has(t.name))return!1;let[r,s,n]=e.classes.get(t.name);return t.params.length===n.length&&O(n,t.params).reduce(((t,[r,s])=>t&&f(e,s)),!0)}function m(e,t,r){if("class"!==t.tag)return r;if(0===t.params.length)return r;let[s,n,a]=e.classes.get(t.name);return g(new Map(O(a,t.params)),r)}function d(e,t,[r,s]){if("class"!==t.tag)return[r,s];if(0===t.params.length)return[r,s];let[n,a,i]=e.classes.get(t.name),o=new Map(O(i,t.params)),l=g(o,s);return[r.map((e=>g(o,e))),l]}function g(e,t){if("either"===t.tag||"none"===t.tag||"bool"===t.tag||"number"===t.tag)return t;if("typevar"===t.tag)return e.has(t.name)?e.get(t.name):t;if("callable"===t.tag)return t;let r=t.params.map((t=>g(e,t)));return(0,n.CLASS)(t.name,r)}function y(e,t){const r=new Map(e.globals),s=new Map(e.functions),a=new Map(e.classes),o=new Map(e.typevars);return t.inits.forEach((e=>r.set(e.name,e.type))),t.funs.forEach((e=>r.set(e.name,(0,n.CALLABLE)(e.parameters.map((e=>e.type)),e.ret)))),t.classes.forEach((e=>{const t=new Map,r=new Map;e.fields.forEach((e=>t.set(e.name,e.type))),e.methods.forEach((e=>r.set(e.name,[e.parameters.map((e=>e.type)),e.ret])));const s=e.typeParams;a.set(e.name,[t,r,[...s]])})),t.typeVarInits.forEach((e=>{if(r.has(e.name)||o.has(e.name)||a.has(e.name))throw new i(`Duplicate identifier '${e.name}' for type-variable`);o.set(e.name,[e.canonicalName])})),{globals:r,functions:s,classes:a,typevars:o}}function b(e,t,r){if(!f(e,t.type))throw new i(r,`Invalid type annotation '${JSON.stringify(t.type)}' for '${t.name}'`);if("typevar"===t.type.tag){if("zero"!==t.value.tag)throw new i(r,"Generic variables must be initialized with __ZERO__");return{...t,a:{...t.a,type:n.NONE}}}const s=Y(t.value);if($(0,s,t.type))return{...t,a:{...t.a,type:n.NONE}};throw new i(r,`Expected type ${JSON.stringify(t.type.tag)}; got type ${JSON.stringify(s.tag)}`,t.value.a)}function x(e,t,r,s){var a=l();a.vars.set(t.name,(0,n.CALLABLE)(t.parameters.map((e=>e.type)),t.ret)),a.expectedRet=t.ret,a.topLevel=!1,t.parameters.forEach((r=>{if(!f(e,r.type))throw new i(s,`Invalid type annotation '${JSON.stringify(r.type)}' for parameter '${r.name}' in function '${t.name}'`);a.vars.set(r.name,r.type)}));var o=t.nonlocals.map((e=>({name:e.name,a:{...e.a,type:r.get(e.name)}})));t.parameters.forEach((e=>a.vars.set(e.name,e.type))),t.inits.forEach((t=>a.vars.set(t.name,b(e,t,s).type))),o.forEach((e=>a.vars.set(e.name,e.a.type)));var O=(e=>({globals:new Map(e.globals),functions:new Map(e.functions),classes:new Map(e.classes),typevars:new Map(e.typevars)}))(e);t.children.forEach((e=>O.functions.set(e.name,[e.parameters.map((e=>e.type)),e.ret])));var p=t.children.map((e=>x(O,e,a.vars,s)));t.children.forEach((e=>a.vars.set(e.name,(0,n.CALLABLE)(e.parameters.map((e=>e.type)),e.ret))));const h=R(O,a,t.body,s);if(!$(0,a.actualRet,a.expectedRet))throw new i(`expected return type of block: ${JSON.stringify(a.expectedRet)} does not match actual return type: ${JSON.stringify(a.actualRet)}`);return{...t,a:{...t.a,type:n.NONE},body:h,nonlocals:o,children:p}}function w(e,t,r){return t.typeParams.forEach((s=>{if(!e.typevars.has(s))throw new i(r,`undefined type variable ${s} used in definition of class ${t.name}`)})),k(e,t,r)}function P(e,t){let[r,s,n]=e.classes.get(t.name),a=new Map(Array.from(r.entries()).map((([e,r])=>{let[s,n]=q(t.typeParams,r);return[e,n]}))),i=new Map(Array.from(s.entries()).map((([e,[r,s]])=>{let[n,a]=q(t.typeParams,s);return[e,[r.map((e=>{let[r,s]=q(t.typeParams,e);return s})),a]]})));e.classes.set(t.name,[a,i,n]);let o=t.fields.map((e=>Q(t.typeParams,e))),l=t.methods.map((e=>S(t.typeParams,e)));return{...t,fields:o,methods:l}}function Q(e,t){let[r,s]=q(e,t.type);return{...t,type:s}}function S(e,t){let r=t.parameters.map((t=>v(e,t))),[s,n]=q(e,t.ret),a=t.inits.map((t=>Q(e,t)));return{...t,ret:n,parameters:r,inits:a}}function v(e,t){let[r,s]=q(e,t.type);return{...t,type:s}}function q(e,t){if("class"!==t.tag)return[!1,t];if(-1!==e.indexOf(t.name))return[!0,(0,n.TYPEVAR)(t.name)];let r=t.params.map((t=>{let[r,s]=q(e,t);return s}));return[!0,{...t,params:r}]}function I(e,t,r){return{...t,a:{...t.a,type:n.NONE}}}function k(e,t,r){const s=t.fields.map((t=>b(e,t,r))),a=t.methods.map((t=>x(e,t,new Map,r))),o=t.methods.find((e=>"__init__"===e.name)),l=t.typeParams.map(n.TYPEVAR);if(1!==o.parameters.length||"self"!==o.parameters[0].name||!h(o.parameters[0].type,(0,n.CLASS)(t.name,l))||o.ret!==n.NONE){const e=1!==o.parameters.length?`${o.parameters.length} parameters`:"self"!==o.parameters[0].name?`parameter name ${o.parameters[0].name}`:h(o.parameters[0].type,(0,n.CLASS)(t.name))?o.ret!==n.NONE?`return type ${JSON.stringify(o.ret.tag)}`:"unknown reason":`parameter type ${JSON.stringify(o.parameters[0].type.tag)}`;throw new i(r,`__init__ takes 1 parameter \`self\` of the same type of the class \`${t.name}\` with return type of \`None\`, got ${e}`,o.a)}return{a:{...t.a,type:n.NONE},name:t.name,fields:s,methods:a,typeParams:t.typeParams}}function R(e,t,r,s){return r.map((r=>W(e,t,r,s)))}function W(e,t,r,s){switch(r.tag){case"assign":const u=_(e,t,r.value,s);var a;if(t.vars.has(r.name))a=t.vars.get(r.name);else{if(!e.globals.has(r.name))throw new i(s,"Unbound id: "+r.name);a=e.globals.get(r.name)}if("class"===a.tag&&0!==a.params.length&&"class"===u.a.type.tag&&u.a.type.name===a.name&&"construct"===u.tag&&(u.a.type.params=[...a.params]),!$(0,u.a.type,a))throw new i(s,`Assignment value should have assignable type to type ${JSON.stringify(a.tag)}, got ${JSON.stringify(u.a.type.tag)}`,u.a);return{a:{...r.a,type:n.NONE},tag:r.tag,name:r.name,value:u};case"expr":const c=_(e,t,r.expr,s);return{a:c.a,tag:r.tag,expr:c};case"if":var o=_(e,t,r.cond,s);const f=R(e,t,r.thn,s),g=t.actualRet;t.actualRet=n.NONE;const y=R(e,t,r.els,s),b=t.actualRet;if(o.a.type!==n.BOOL)throw new i(s,`Condition Expression Must be have type "bool", got ${JSON.stringify(o.a.type.tag)}`,o.a);return g!==b&&(t.actualRet={tag:"either",left:g,right:b}),{a:{...r.a,type:g},tag:r.tag,cond:o,thn:f,els:y};case"return":if(t.topLevel)throw new i(s,"cannot return outside of functions");const x=_(e,t,r.value,s);if(!$(0,x.a.type,t.expectedRet))throw new i(s,"expected return type `"+t.expectedRet.tag+"`; got type `"+x.a.type.tag+"`",r.a);return t.actualRet=x.a.type,{a:x.a,tag:r.tag,value:x};case"while":o=_(e,t,r.cond,s);const w=R(e,t,r.body,s);if(!h(o.a.type,n.BOOL))throw new i(s,`Condition Expression Must be a bool, got ${JSON.stringify(o.a.type.tag)}`,o.a);return{a:{...r.a,type:n.NONE},tag:r.tag,cond:o,body:w};case"pass":case"break":case"continue":return{a:{...r.a,type:n.NONE},tag:r.tag};case"for":var l=E(e,t,r.iterator),O=_(e,t,r.values,s);if("class"!==O.a.type.tag)throw new i("values require an object");if(!e.classes.has(O.a.type.name))throw new i("values on an unknown class");const[P,Q]=e.classes.get(O.a.type.name);if(!Q.has("hasnext")||Q.get("hasnext")[1].tag!=n.BOOL.tag)throw new i(s,"iterable class must have hasnext method with boolean return type");if(!Q.has("next"))throw new i(s,"No next method");if(!h(d(e,O.a.type,Q.get("next"))[1],l))throw new i(s,"iterable class must have next method with same return type as iterator");if(!Q.has("reset")||Q.get("reset")[1].tag!=n.NONE.tag)throw new i(s,"iterable class must have reset method with none return type");const S=R(e,t,r.body,s);return{a:{...r.a,type:l},tag:r.tag,iterator:r.iterator,values:O,body:S};case"field-assign":var p=_(e,t,r.obj,s);const v=_(e,t,r.value,s);if("class"!==p.a.type.tag)throw new i(s,`field assignments require an object, got ${JSON.stringify(p.a.type.tag)}`,p.a);if(!e.classes.has(p.a.type.name))throw new i(s,`field assignment on an unknown class \`${p.a.type.name}\``,p.a);const[q,I]=e.classes.get(p.a.type.name);if(!q.has(r.field))throw new i(s,`could not find field \`${r.field}\` in class \`${p.a.type.name}\``,r.a);let k=m(e,p.a.type,q.get(r.field));if("class"===k.tag&&0!==k.params.length&&"class"===v.a.type.tag&&v.a.type.name===k.name&&"construct"===v.tag&&(v.a.type.params=[...k.params]),!$(0,v.a.type,k))throw new i(s,`field \`${r.field}\` expected type: ${JSON.stringify(q.get(r.field).tag)}, got value of type ${JSON.stringify(v.a.type.tag)}`,v.a);return{...r,a:{...r.a,type:n.NONE},obj:p,value:v}}}function _(e,t,r,a){switch(r.tag){case"literal":return{...r,a:{...r.a,type:Y(r.value)}};case"binop":const f=_(e,t,r.left,a),g=_(e,t,r.right,a),y={...r,left:f,right:g};switch(r.op){case s.BinOp.Plus:case s.BinOp.Minus:case s.BinOp.Mul:case s.BinOp.IDiv:case s.BinOp.Mod:if(h(f.a.type,n.NUM)&&h(g.a.type,n.NUM))return{...y,a:{...r.a,type:n.NUM}};throw new i(a,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number" on both sides, got ${JSON.stringify(f.a.type.tag)} and ${JSON.stringify(g.a.type.tag)}`,r.a);case s.BinOp.Eq:case s.BinOp.Neq:if("class"===f.a.type.tag||"class"===g.a.type.tag)throw new i(a,"cannot apply operator '==' on class types");if("typevar"===f.a.type.tag||"typevar"===g.a.type.tag)throw new i(a,"cannot apply operator '==' on unconstrained type parameters");if(h(f.a.type,g.a.type))return{...y,a:{...r.a,type:n.BOOL}};throw new i(a,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects the same type on both sides, got ${JSON.stringify(f.a.type.tag)} and ${JSON.stringify(g.a.type.tag)}`,r.a);case s.BinOp.Lte:case s.BinOp.Gte:case s.BinOp.Lt:case s.BinOp.Gt:if(h(f.a.type,n.NUM)&&h(g.a.type,n.NUM))return{...y,a:{...r.a,type:n.BOOL}};throw new i(a,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number" on both sides, got ${JSON.stringify(f.a.type.tag)} and ${JSON.stringify(g.a.type.tag)}`,r.a);case s.BinOp.And:case s.BinOp.Or:if(h(f.a.type,n.BOOL)&&h(g.a.type,n.BOOL))return{...y,a:{...r.a,type:n.BOOL}};throw new i(a,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "bool" on both sides, got ${JSON.stringify(f.a.type.tag)} and ${JSON.stringify(g.a.type.tag)}`,r.a);case s.BinOp.Is:if(!u(f.a.type)||!u(g.a.type))throw new i(a,`Binary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "class", "none", or "callable" on both sides, got ${JSON.stringify(f.a.type.tag)} and ${JSON.stringify(g.a.type.tag)}`,r.a);return{...y,a:{...r.a,type:n.BOOL}}}case"uniop":const b=_(e,t,r.expr,a),x={...r,a:b.a,expr:b};switch(r.op){case s.UniOp.Neg:if(h(b.a.type,n.NUM))return x;throw new i(a,`Unary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "number", got ${JSON.stringify(b.a.type.tag)}`,r.a);case s.UniOp.Not:if(h(b.a.type,n.BOOL))return x;throw new i(a,`Unary operator \`${(0,s.stringifyOp)(r.op)}\` expects type "bool", got ${JSON.stringify(b.a.type.tag)}`,r.a)}case"id":if(t.vars.has(r.name))return{...r,a:{...r.a,type:t.vars.get(r.name)}};if(e.globals.has(r.name))return{...r,a:{...r.a,type:e.globals.get(r.name)}};throw new i(a,"Unbound id: "+r.name,r.a);case"lambda":if(r.params.length!==r.type.params.length)throw new i("Mismatch in number of parameters: "+r.type.params.length+" != "+r.params.length);const w=(e=>({...e,vars:new Map(e.vars)}))(t);r.params.forEach(((e,t)=>{w.vars.set(e,r.type.params[t])}));let P=_(e,w,r.expr,a);if(!$(0,P.a.type,r.type.ret))throw new i("Expected type "+JSON.stringify(r.type.ret)+" in lambda, got type "+JSON.stringify(P.a.type.tag));return{a:{...r.a,type:r.type},tag:"lambda",params:r.params,type:r.type,expr:P};case"builtin1":if("print"===r.name){const s=_(e,t,r.arg,a);return{...r,a:s.a,arg:s}}if(e.functions.has(r.name)){const[[s],n]=e.functions.get(r.name),o=_(e,t,r.arg,a);if($(0,o.a.type,s))return{...r,a:{...r.a,type:n},arg:o};throw new i(a,`Function call expects an argument of type ${JSON.stringify(s.tag)}, got ${JSON.stringify(o.a.type.tag)}`,r.a)}throw new i(a,"Undefined function: "+r.name,r.a);case"builtin2":if(e.functions.has(r.name)){const[[s,n],o]=e.functions.get(r.name),l=_(e,t,r.left,a),O=_(e,t,r.right,a);if($(0,s,l.a.type)&&$(0,n,O.a.type))return{...r,a:{...r.a,type:o},left:l,right:O};throw new i(a,`Function call expects arguments of types ${JSON.stringify(s.tag)} and ${JSON.stringify(n.tag)}, got ${JSON.stringify(l.a.type.tag)} and ${JSON.stringify(O.a.type.tag)}`,r.a)}throw new i(a,"Undefined function: "+r.name,r.a);case"call":if("id"===r.fn.tag&&e.classes.has(r.fn.name)){const t={a:{...r.a,type:(0,n.CLASS)(r.fn.name)},tag:"construct",name:r.fn.name},[s,o]=e.classes.get(r.fn.name);if(o.has("__init__")){const[e,s]=o.get("__init__");if(r.arguments.length!==e.length-1)throw new i(a,`__init__ takes 1 parameter \`self\` of the same type of the class \`${r.fn.name}\` with return type of \`None\`, got ${r.arguments.length} parameters`,r.a);if(s!==n.NONE)throw new i(a,`__init__ takes 1 parameter \`self\` of the same type of the class \`${r.fn.name}\` with return type of \`None\`, gotreturn type ${JSON.stringify(s.tag)}`,r.a);return t}return t}{const s=_(e,t,r.fn,a);if("callable"!==s.a.type.tag)throw new i("Cannot call non-callable expression");const n=r.arguments.map((r=>_(e,t,r,a)));if(s.a.type.params.length===r.arguments.length&&s.a.type.params.every(((e,t)=>$(0,n[t].a.type,e))))return{...r,a:{...r.a,type:s.a.type.ret},arguments:n,fn:s};{const e=n.map((e=>JSON.stringify(e.a.type.tag))).join(", "),t=s.a.type.params.map((e=>JSON.stringify(e.tag))).join(", ");throw new i(a,`Function call expects arguments of types [${t}], got [${e}]`,r.a)}}case"lookup":if("class"===(o=_(e,t,r.obj,a)).a.type.tag){if(e.classes.has(o.a.type.name)){const[t,s]=e.classes.get(o.a.type.name);if(t.has(r.field))return{...r,a:{...r.a,type:m(e,o.a.type,t.get(r.field))},obj:o};throw new i(a,`could not find field ${r.field} in class ${o.a.type.name}`,r.a)}throw new i(a,`field lookup on an unknown class ${o.a.type.name}`,r.a)}throw new i(a,`field lookups require an object of type "class", got ${JSON.stringify(o.a.type.tag)}`,r.a);case"method-call":var o=_(e,t,r.obj,a),l=r.arguments.map((r=>_(e,t,r,a)));if("class"===o.a.type.tag){if(e.classes.has(o.a.type.name)){const[t,s]=e.classes.get(o.a.type.name);if(s.has(r.method)){const[t,n]=d(e,o.a.type,s.get(r.method)),O=[o].concat(l);if(t.length===O.length&&t.every(((e,t)=>$(0,O[t].a.type,e))))return{...r,a:{...r.a,type:n},obj:o,arguments:l};{const e=t.map((e=>JSON.stringify(e.tag))).join(", "),s=O.map((e=>JSON.stringify(e.a.type.tag))).join(", ");throw new i(a,`Method call ${r.method} expects arguments of types [${e}], got [${s}]`,r.a)}}throw new i(a,`could not found method ${r.method} in class ${o.a.type.name}`,r.a)}throw new i(a,`method call on an unknown class ${o.a.type.name}`,r.a)}throw new i(a,`method calls require an object of type "class", got ${JSON.stringify(o.a.type.tag)}`,r.a);case"if-expr":var O=_(e,t,r.thn,a),p=_(e,t,r.cond,a),c=_(e,t,r.els,a);if(!h(p.a.type,n.BOOL))throw new i(a,"Condition Expression Must be a bool",r.a);if(!h(O.a.type,c.a.type))throw new i(a,`if-expr type mismatch: ${JSON.stringify(O.a)} is not the same as ${JSON.stringify(c.a)}`,r.a);return{...r,a:O.a,cond:p,thn:O,els:c};default:throw new i(a,`unimplemented type checking for expr: ${r}`,r.a)}}function Y(e){switch(e.tag){case"bool":return n.BOOL;case"num":return n.NUM;case"none":return n.NONE}}function E(e,t,r){if(t.vars.has(r))return t.vars.get(r);if(e.globals.has(r))return e.globals.get(r);throw new i("Undefined iterator")}o.set("abs",[[n.NUM],n.NUM]),o.set("max",[[n.NUM,n.NUM],n.NUM]),o.set("min",[[n.NUM,n.NUM],n.NUM]),o.set("pow",[[n.NUM,n.NUM],n.NUM]),o.set("print",[[(0,n.CLASS)("object")],n.NUM]),t.defaultTypeEnv={globals:new Map,functions:o,classes:new Map,typevars:new Map},t.emptyGlobalTypeEnv=function(){return{globals:new Map,functions:new Map,classes:new Map,typevars:new Map}},t.emptyLocalTypeEnv=l,t.equalCallable=p,t.equalTypeParams=function(e,t){return e.length===t.length&&O(e,t).reduce(((e,[t,r])=>e&&h(t,r)),!0)},t.equalType=h,t.isNoneOrClassOrCallable=u,t.isSubtype=c,t.isAssignable=$,t.join=function(e,t,r){return n.NONE},t.isValidType=f,t.specializeFieldType=m,t.specializeMethodType=d,t.specializeType=g,t.augmentTEnv=y,t.tc=function(e,t){const r=t.a.src,s=l(),a=y(e,t),i=t.typeVarInits.map((e=>I(0,e))),o=t.inits.map((e=>b(a,e,r))),O=t.funs.map((e=>x(a,e,new Map,r))),p=t.classes.map((e=>{if(0===e.typeParams.length)return k(a,e,r);{let t=P(a,e);return w(a,t,r)}})),h=R(a,s,t.stmts,r);var u=n.NONE;h.length&&(u=h[h.length-1].a.type);for(let e of s.vars.keys())a.globals.set(e,s.vars.get(e));return[{a:{...t.a,type:u},inits:o,funs:O,classes:p,stmts:h,typeVarInits:i},a]},t.tcInit=b,t.tcDef=x,t.tcGenericClass=w,t.resolveClassTypeParams=P,t.resolveVarInitTypeParams=Q,t.resolveFunDefTypeParams=S,t.resolveParameterTypeParams=v,t.resolveTypeTypeParams=q,t.tcTypeVars=I,t.tcClass=k,t.tcBlock=R,t.tcStmt=W,t.tcExpr=_,t.tcLiteral=Y,t.tcIterator=E},591:(e,t)=>{function r(e,t){const r=t;if(0===e)return BigInt(0);const s=r(e,0);var n=BigInt(0);for(let t=Math.abs(s);t>0;t--)n<<=BigInt(31),n+=BigInt(2147483647&r(e,t));return s<0&&(n*=BigInt(-1)),n}function s(e,t){return t(Math.abs(e)+1)}function n(e,t,r,s){const n=s;n(e,0,t),r.forEach(((t,r)=>{n(e,r+1,t)}))}function a(e,t){const r=t.alloc,a=t.store,i=e<0;i&&(e*=BigInt(-1));const o=[];for(;e>0;)o.push(Number(e&BigInt(2147483647))),e>>=BigInt(31);const l=i?-1*o.length:o.length;if(0===l)return 0;const O=s(l,r);return n(O,l,o,a),O}function i(e){return{tag:"num",value:e}}function o(e){return{tag:"bool",value:e}}function l(e,t){return 0===t?{tag:"none"}:{tag:"object",name:e,address:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.makeWasmFunType=t.createMethodName=t.APPLY=t.CALLABLE=t.TYPEVAR=t.CLASS=t.NONE=t.BOOL=t.NUM=t.PyZero=t.PyNone=t.PyObj=t.PyBool=t.PyInt=t.PyValue=t.builtin_bignum=t.save_bignum=t.store_bignum=t.alloc_bignum=t.load_bignum=t.binop_comp_bignum=t.binop_bignum=t.bigMath=void 0,t.bigMath={abs:e=>e<BigInt(0)?-e:e,sign:e=>e===BigInt(0)?BigInt(0):e<BigInt(0)?BigInt(-1):BigInt(1),pow:(e,t)=>e**t,min(e,...t){for(const r of t)r<e&&(e=r);return e},max(e,...t){for(const r of t)r>e&&(e=r);return e},add:(e,t)=>e+t,sub:(e,t)=>e-t,mul:(e,t)=>e*t,div:(e,t)=>e/t,mod:(e,t)=>e%t,eq:(e,t)=>e===t,neq:(e,t)=>e!==t,lte:(e,t)=>e<=t,gte:(e,t)=>e>=t,lt:(e,t)=>e<t,gt:(e,t)=>e>t},t.binop_bignum=function(e,t,s){BigInt(0);const n=s.load;if(2!==e.length)throw new Error("Runtime Error: too many arguments for builtin functions");return a(t(r(e[0],n),r(e[1],n)),s)},t.binop_comp_bignum=function(e,t,s){var n=BigInt(0);const a=s.load;if(2!==e.length)throw new Error("Runtime Error: too many arguments for builtin functions");return n=t(r(e[0],a),r(e[1],a)),Number(n)},t.load_bignum=r,t.alloc_bignum=s,t.store_bignum=n,t.save_bignum=a,t.builtin_bignum=function(e,t,s){var n=BigInt(0);const i=s.load;if(1===e.length)n=t(r(e[0],i));else{if(2!==e.length)throw new Error("Runtime Error: too many arguments for builtin functions");n=t(r(e[0],i),r(e[1],i))}return a(n,s)},t.PyValue=function(e,t){switch(e.tag){case"number":return i(t);case"bool":return o(Boolean(t));case"class":return l(e.name,t);case"none":return{tag:"none"}}},t.PyInt=i,t.PyBool=o,t.PyObj=l,t.PyNone=function(){return{tag:"none"}},t.PyZero=function(){return{tag:"zero"}},t.NUM={tag:"number"},t.BOOL={tag:"bool"},t.NONE={tag:"none"},t.CLASS=function(e,t=[]){return{tag:"class",name:e,params:t}},t.TYPEVAR=function(e){return{tag:"typevar",name:e}},t.CALLABLE=function(e,t){return{tag:"callable",params:e,ret:t}},t.APPLY="apply",t.createMethodName=function(e,t){return`${e}$${t}`},t.makeWasmFunType=function(e){return`$callable${e}param`}},504:e=>{e.exports=wabt},897:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=1024;let s=0;class n{constructor(e,t){this.from=e,this.to=t}}class a{constructor(e={}){this.id=s++,this.perNode=!!e.perNode,this.deserialize=e.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(e){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof e&&(e=l.match(e)),t=>{let r=e(t);return void 0===r?null:[this,r]}}}a.closedBy=new a({deserialize:e=>e.split(" ")}),a.openedBy=new a({deserialize:e=>e.split(" ")}),a.group=new a({deserialize:e=>e.split(" ")}),a.contextHash=new a({perNode:!0}),a.lookAhead=new a({perNode:!0}),a.mounted=new a({perNode:!0});class i{constructor(e,t,r){this.tree=e,this.overlay=t,this.parser=r}}const o=Object.create(null);class l{constructor(e,t,r,s=0){this.name=e,this.props=t,this.id=r,this.flags=s}static define(e){let t=e.props&&e.props.length?Object.create(null):o,r=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),s=new l(e.name||"",t,e.id,r);if(e.props)for(let r of e.props)if(Array.isArray(r)||(r=r(s)),r){if(r[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");t[r[0].id]=r[1]}return s}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(a.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let r in e)for(let s of r.split(" "))t[s]=e[r];return e=>{for(let r=e.prop(a.group),s=-1;s<(r?r.length:0);s++){let n=t[s<0?e.name:r[s]];if(n)return n}}}}l.none=new l("",Object.create(null),0,8);class O{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let r of this.types){let s=null;for(let t of e){let e=t(r);e&&(s||(s=Object.assign({},r.props)),s[e[0].id]=e[1])}t.push(s?new l(r.name,s,r.id,r.flags):r)}return new O(t)}}const p=new WeakMap,h=new WeakMap;var u;t.IterMode=void 0,(u=t.IterMode||(t.IterMode={}))[u.ExcludeBuffers=1]="ExcludeBuffers",u[u.IncludeAnonymous=2]="IncludeAnonymous",u[u.IgnoreMounts=4]="IgnoreMounts",u[u.IgnoreOverlays=8]="IgnoreOverlays";class c{constructor(e,t,r,s,n){if(this.type=e,this.children=t,this.positions=r,this.length=s,this.props=null,n&&n.length){this.props=Object.create(null);for(let[e,t]of n)this.props["number"==typeof e?e:e.id]=t}}toString(){let e=this.prop(a.mounted);if(e&&!e.overlay)return e.tree.toString();let t="";for(let e of this.children){let r=e.toString();r&&(t&&(t+=","),t+=r)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(e=0){return new Q(this.topNode,e)}cursorAt(e,t=0,r=0){let s=p.get(this)||this.topNode,n=new Q(s);return n.moveTo(e,t),p.set(this,n._tree),n}get topNode(){return new y(this,0,0,null)}resolve(e,t=0){let r=g(p.get(this)||this.topNode,e,t,!1);return p.set(this,r),r}resolveInner(e,t=0){let r=g(h.get(this)||this.topNode,e,t,!0);return h.set(this,r),r}iterate(e){let{enter:r,leave:s,from:n=0,to:a=this.length}=e;for(let i=this.cursor((e.mode||0)|t.IterMode.IncludeAnonymous);;){let e=!1;if(i.from<=a&&i.to>=n&&(i.type.isAnonymous||!1!==r(i))){if(i.firstChild())continue;e=!0}for(;e&&s&&!i.type.isAnonymous&&s(i),!i.nextSibling();){if(!i.parent())return;e=!0}}}prop(e){return e.perNode?this.props?this.props[e.id]:void 0:this.type.prop(e)}get propValues(){let e=[];if(this.props)for(let t in this.props)e.push([+t,this.props[t]]);return e}balance(e={}){return this.children.length<=8?this:I(l.none,this.children,this.positions,0,this.children.length,0,this.length,((e,t,r)=>new c(this.type,e,t,r,this.propValues)),e.makeTree||((e,t,r)=>new c(l.none,e,t,r)))}static build(e){return function(e){var t;let{buffer:s,nodeSet:n,maxBufferLength:i=r,reused:o=[],minRepeatType:l=n.types.length}=e,O=Array.isArray(s)?new $(s,s.length):s,p=n.types,h=0,u=0;function m(e,t,r,s,$){let{id:b,start:x,end:w,size:P}=O,Q=u;for(;P<0;){if(O.next(),-1==P){let t=o[b];return r.push(t),void s.push(x-e)}if(-3==P)return void(h=b);if(-4==P)return void(u=b);throw new RangeError(`Unrecognized record size: ${P}`)}let S,v,q=p[b],k=x-e;if(w-x<=i&&(v=function(e,t){let r=O.fork(),s=0,n=0,a=0,o=r.end-i,p={size:0,start:0,skip:0};e:for(let i=r.pos-e;r.pos>i;){let e=r.size;if(r.id==t&&e>=0){p.size=s,p.start=n,p.skip=a,a+=4,s+=4,r.next();continue}let O=r.pos-e;if(e<0||O<i||r.start<o)break;let h=r.id>=l?4:0,u=r.start;for(r.next();r.pos>O;){if(r.size<0){if(-3!=r.size)break e;h+=4}else r.id>=l&&(h+=4);r.next()}n=u,s+=e,a+=h}return(t<0||s==e)&&(p.size=s,p.start=n,p.skip=a),p.size>4?p:void 0}(O.pos-t,$))){let t=new Uint16Array(v.size-v.skip),r=O.pos-v.size,s=t.length;for(;O.pos>r;)s=y(v.start,t,s);S=new f(t,w-v.start,n),k=v.start-e}else{let e=O.pos-P;O.next();let t=[],r=[],s=b>=l?b:-1,n=0,o=w;for(;O.pos>e;)s>=0&&O.id==s&&O.size>=0?(O.end<=o-i&&(d(t,r,x,n,O.end,o,s,Q),n=t.length,o=O.end),O.next()):m(x,e,t,r,s);if(s>=0&&n>0&&n<t.length&&d(t,r,x,n,x,o,s,Q),t.reverse(),r.reverse(),s>-1&&n>0){let e=function(e){return(t,r,s)=>{let n,i,o=0,l=t.length-1;if(l>=0&&(n=t[l])instanceof c){if(!l&&n.type==e&&n.length==s)return n;(i=n.prop(a.lookAhead))&&(o=r[l]+n.length+i)}return g(e,t,r,s,o)}}(q);S=I(q,t,r,0,t.length,0,w-x,e,e)}else S=g(q,t,r,w-x,Q-w)}r.push(S),s.push(k)}function d(e,t,r,s,a,i,o,l){let O=[],p=[];for(;e.length>s;)O.push(e.pop()),p.push(t.pop()+r-a);e.push(g(n.types[o],O,p,i-a,l-i)),t.push(a-r)}function g(e,t,r,s,n=0,i){if(h){let e=[a.contextHash,h];i=i?[e].concat(i):[e]}if(n>25){let e=[a.lookAhead,n];i=i?[e].concat(i):[e]}return new c(e,t,r,s,i)}function y(e,t,r){let{id:s,start:n,end:a,size:i}=O;if(O.next(),i>=0&&s<l){let o=r;if(i>4){let s=O.pos-(i-4);for(;O.pos>s;)r=y(e,t,r)}t[--r]=o,t[--r]=a-e,t[--r]=n-e,t[--r]=s}else-3==i?h=s:-4==i&&(u=s);return r}let b=[],x=[];for(;O.pos>0;)m(e.start||0,e.bufferStart||0,b,x,-1);let w=null!==(t=e.length)&&void 0!==t?t:b.length?x[0]+b[0].length:0;return new c(p[e.topID],b.reverse(),x.reverse(),w)}(e)}}c.empty=new c(l.none,[],[],0);class ${constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new $(this.buffer,this.index)}}class f{constructor(e,t,r){this.buffer=e,this.length=t,this.set=r}get type(){return l.none}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],r=this.buffer[e+3],s=this.set.types[t],n=s.name;if(/\W/.test(n)&&!s.isError&&(n=JSON.stringify(n)),r==(e+=4))return n;let a=[];for(;e<r;)a.push(this.childString(e)),e=this.buffer[e+3];return n+"("+a.join(",")+")"}findChild(e,t,r,s,n){let{buffer:a}=this,i=-1;for(let o=e;o!=t&&!(m(n,s,a[o+1],a[o+2])&&(i=o,r>0));o=a[o+3]);return i}slice(e,t,r,s){let n=this.buffer,a=new Uint16Array(t-e);for(let s=e,i=0;s<t;)a[i++]=n[s++],a[i++]=n[s++]-r,a[i++]=n[s++]-r,a[i++]=n[s++]-e;return new f(a,s-r,this.set)}}function m(e,t,r,s){switch(e){case-2:return r<t;case-1:return s>=t&&r<t;case 0:return r<t&&s>t;case 1:return r<=t&&s>t;case 2:return s>t;case 4:return!0}}function d(e,t){let r=e.childBefore(t);for(;r;){let t=r.lastChild;if(!t||t.to!=r.to)break;t.type.isError&&t.from==t.to?(e=r,r=t.prevSibling):r=t}return e}function g(e,r,s,n){for(var a;e.from==e.to||(s<1?e.from>=r:e.from>r)||(s>-1?e.to<=r:e.to<r);){let t=!n&&e instanceof y&&e.index<0?null:e.parent;if(!t)return e;e=t}let i=n?0:t.IterMode.IgnoreOverlays;if(n)for(let t=e,n=t.parent;n;t=n,n=t.parent)t instanceof y&&t.index<0&&(null===(a=n.enter(r,s,i))||void 0===a?void 0:a.from)!=t.from&&(e=n);for(;;){let t=e.enter(r,s,i);if(!t)return e;e=t}}class y{constructor(e,t,r,s){this._tree=e,this.from=t,this.index=r,this._parent=s}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(e,r,s,n,i=0){for(let o=this;;){for(let{children:l,positions:O}=o._tree,p=r>0?l.length:-1;e!=p;e+=r){let p=l[e],h=O[e]+o.from;if(m(n,s,h,h+p.length))if(p instanceof f){if(i&t.IterMode.ExcludeBuffers)continue;let a=p.findChild(0,p.buffer.length,r,s-h,n);if(a>-1)return new P(new w(o,p,e,h),null,a)}else if(i&t.IterMode.IncludeAnonymous||!p.type.isAnonymous||S(p)){let l;if(!(i&t.IterMode.IgnoreMounts)&&p.props&&(l=p.prop(a.mounted))&&!l.overlay)return new y(l.tree,h,e,o);let O=new y(p,h,e,o);return i&t.IterMode.IncludeAnonymous||!O.type.isAnonymous?O:O.nextChild(r<0?p.children.length-1:0,r,s,n)}}if(i&t.IterMode.IncludeAnonymous||!o.type.isAnonymous)return null;if(e=o.index>=0?o.index+r:r<0?-1:o._parent._tree.children.length,o=o._parent,!o)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(e){return this.nextChild(0,1,e,2)}childBefore(e){return this.nextChild(this._tree.children.length-1,-1,e,-2)}enter(e,r,s=0){let n;if(!(s&t.IterMode.IgnoreOverlays)&&(n=this._tree.prop(a.mounted))&&n.overlay){let t=e-this.from;for(let{from:e,to:s}of n.overlay)if((r>0?e<=t:e<t)&&(r<0?s>=t:s>t))return new y(n.tree,n.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,e,r,s)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}cursor(e=0){return new Q(this,e)}get tree(){return this._tree}toTree(){return this._tree}resolve(e,t=0){return g(this,e,t,!1)}resolveInner(e,t=0){return g(this,e,t,!0)}enterUnfinishedNodesBefore(e){return d(this,e)}getChild(e,t=null,r=null){let s=b(this,e,t,r);return s.length?s[0]:null}getChildren(e,t=null,r=null){return b(this,e,t,r)}toString(){return this._tree.toString()}get node(){return this}matchContext(e){return x(this,e)}}function b(e,t,r,s){let n=e.cursor(),a=[];if(!n.firstChild())return a;if(null!=r)for(;!n.type.is(r);)if(!n.nextSibling())return a;for(;;){if(null!=s&&n.type.is(s))return a;if(n.type.is(t)&&a.push(n.node),!n.nextSibling())return null==s?a:[]}}function x(e,t,r=t.length-1){for(let s=e.parent;r>=0;s=s.parent){if(!s)return!1;if(!s.type.isAnonymous){if(t[r]&&t[r]!=s.name)return!1;r--}}return!0}class w{constructor(e,t,r,s){this.parent=e,this.buffer=t,this.index=r,this.start=s}}class P{constructor(e,t,r){this.context=e,this._parent=t,this.index=r,this.type=e.buffer.set.types[e.buffer.buffer[r]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(e,t,r){let{buffer:s}=this.context,n=s.findChild(this.index+4,s.buffer[this.index+3],e,t-this.context.start,r);return n<0?null:new P(this.context,this,n)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(e){return this.child(1,e,2)}childBefore(e){return this.child(-1,e,-2)}enter(e,r,s=0){if(s&t.IterMode.ExcludeBuffers)return null;let{buffer:n}=this.context,a=n.findChild(this.index+4,n.buffer[this.index+3],r>0?1:-1,e-this.context.start,r);return a<0?null:new P(this.context,this,a)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,0,4)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new P(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new P(this.context,this._parent,e.findChild(t,this.index,-1,0,4))}cursor(e=0){return new Q(this,e)}get tree(){return null}toTree(){let e=[],t=[],{buffer:r}=this.context,s=this.index+4,n=r.buffer[this.index+3];if(n>s){let a=r.buffer[this.index+1],i=r.buffer[this.index+2];e.push(r.slice(s,n,a,i)),t.push(0)}return new c(this.type,e,t,this.to-this.from)}resolve(e,t=0){return g(this,e,t,!1)}resolveInner(e,t=0){return g(this,e,t,!0)}enterUnfinishedNodesBefore(e){return d(this,e)}toString(){return this.context.buffer.childString(this.index)}getChild(e,t=null,r=null){let s=b(this,e,t,r);return s.length?s[0]:null}getChildren(e,t=null,r=null){return b(this,e,t,r)}get node(){return this}matchContext(e){return x(this,e)}}class Q{constructor(e,t=0){if(this.mode=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof y)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}get name(){return this.type.name}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:r,buffer:s}=this.buffer;return this.type=t||s.set.types[s.buffer[e]],this.from=r+s.buffer[e+1],this.to=r+s.buffer[e+2],!0}yield(e){return!!e&&(e instanceof y?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(e,t,r){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree._tree.children.length-1:0,e,t,r,this.mode));let{buffer:s}=this.buffer,n=s.findChild(this.index+4,s.buffer[this.index+3],e,t-this.buffer.start,r);return!(n<0)&&(this.stack.push(this.index),this.yieldBuf(n))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(e){return this.enterChild(1,e,2)}childBefore(e){return this.enterChild(-1,e,-2)}enter(e,r,s=this.mode){return this.buffer?!(s&t.IterMode.ExcludeBuffers)&&this.enterChild(1,e,r):this.yield(this._tree.enter(e,r,s))}parent(){if(!this.buffer)return this.yieldNode(this.mode&t.IterMode.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.mode&t.IterMode.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+e,e,0,4,this.mode));let{buffer:t}=this.buffer,r=this.stack.length-1;if(e<0){let e=r<0?0:this.stack[r]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,0,4))}else{let e=t.buffer[this.index+3];if(e<(r<0?t.buffer.length:t.buffer[this.stack[r]+3]))return this.yieldBuf(e)}return r<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let r,s,{buffer:n}=this;if(n){if(e>0){if(this.index<n.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(n.buffer.buffer[e+3]<this.index)return!1;({index:r,parent:s}=n)}else({index:r,_parent:s}=this._tree);for(;s;({index:r,_parent:s}=s))if(r>-1)for(let n=r+e,a=e<0?-1:s._tree.children.length;n!=a;n+=e){let e=s._tree.children[n];if(this.mode&t.IterMode.IncludeAnonymous||e instanceof f||!e.type.isAnonymous||S(e))return!1}return!0}move(e,t){if(t&&this.enterChild(e,0,4))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(e=!0){return this.move(1,e)}prev(e=!0){return this.move(-1,e)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;this.enterChild(1,e,t););return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,r=0;if(e&&e.context==this.buffer)e:for(let s=this.index,n=this.stack.length;n>=0;){for(let a=e;a;a=a._parent)if(a.index==s){if(s==this.index)return a;t=a,r=n+1;break e}s=this.stack[--n]}for(let e=r;e<this.stack.length;e++)t=new P(this.buffer,t,this.stack[e]);return this.bufferNode=new P(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(e,t){for(let r=0;;){let s=!1;if(this.type.isAnonymous||!1!==e(this)){if(this.firstChild()){r++;continue}this.type.isAnonymous||(s=!0)}for(;s&&t&&t(this),s=this.type.isAnonymous,!this.nextSibling();){if(!r)return;this.parent(),r--,s=!0}}}matchContext(e){if(!this.buffer)return x(this.node,e);let{buffer:t}=this.buffer,{types:r}=t.set;for(let s=e.length-1,n=this.stack.length-1;s>=0;n--){if(n<0)return x(this.node,e,s);let a=r[t.buffer[this.stack[n]]];if(!a.isAnonymous){if(e[s]&&e[s]!=a.name)return!1;s--}}return!0}}function S(e){return e.children.some((e=>e instanceof f||!e.type.isAnonymous||S(e)))}const v=new WeakMap;function q(e,t){if(!e.isAnonymous||t instanceof f||t.type!=e)return 1;let r=v.get(t);if(null==r){r=1;for(let s of t.children){if(s.type!=e||!(s instanceof c)){r=1;break}r+=q(e,s)}v.set(t,r)}return r}function I(e,t,r,s,n,a,i,o,l){let O=0;for(let r=s;r<n;r++)O+=q(e,t[r]);let p=Math.ceil(1.5*O/8),h=[],u=[];return function t(r,s,n,i,o){for(let O=n;O<i;){let n=O,c=s[O],$=q(e,r[O]);for(O++;O<i;O++){let t=q(e,r[O]);if($+t>=p)break;$+=t}if(O==n+1){if($>p){let e=r[n];t(e.children,e.positions,0,e.children.length,s[n]+o);continue}h.push(r[n])}else{let t=s[O-1]+r[O-1].length-c;h.push(I(e,r,s,n,O,c,t,null,l))}u.push(c+o-a)}}(t,r,s,n,0),(o||l)(h,u,i)}class k{constructor(e,t,r,s,n=!1,a=!1){this.from=e,this.to=t,this.tree=r,this.offset=s,this.open=(n?1:0)|(a?2:0)}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static addTree(e,t=[],r=!1){let s=[new k(0,e.length,e,0,!1,r)];for(let r of t)r.to>e.length&&s.push(r);return s}static applyChanges(e,t,r=128){if(!t.length)return e;let s=[],n=1,a=e.length?e[0]:null;for(let i=0,o=0,l=0;;i++){let O=i<t.length?t[i]:null,p=O?O.fromA:1e9;if(p-o>=r)for(;a&&a.from<p;){let t=a;if(o>=t.from||p<=t.to||l){let e=Math.max(t.from,o)-l,r=Math.min(t.to,p)-l;t=e>=r?null:new k(e,r,t.tree,t.offset+l,i>0,!!O)}if(t&&s.push(t),a.to>p)break;a=n<e.length?e[n++]:null}if(!O)break;o=O.toA,l=O.toA-O.toB}return s}}class R{constructor(e){this.string=e}get length(){return this.string.length}chunk(e){return this.string.slice(e)}get lineChunks(){return!1}read(e,t){return this.string.slice(e,t)}}class W{constructor(e,t,r,s,n){this.parser=e,this.parse=t,this.overlay=r,this.target=s,this.ranges=n}}class _{constructor(e,t,r,s,n,a,i){this.parser=e,this.predicate=t,this.mounts=r,this.index=s,this.start=n,this.target=a,this.prev=i,this.depth=0,this.ranges=[]}}const Y=new a({perNode:!0});class E{constructor(e,t,r,s,n){this.nest=t,this.input=r,this.fragments=s,this.ranges=n,this.inner=[],this.innerDone=0,this.baseTree=null,this.stoppedAt=null,this.baseParse=e}advance(){if(this.baseParse){let e=this.baseParse.advance();if(!e)return null;if(this.baseParse=null,this.baseTree=e,this.startInner(),null!=this.stoppedAt)for(let e of this.inner)e.parse.stopAt(this.stoppedAt)}if(this.innerDone==this.inner.length){let e=this.baseTree;return null!=this.stoppedAt&&(e=new c(e.type,e.children,e.positions,e.length,e.propValues.concat([[Y,this.stoppedAt]]))),e}let e=this.inner[this.innerDone],t=e.parse.advance();if(t){this.innerDone++;let r=Object.assign(Object.create(null),e.target.props);r[a.mounted.id]=new i(t,e.overlay,e.parser),e.target.props=r}return null}get parsedPos(){if(this.baseParse)return 0;let e=this.input.length;for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].ranges[0].from<e&&(e=Math.min(e,this.inner[t].parse.parsedPos));return e}stopAt(e){if(this.stoppedAt=e,this.baseParse)this.baseParse.stopAt(e);else for(let t=this.innerDone;t<this.inner.length;t++)this.inner[t].parse.stopAt(e)}startInner(){let e=new j(this.fragments),r=null,s=null,a=new Q(new y(this.baseTree,this.ranges[0].from,0,null),t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts);e:for(let t,i;null==this.stoppedAt||a.from<this.stoppedAt;){let o,l=!0;if(e.hasNode(a)){if(r){let e=r.mounts.find((e=>e.frag.from<=a.from&&e.frag.to>=a.to&&e.mount.overlay));if(e)for(let t of e.mount.overlay){let s=t.from+e.pos,n=t.to+e.pos;s>=a.from&&n<=a.to&&!r.ranges.some((e=>e.from<n&&e.to>s))&&r.ranges.push({from:s,to:n})}}l=!1}else if(s&&(i=T(s.ranges,a.from,a.to)))l=2!=i;else if(!a.type.isAnonymous&&a.from<a.to&&(t=this.nest(a,this.input))){a.tree||N(a);let i=e.findMounts(a.from,t.parser);if("function"==typeof t.overlay)r=new _(t.parser,t.overlay,i,this.inner.length,a.from,a.tree,r);else{let e=C(this.ranges,t.overlay||[new n(a.from,a.to)]);e.length&&this.inner.push(new W(t.parser,t.parser.startParse(this.input,G(i,e),e),t.overlay?t.overlay.map((e=>new n(e.from-a.from,e.to-a.from))):null,a.tree,e)),t.overlay?e.length&&(s={ranges:e,depth:0,prev:s}):l=!1}}else r&&(o=r.predicate(a))&&(!0===o&&(o=new n(a.from,a.to)),o.from<o.to&&r.ranges.push(o));if(l&&a.firstChild())r&&r.depth++,s&&s.depth++;else for(;!a.nextSibling();){if(!a.parent())break e;if(r&&!--r.depth){let e=C(this.ranges,r.ranges);e.length&&this.inner.splice(r.index,0,new W(r.parser,r.parser.startParse(this.input,G(r.mounts,e),e),r.ranges.map((e=>new n(e.from-r.start,e.to-r.start))),r.target,e)),r=r.prev}s&&!--s.depth&&(s=s.prev)}}}}function T(e,t,r){for(let s of e){if(s.from>=r)break;if(s.to>t)return s.from<=t&&s.to>=r?2:1}return 0}function X(e,t,r,s,n,a){if(t<r){let i=e.buffer[t+1],o=e.buffer[r-2];s.push(e.slice(t,r,i,o)),n.push(i-a)}}function N(e){let{node:t}=e,r=0;do{e.parent(),r++}while(!e.tree);let s=0,n=e.tree,a=0;for(;a=n.positions[s]+e.from,!(a<=t.from&&a+n.children[s].length>=t.to);s++);let i=n.children[s],o=i.buffer;n.children[s]=function e(r,s,n,l,O){let p=r;for(;o[p+2]+a<=t.from;)p=o[p+3];let h=[],u=[];X(i,r,p,h,u,l);let $=o[p+1],f=o[p+2],m=$+a==t.from&&f+a==t.to&&o[p]==t.type.id;return h.push(m?t.toTree():e(p+4,o[p+3],i.set.types[o[p]],$,f-$)),u.push($-l),X(i,o[p+3],s,h,u,l),new c(n,h,u,O)}(0,o.length,l.none,0,i.length);for(let s=0;s<=r;s++)e.childAfter(t.from)}class Z{constructor(e,r){this.offset=r,this.done=!1,this.cursor=e.cursor(t.IterMode.IncludeAnonymous|t.IterMode.IgnoreMounts)}moveTo(e){let{cursor:r}=this,s=e-this.offset;for(;!this.done&&r.from<s;)r.to>=e&&r.enter(s,1,t.IterMode.IgnoreOverlays|t.IterMode.ExcludeBuffers)||r.next(!1)||(this.done=!0)}hasNode(e){if(this.moveTo(e.from),!this.done&&this.cursor.from+this.offset==e.from&&this.cursor.tree)for(let t=this.cursor.tree;;){if(t==e.tree)return!0;if(!(t.children.length&&0==t.positions[0]&&t.children[0]instanceof c))break;t=t.children[0]}return!1}}class j{constructor(e){var t;if(this.fragments=e,this.curTo=0,this.fragI=0,e.length){let r=this.curFrag=e[0];this.curTo=null!==(t=r.tree.prop(Y))&&void 0!==t?t:r.to,this.inner=new Z(r.tree,-r.offset)}else this.curFrag=this.inner=null}hasNode(e){for(;this.curFrag&&e.from>=this.curTo;)this.nextFrag();return this.curFrag&&this.curFrag.from<=e.from&&this.curTo>=e.to&&this.inner.hasNode(e)}nextFrag(){var e;if(this.fragI++,this.fragI==this.fragments.length)this.curFrag=this.inner=null;else{let t=this.curFrag=this.fragments[this.fragI];this.curTo=null!==(e=t.tree.prop(Y))&&void 0!==e?e:t.to,this.inner=new Z(t.tree,-t.offset)}}findMounts(e,t){var r;let s=[];if(this.inner){this.inner.cursor.moveTo(e,1);for(let e=this.inner.cursor.node;e;e=e.parent){let n=null===(r=e.tree)||void 0===r?void 0:r.prop(a.mounted);if(n&&n.parser==t)for(let t=this.fragI;t<this.fragments.length;t++){let r=this.fragments[t];if(r.from>=e.to)break;r.tree==this.curFrag.tree&&s.push({frag:r,pos:e.from-r.offset,mount:n})}}}return s}}function C(e,t){let r=null,s=t;for(let a=1,i=0;a<e.length;a++){let o=e[a-1].to,l=e[a].from;for(;i<s.length;i++){let e=s[i];if(e.from>=l)break;e.to<=o||(r||(s=r=t.slice()),e.from<o?(r[i]=new n(e.from,o),e.to>l&&r.splice(i+1,0,new n(l,e.to))):e.to>l?r[i--]=new n(l,e.to):r.splice(i--,1))}}return s}function U(e,t,r,s){let a=0,i=0,o=!1,l=!1,O=-1e9,p=[];for(;;){let h=a==e.length?1e9:o?e[a].to:e[a].from,u=i==t.length?1e9:l?t[i].to:t[i].from;if(o!=l){let e=Math.max(O,r),t=Math.min(h,u,s);e<t&&p.push(new n(e,t))}if(O=Math.min(h,u),1e9==O)break;h==O&&(o?(o=!1,a++):o=!0),u==O&&(l?(l=!1,i++):l=!0)}return p}function G(e,t){let r=[];for(let{pos:s,mount:a,frag:i}of e){let e=s+(a.overlay?a.overlay[0].from:0),o=e+a.tree.length,l=Math.max(i.from,e),O=Math.min(i.to,o);if(a.overlay){let o=U(t,a.overlay.map((e=>new n(e.from+s,e.to+s))),l,O);for(let t=0,s=l;;t++){let n=t==o.length,l=n?O:o[t].from;if(l>s&&r.push(new k(s,l,a.tree,-e,i.from>=s,i.to<=l)),n)break;s=o[t].to}}else r.push(new k(l,O,a.tree,-e,i.from>=e,i.to<=o))}return r}t.DefaultBufferLength=r,t.MountedTree=i,t.NodeProp=a,t.NodeSet=O,t.NodeType=l,t.NodeWeakMap=class{constructor(){this.map=new WeakMap}setBuffer(e,t,r){let s=this.map.get(e);s||this.map.set(e,s=new Map),s.set(t,r)}getBuffer(e,t){let r=this.map.get(e);return r&&r.get(t)}set(e,t){e instanceof P?this.setBuffer(e.context.buffer,e.index,t):e instanceof y&&this.map.set(e.tree,t)}get(e){return e instanceof P?this.getBuffer(e.context.buffer,e.index):e instanceof y?this.map.get(e.tree):void 0}cursorSet(e,t){e.buffer?this.setBuffer(e.buffer.buffer,e.index,t):this.map.set(e.tree,t)}cursorGet(e){return e.buffer?this.getBuffer(e.buffer.buffer,e.index):this.map.get(e.tree)}},t.Parser=class{startParse(e,t,r){return"string"==typeof e&&(e=new R(e)),r=r?r.length?r.map((e=>new n(e.from,e.to))):[new n(0,0)]:[new n(0,e.length)],this.createParse(e,t||[],r)}parse(e,t,r){let s=this.startParse(e,t,r);for(;;){let e=s.advance();if(e)return e}}},t.Tree=c,t.TreeBuffer=f,t.TreeCursor=Q,t.TreeFragment=k,t.parseMixed=function(e){return(t,r,s,n)=>new E(t,e,r,s,n)}},48:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s=r(897);let n=0;class a{constructor(e,t,r){this.set=e,this.base=t,this.modified=r,this.id=n++}static define(e){if(null==e?void 0:e.base)throw new Error("Can not derive from a modified tag");let t=new a([],null,[]);if(t.set.push(t),e)for(let r of e.set)t.set.push(r);return t}static defineModifier(){let e=new o;return t=>t.modified.indexOf(e)>-1?t:o.get(t.base||t,t.modified.concat(e).sort(((e,t)=>e.id-t.id)))}}let i=0;class o{constructor(){this.instances=[],this.id=i++}static get(e,t){if(!t.length)return e;let r=t[0].instances.find((r=>{return r.base==e&&(s=t,n=r.modified,s.length==n.length&&s.every(((e,t)=>e==n[t])));var s,n}));if(r)return r;let s=[],n=new a(s,e,t);for(let e of t)e.instances.push(n);let i=l(t);for(let t of e.set)for(let e of i)s.push(o.get(t,e));return n}}function l(e){let t=[e];for(let r=0;r<e.length;r++)for(let s of l(e.slice(0,r).concat(e.slice(r+1))))t.push(s);return t}const O=new s.NodeProp;class p{constructor(e,t,r,s){this.tags=e,this.mode=t,this.context=r,this.next=s}sort(e){return!e||e.depth<this.depth?(this.next=e,this):(e.next=this.sort(e.next),e)}get depth(){return this.context?this.context.length:0}}function h(e,t){let r=Object.create(null);for(let t of e)if(Array.isArray(t.tag))for(let e of t.tag)r[e.id]=t.class;else r[t.tag.id]=t.class;let{scope:s,all:n=null}=t||{};return{style:e=>{let t=n;for(let s of e)for(let e of s.set){let s=r[e.id];if(s){t=t?t+" "+s:s;break}}return t},scope:s}}function u(e,t){let r=null;for(let s of e){let e=s.style(t);e&&(r=r?r+" "+e:e)}return r}class c{constructor(e,t,r){this.at=e,this.highlighters=t,this.span=r,this.class=""}startSpan(e,t){t!=this.class&&(this.flush(e),e>this.at&&(this.at=e),this.class=t)}flush(e){e>this.at&&this.class&&this.span(this.at,e,this.class)}highlightRange(e,t,r,n,a){let{type:i,from:o,to:l}=e;if(o>=r||l<=t)return;i.isTop&&(a=this.highlighters.filter((e=>!e.scope||e.scope(i))));let p=n,h=i.prop(O),c=!1;for(;h;){if(!h.context||e.matchContext(h.context)){let e=u(a,h.tags);e&&(p&&(p+=" "),p+=e,1==h.mode?n+=(n?" ":"")+e:0==h.mode&&(c=!0));break}h=h.next}if(this.startSpan(e.from,p),c)return;let $=e.tree&&e.tree.prop(s.NodeProp.mounted);if($&&$.overlay){let s=e.node.enter($.overlay[0].from+o,1),i=this.highlighters.filter((e=>!e.scope||e.scope($.tree.type))),O=e.firstChild();for(let h=0,u=o;;h++){let c=h<$.overlay.length?$.overlay[h]:null,f=c?c.from+o:l,m=Math.max(t,u),d=Math.min(r,f);if(m<d&&O)for(;e.from<d&&(this.highlightRange(e,m,d,n,a),this.startSpan(Math.min(r,e.to),p),!(e.to>=f)&&e.nextSibling()););if(!c||f>r)break;u=c.to+o,u>t&&(this.highlightRange(s.cursor(),Math.max(t,c.from+o),Math.min(r,u),n,i),this.startSpan(u,p))}O&&e.parent()}else if(e.firstChild()){do{if(!(e.to<=t)){if(e.from>=r)break;this.highlightRange(e,t,r,n,a),this.startSpan(Math.min(r,e.to),p)}}while(e.nextSibling());e.parent()}}}const $=a.define,f=$(),m=$(),d=$(m),g=$(m),y=$(),b=$(y),x=$(y),w=$(),P=$(w),Q=$(),S=$(),v=$(),q=$(v),I=$(),k={comment:f,lineComment:$(f),blockComment:$(f),docComment:$(f),name:m,variableName:$(m),typeName:d,tagName:$(d),propertyName:g,attributeName:$(g),className:$(m),labelName:$(m),namespace:$(m),macroName:$(m),literal:y,string:b,docString:$(b),character:$(b),attributeValue:$(b),number:x,integer:$(x),float:$(x),bool:$(y),regexp:$(y),escape:$(y),color:$(y),url:$(y),keyword:Q,self:$(Q),null:$(Q),atom:$(Q),unit:$(Q),modifier:$(Q),operatorKeyword:$(Q),controlKeyword:$(Q),definitionKeyword:$(Q),moduleKeyword:$(Q),operator:S,derefOperator:$(S),arithmeticOperator:$(S),logicOperator:$(S),bitwiseOperator:$(S),compareOperator:$(S),updateOperator:$(S),definitionOperator:$(S),typeOperator:$(S),controlOperator:$(S),punctuation:v,separator:$(v),bracket:q,angleBracket:$(q),squareBracket:$(q),paren:$(q),brace:$(q),content:w,heading:P,heading1:$(P),heading2:$(P),heading3:$(P),heading4:$(P),heading5:$(P),heading6:$(P),contentSeparator:$(w),list:$(w),quote:$(w),emphasis:$(w),strong:$(w),link:$(w),monospace:$(w),strikethrough:$(w),inserted:$(),deleted:$(),changed:$(),invalid:$(),meta:I,documentMeta:$(I),annotation:$(I),processingInstruction:$(I),definition:a.defineModifier(),constant:a.defineModifier(),function:a.defineModifier(),standard:a.defineModifier(),local:a.defineModifier(),special:a.defineModifier()},R=h([{tag:k.link,class:"tok-link"},{tag:k.heading,class:"tok-heading"},{tag:k.emphasis,class:"tok-emphasis"},{tag:k.strong,class:"tok-strong"},{tag:k.keyword,class:"tok-keyword"},{tag:k.atom,class:"tok-atom"},{tag:k.bool,class:"tok-bool"},{tag:k.url,class:"tok-url"},{tag:k.labelName,class:"tok-labelName"},{tag:k.inserted,class:"tok-inserted"},{tag:k.deleted,class:"tok-deleted"},{tag:k.literal,class:"tok-literal"},{tag:k.string,class:"tok-string"},{tag:k.number,class:"tok-number"},{tag:[k.regexp,k.escape,k.special(k.string)],class:"tok-string2"},{tag:k.variableName,class:"tok-variableName"},{tag:k.local(k.variableName),class:"tok-variableName tok-local"},{tag:k.definition(k.variableName),class:"tok-variableName tok-definition"},{tag:k.special(k.variableName),class:"tok-variableName2"},{tag:k.definition(k.propertyName),class:"tok-propertyName tok-definition"},{tag:k.typeName,class:"tok-typeName"},{tag:k.namespace,class:"tok-namespace"},{tag:k.className,class:"tok-className"},{tag:k.macroName,class:"tok-macroName"},{tag:k.propertyName,class:"tok-propertyName"},{tag:k.operator,class:"tok-operator"},{tag:k.comment,class:"tok-comment"},{tag:k.meta,class:"tok-meta"},{tag:k.invalid,class:"tok-invalid"},{tag:k.punctuation,class:"tok-punctuation"}]);t.Tag=a,t.classHighlighter=R,t.highlightTags=u,t.highlightTree=function(e,t,r,s=0,n=e.length){let a=new c(s,Array.isArray(t)?t:[t],r);a.highlightRange(e.cursor(),s,n,"",a.highlighters),a.flush(n)},t.styleTags=function(e){let t=Object.create(null);for(let r in e){let s=e[r];Array.isArray(s)||(s=[s]);for(let e of r.split(" "))if(e){let r=[],n=2,a=e;for(let t=0;;){if("..."==a&&t>0&&t+3==e.length){n=1;break}let s=/^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a);if(!s)throw new RangeError("Invalid path: "+e);if(r.push("*"==s[0]?"":'"'==s[0][0]?JSON.parse(s[0]):s[0]),t+=s[0].length,t==e.length)break;let i=e[t++];if(t==e.length&&"!"==i){n=0;break}if("/"!=i)throw new RangeError("Invalid path: "+e);a=e.slice(t)}let i=r.length-1,o=r[i];if(!o)throw new RangeError("Invalid path: "+e);let l=new p(s,n,i>0?r.slice(0,i):null);t[o]=l.sort(t[o])}}return O.add(t)},t.tagHighlighter=h,t.tags=k},90:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s,n=r(897);class a{constructor(e,t,r,s,n,a,i,o,l,O=0,p){this.p=e,this.stack=t,this.state=r,this.reducePos=s,this.pos=n,this.score=a,this.buffer=i,this.bufferBase=o,this.curContext=l,this.lookAhead=O,this.parent=p}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,r=0){let s=e.parser.context;return new a(e,[],t,r,r,0,[],0,s?new i(s,s.start):null,0,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){let t=e>>19,r=65535&e,{parser:s}=this.p,n=s.dynamicPrecedence(r);if(n&&(this.score+=n),0==t)return this.pushState(s.getGoto(this.state,r,!0),this.reducePos),r<s.minRepeatTerm&&this.storeNode(r,this.reducePos,this.reducePos,4,!0),void this.reduceContext(r,this.reducePos);let a=this.stack.length-3*(t-1)-(262144&e?6:0),i=this.stack[a-2],o=this.stack[a-1],l=this.bufferBase+this.buffer.length-o;if(r<s.minRepeatTerm||131072&e){let e=s.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(r,i,e,l+4,!0)}if(262144&e)this.state=this.stack[a];else{let e=this.stack[a-3];this.state=s.getGoto(e,r,!0)}for(;this.stack.length>a;)this.stack.pop();this.reduceContext(r,i)}storeNode(e,t,r,s=4,n=!1){if(0==e&&(!this.stack.length||this.stack[this.stack.length-1]<this.buffer.length+this.bufferBase)){let e=this,s=this.buffer.length;if(0==s&&e.parent&&(s=e.bufferBase-e.parent.bufferBase,e=e.parent),s>0&&0==e.buffer[s-4]&&e.buffer[s-1]>-1){if(t==r)return;if(e.buffer[s-2]>=t)return void(e.buffer[s-2]=r)}}if(n&&this.pos!=r){let n=this.buffer.length;if(n>0&&0!=this.buffer[n-4])for(;n>0&&this.buffer[n-2]>r;)this.buffer[n]=this.buffer[n-4],this.buffer[n+1]=this.buffer[n-3],this.buffer[n+2]=this.buffer[n-2],this.buffer[n+3]=this.buffer[n-1],n-=4,s>4&&(s-=4);this.buffer[n]=e,this.buffer[n+1]=t,this.buffer[n+2]=r,this.buffer[n+3]=s}else this.buffer.push(e,t,r,s)}shift(e,t,r){let s=this.pos;if(131072&e)this.pushState(65535&e,this.pos);else if(0==(262144&e)){let n=e,{parser:a}=this.p;(r>this.pos||t<=a.maxNode)&&(this.pos=r,a.stateFlag(n,1)||(this.reducePos=r)),this.pushState(n,s),this.shiftContext(t,s),t<=a.maxNode&&this.buffer.push(t,s,r,4)}else this.pos=r,this.shiftContext(t,s),t<=this.p.parser.maxNode&&this.buffer.push(t,s,r,4)}apply(e,t,r){65536&e?this.reduce(e):this.shift(e,t,r)}useNode(e,t){let r=this.p.reused.length-1;(r<0||this.p.reused[r]!=e)&&(this.p.reused.push(e),r++);let s=this.pos;this.reducePos=this.pos=s+e.length,this.pushState(t,s),this.buffer.push(r,s,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this,this.p.stream.reset(this.pos-e.length)))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let r=e.buffer.slice(t),s=e.bufferBase+t;for(;e&&s==e.bufferBase;)e=e.parent;return new a(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,r,s,this.curContext,this.lookAhead,e)}recoverByDelete(e,t){let r=e<=this.p.parser.maxNode;r&&this.storeNode(e,this.pos,t,4),this.storeNode(0,this.pos,t,r?8:4),this.pos=this.reducePos=t,this.score-=190}canShift(e){for(let t=new o(this);;){let r=this.p.parser.stateSlot(t.state,4)||this.p.parser.hasAction(t.state,e);if(0==(65536&r))return!0;if(0==r)return!1;t.reduce(r)}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let r=[];for(let s,n=0;n<t.length;n+=2)(s=t[n+1])!=this.state&&this.p.parser.hasAction(s,e)&&r.push(t[n],s);if(this.stack.length<120)for(let e=0;r.length<8&&e<t.length;e+=2){let s=t[e+1];r.some(((e,t)=>1&t&&e==s))||r.push(t[e],s)}t=r}let r=[];for(let e=0;e<t.length&&r.length<4;e+=2){let s=t[e+1];if(s==this.state)continue;let n=this.split();n.pushState(s,this.pos),n.storeNode(0,n.pos,n.pos,4,!0),n.shiftContext(t[e],this.pos),n.score-=200,r.push(n)}return r}forceReduce(){let e=this.p.parser.stateSlot(this.state,5);if(0==(65536&e))return!1;let{parser:t}=this.p;if(!t.validAction(this.state,e)){let r=e>>19,s=65535&e,n=this.stack.length-3*r;if(n<0||t.getGoto(this.stack[n],s,!1)<0)return!1;this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100}return this.reducePos=this.pos,this.reduce(e),!0}forceAll(){for(;!this.p.parser.stateFlag(this.state,2);)if(!this.forceReduce()){this.storeNode(0,this.pos,this.pos,4,!0);break}return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this,this.p.stream.reset(t)))}reduceContext(e,t){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this,this.p.stream.reset(t)))}emitContext(){let e=this.buffer.length-1;(e<0||-3!=this.buffer[e])&&this.buffer.push(this.curContext.hash,this.reducePos,this.reducePos,-3)}emitLookAhead(){let e=this.buffer.length-1;(e<0||-4!=this.buffer[e])&&this.buffer.push(this.lookAhead,this.reducePos,this.reducePos,-4)}updateContext(e){if(e!=this.curContext.context){let t=new i(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}setLookAhead(e){e>this.lookAhead&&(this.emitLookAhead(),this.lookAhead=e)}close(){this.curContext&&this.curContext.tracker.strict&&this.emitContext(),this.lookAhead>0&&this.emitLookAhead()}}class i{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.strict?e.hash(t):0}}!function(e){e[e.Insert=200]="Insert",e[e.Delete=190]="Delete",e[e.Reduce=100]="Reduce",e[e.MaxNext=4]="MaxNext",e[e.MaxInsertStackDepth=300]="MaxInsertStackDepth",e[e.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(s||(s={}));class o{constructor(e){this.start=e,this.state=e.state,this.stack=e.stack,this.base=this.stack.length}reduce(e){let t=65535&e,r=e>>19;0==r?(this.stack==this.start.stack&&(this.stack=this.stack.slice()),this.stack.push(this.state,0,0),this.base+=3):this.base-=3*(r-1);let s=this.start.p.parser.getGoto(this.stack[this.base-3],t,!0);this.state=s}}class l{constructor(e,t,r){this.stack=e,this.pos=t,this.index=r,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e,t=e.bufferBase+e.buffer.length){return new l(e,t,t-e.bufferBase)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new l(this.stack,this.pos,this.index)}}class O{constructor(){this.start=-1,this.value=-1,this.end=-1,this.extended=-1,this.lookAhead=0,this.mask=0,this.context=0}}const p=new O;class h{constructor(e,t){this.input=e,this.ranges=t,this.chunk="",this.chunkOff=0,this.chunk2="",this.chunk2Pos=0,this.next=-1,this.token=p,this.rangeIndex=0,this.pos=this.chunkPos=t[0].from,this.range=t[0],this.end=t[t.length-1].to,this.readNext()}resolveOffset(e,t){let r=this.range,s=this.rangeIndex,n=this.pos+e;for(;n<r.from;){if(!s)return null;let e=this.ranges[--s];n-=r.from-e.to,r=e}for(;t<0?n>r.to:n>=r.to;){if(s==this.ranges.length-1)return null;let e=this.ranges[++s];n+=e.from-r.to,r=e}return n}peek(e){let t,r,s=this.chunkOff+e;if(s>=0&&s<this.chunk.length)t=this.pos+e,r=this.chunk.charCodeAt(s);else{let s=this.resolveOffset(e,1);if(null==s)return-1;if(t=s,t>=this.chunk2Pos&&t<this.chunk2Pos+this.chunk2.length)r=this.chunk2.charCodeAt(t-this.chunk2Pos);else{let e=this.rangeIndex,s=this.range;for(;s.to<=t;)s=this.ranges[++e];this.chunk2=this.input.chunk(this.chunk2Pos=t),t+this.chunk2.length>s.to&&(this.chunk2=this.chunk2.slice(0,s.to-t)),r=this.chunk2.charCodeAt(0)}}return t>=this.token.lookAhead&&(this.token.lookAhead=t+1),r}acceptToken(e,t=0){let r=t?this.resolveOffset(t,-1):this.pos;if(null==r||r<this.token.start)throw new RangeError("Token end out of bounds");this.token.value=e,this.token.end=r}getChunk(){if(this.pos>=this.chunk2Pos&&this.pos<this.chunk2Pos+this.chunk2.length){let{chunk:e,chunkPos:t}=this;this.chunk=this.chunk2,this.chunkPos=this.chunk2Pos,this.chunk2=e,this.chunk2Pos=t,this.chunkOff=this.pos-this.chunkPos}else{this.chunk2=this.chunk,this.chunk2Pos=this.chunkPos;let e=this.input.chunk(this.pos),t=this.pos+e.length;this.chunk=t>this.range.to?e.slice(0,this.range.to-this.pos):e,this.chunkPos=this.pos,this.chunkOff=0}}readNext(){return this.chunkOff>=this.chunk.length&&(this.getChunk(),this.chunkOff==this.chunk.length)?this.next=-1:this.next=this.chunk.charCodeAt(this.chunkOff)}advance(e=1){for(this.chunkOff+=e;this.pos+e>=this.range.to;){if(this.rangeIndex==this.ranges.length-1)return this.setDone();e-=this.range.to-this.pos,this.range=this.ranges[++this.rangeIndex],this.pos=this.range.from}return this.pos+=e,this.pos>=this.token.lookAhead&&(this.token.lookAhead=this.pos+1),this.readNext()}setDone(){return this.pos=this.chunkPos=this.end,this.range=this.ranges[this.rangeIndex=this.ranges.length-1],this.chunk="",this.next=-1}reset(e,t){if(t?(this.token=t,t.start=e,t.lookAhead=e+1,t.value=t.extended=-1):this.token=p,this.pos!=e){if(this.pos=e,e==this.end)return this.setDone(),this;for(;e<this.range.from;)this.range=this.ranges[--this.rangeIndex];for(;e>=this.range.to;)this.range=this.ranges[++this.rangeIndex];e>=this.chunkPos&&e<this.chunkPos+this.chunk.length?this.chunkOff=e-this.chunkPos:(this.chunk="",this.chunkOff=0),this.readNext()}return this}read(e,t){if(e>=this.chunkPos&&t<=this.chunkPos+this.chunk.length)return this.chunk.slice(e-this.chunkPos,t-this.chunkPos);if(e>=this.chunk2Pos&&t<=this.chunk2Pos+this.chunk2.length)return this.chunk2.slice(e-this.chunk2Pos,t-this.chunk2Pos);if(e>=this.range.from&&t<=this.range.to)return this.input.read(e,t);let r="";for(let s of this.ranges){if(s.from>=t)break;s.to>e&&(r+=this.input.read(Math.max(s.from,e),Math.min(s.to,t)))}return r}}class u{constructor(e,t){this.data=e,this.id=t}token(e,t){!function(e,t,r,s){let n=0,a=1<<s,{parser:i}=r.p,{dialect:o}=i;e:for(;0!=(a&e[n]);){let r=e[n+1];for(let s=n+3;s<r;s+=2)if((e[s+1]&a)>0){let r=e[s];if(o.allows(r)&&(-1==t.token.value||t.token.value==r||i.overrides(r,t.token.value))){t.acceptToken(r);break}}for(let s=t.next,a=0,i=e[n+2];a<i;){let o=a+i>>1,l=r+o+(o<<1),O=e[l],p=e[l+1];if(s<O)i=o;else{if(!(s>=p)){n=e[l+2],t.advance();continue e}a=o+1}}break}}(this.data,e,t,this.id)}}function c(e,t=Uint16Array){if("string"!=typeof e)return e;let r=null;for(let s=0,n=0;s<e.length;){let a=0;for(;;){let t=e.charCodeAt(s++),r=!1;if(126==t){a=65535;break}t>=92&&t--,t>=34&&t--;let n=t-32;if(n>=46&&(n-=46,r=!0),a+=n,r)break;a*=46}r?r[n++]=a:r=new t(a)}return r}u.prototype.contextual=u.prototype.fallback=u.prototype.extend=!1;const $="undefined"!=typeof process&&process.env&&/\bparse\b/.test(process.env.LOG);let f=null;var m,d;function g(e,t,r){let s=e.cursor(n.IterMode.IncludeAnonymous);for(s.moveTo(t);;)if(!(r<0?s.childBefore(t):s.childAfter(t)))for(;;){if((r<0?s.to<t:s.from>t)&&!s.type.isError)return r<0?Math.max(0,Math.min(s.to-1,t-25)):Math.min(e.length,Math.max(s.from+1,t+25));if(r<0?s.prevSibling():s.nextSibling())break;if(!s.parent())return r<0?0:e.length}}!function(e){e[e.Margin=25]="Margin"}(m||(m={}));class y{constructor(e,t){this.fragments=e,this.nodeSet=t,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?g(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?g(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let r=this.trees[t],s=this.index[t];if(s==r.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let a=r.children[s],i=this.start[t]+r.positions[s];if(i>e)return this.nextStart=i,null;if(a instanceof n.Tree){if(i==e){if(i<this.safeFrom)return null;let e=i+a.length;if(e<=this.safeTo){let t=a.prop(n.NodeProp.lookAhead);if(!t||e+t<this.fragment.to)return a}}this.index[t]++,i+a.length>=Math.max(this.safeFrom,e)&&(this.trees.push(a),this.start.push(i),this.index.push(0))}else this.index[t]++,this.nextStart=i+a.length}}}class b{constructor(e,t){this.stream=t,this.tokens=[],this.mainToken=null,this.actions=[],this.tokens=e.tokenizers.map((e=>new O))}getActions(e){let t=0,r=null,{parser:s}=e.p,{tokenizers:n}=s,a=s.stateSlot(e.state,3),i=e.curContext?e.curContext.hash:0,o=0;for(let s=0;s<n.length;s++){if(0==(1<<s&a))continue;let l=n[s],O=this.tokens[s];if((!r||l.fallback)&&((l.contextual||O.start!=e.pos||O.mask!=a||O.context!=i)&&(this.updateCachedToken(O,l,e),O.mask=a,O.context=i),O.lookAhead>O.end+25&&(o=Math.max(O.lookAhead,o)),0!=O.value)){let s=t;if(O.extended>-1&&(t=this.addActions(e,O.extended,O.end,t)),t=this.addActions(e,O.value,O.end,t),!l.extend&&(r=O,t>s))break}}for(;this.actions.length>t;)this.actions.pop();return o&&e.setLookAhead(o),r||e.pos!=this.stream.end||(r=new O,r.value=e.p.parser.eofTerm,r.start=r.end=e.pos,t=this.addActions(e,r.value,r.end,t)),this.mainToken=r,this.actions}getMainToken(e){if(this.mainToken)return this.mainToken;let t=new O,{pos:r,p:s}=e;return t.start=r,t.end=Math.min(r+1,s.stream.end),t.value=r==s.stream.end?s.parser.eofTerm:0,t}updateCachedToken(e,t,r){if(t.token(this.stream.reset(r.pos,e),r),e.value>-1){let{parser:t}=r.p;for(let s=0;s<t.specialized.length;s++)if(t.specialized[s]==e.value){let n=t.specializers[s](this.stream.read(e.start,e.end),r);if(n>=0&&r.p.parser.dialect.allows(n>>1)){0==(1&n)?e.value=n>>1:e.extended=n>>1;break}}}else e.value=0,e.end=Math.min(r.p.stream.end,r.pos+1)}putAction(e,t,r,s){for(let t=0;t<s;t+=3)if(this.actions[t]==e)return s;return this.actions[s++]=e,this.actions[s++]=t,this.actions[s++]=r,s}addActions(e,t,r,s){let{state:n}=e,{parser:a}=e.p,{data:i}=a;for(let e=0;e<2;e++)for(let o=a.stateSlot(n,e?2:1);;o+=3){if(65535==i[o]){if(1!=i[o+1]){0==s&&2==i[o+1]&&(s=this.putAction(v(i,o+2),t,r,s));break}o=v(i,o+2)}i[o]==t&&(s=this.putAction(v(i,o+1),t,r,s))}return s}}!function(e){e[e.Distance=5]="Distance",e[e.MaxRemainingPerStep=3]="MaxRemainingPerStep",e[e.MinBufferLengthPrune=500]="MinBufferLengthPrune",e[e.ForceReduceLimit=10]="ForceReduceLimit",e[e.CutDepth=15e3]="CutDepth",e[e.CutTo=9e3]="CutTo"}(d||(d={}));class x{constructor(e,t,r,s){this.parser=e,this.input=t,this.ranges=s,this.recovering=0,this.nextStackID=9812,this.minStackPos=0,this.reused=[],this.stoppedAt=null,this.stream=new h(t,s),this.tokens=new b(e,this.stream),this.topTerm=e.top[1];let{from:n}=s[0];this.stacks=[a.start(this,e.top[0],n)],this.fragments=r.length&&this.stream.end-n>4*e.bufferLength?new y(r,e.nodeSet):null}get parsedPos(){return this.minStackPos}advance(){let e,t,r=this.stacks,s=this.minStackPos,n=this.stacks=[];for(let a=0;a<r.length;a++){let i=r[a];for(;;){if(this.tokens.mainToken=null,i.pos>s)n.push(i);else{if(this.advanceStack(i,n,r))continue;{e||(e=[],t=[]),e.push(i);let r=this.tokens.getMainToken(i);t.push(r.value,r.end)}}break}}if(!n.length){let t=e&&function(e){let t=null;for(let r of e){let e=r.p.stoppedAt;(r.pos==r.p.stream.end||null!=e&&r.pos>e)&&r.p.parser.stateFlag(r.state,2)&&(!t||t.score<r.score)&&(t=r)}return t}(e);if(t)return this.stackToTree(t);if(this.parser.strict)throw $&&e&&console.log("Stuck with token "+(this.tokens.mainToken?this.parser.getName(this.tokens.mainToken.value):"none")),new SyntaxError("No parse at "+s);this.recovering||(this.recovering=5)}if(this.recovering&&e){let r=null!=this.stoppedAt&&e[0].pos>this.stoppedAt?e[0]:this.runRecovery(e,t,n);if(r)return this.stackToTree(r.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(n.length>e)for(n.sort(((e,t)=>t.score-e.score));n.length>e;)n.pop();n.some((e=>e.reducePos>s))&&this.recovering--}else if(n.length>1)e:for(let e=0;e<n.length-1;e++){let t=n[e];for(let r=e+1;r<n.length;r++){let s=n[r];if(t.sameState(s)||t.buffer.length>500&&s.buffer.length>500){if(!((t.score-s.score||t.buffer.length-s.buffer.length)>0)){n.splice(e--,1);continue e}n.splice(r--,1)}}}this.minStackPos=n[0].pos;for(let e=1;e<n.length;e++)n[e].pos<this.minStackPos&&(this.minStackPos=n[e].pos);return null}stopAt(e){if(null!=this.stoppedAt&&this.stoppedAt<e)throw new RangeError("Can't move stoppedAt forward");this.stoppedAt=e}advanceStack(e,t,r){let s=e.pos,{parser:a}=this,i=$?this.stackID(e)+" -> ":"";if(null!=this.stoppedAt&&s>this.stoppedAt)return e.forceReduce()?e:null;if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,r=t?e.curContext.hash:0;for(let o=this.fragments.nodeAt(s);o;){let s=this.parser.nodeSet.types[o.type.id]==o.type?a.getGoto(e.state,o.type.id):-1;if(s>-1&&o.length&&(!t||(o.prop(n.NodeProp.contextHash)||0)==r))return e.useNode(o,s),$&&console.log(i+this.stackID(e)+` (via reuse of ${a.getName(o.type.id)})`),!0;if(!(o instanceof n.Tree)||0==o.children.length||o.positions[0]>0)break;let l=o.children[0];if(!(l instanceof n.Tree&&0==o.positions[0]))break;o=l}}let o=a.stateSlot(e.state,4);if(o>0)return e.reduce(o),$&&console.log(i+this.stackID(e)+` (via always-reduce ${a.getName(65535&o)})`),!0;if(e.stack.length>=15e3)for(;e.stack.length>9e3&&e.forceReduce(););let l=this.tokens.getActions(e);for(let n=0;n<l.length;){let o=l[n++],O=l[n++],p=l[n++],h=n==l.length||!r,u=h?e:e.split();if(u.apply(o,O,p),$&&console.log(i+this.stackID(u)+` (via ${0==(65536&o)?"shift":`reduce of ${a.getName(65535&o)}`} for ${a.getName(O)} @ ${s}${u==e?"":", split"})`),h)return!0;u.pos>s?t.push(u):r.push(u)}return!1}advanceFully(e,t){let r=e.pos;for(;;){if(!this.advanceStack(e,null,null))return!1;if(e.pos>r)return w(e,t),!0}}runRecovery(e,t,r){let s=null,n=!1;for(let a=0;a<e.length;a++){let i=e[a],o=t[a<<1],l=t[1+(a<<1)],O=$?this.stackID(i)+" -> ":"";if(i.deadEnd){if(n)continue;if(n=!0,i.restart(),$&&console.log(O+this.stackID(i)+" (restarted)"),this.advanceFully(i,r))continue}let p=i.split(),h=O;for(let e=0;p.forceReduce()&&e<10&&($&&console.log(h+this.stackID(p)+" (via force-reduce)"),!this.advanceFully(p,r));e++)$&&(h=this.stackID(p)+" -> ");for(let e of i.recoverByInsert(o))$&&console.log(O+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,r);this.stream.end>i.pos?(l==i.pos&&(l++,o=0),i.recoverByDelete(o,l),$&&console.log(O+this.stackID(i)+` (via recover-delete ${this.parser.getName(o)})`),w(i,r)):(!s||s.score<i.score)&&(s=i)}return s}stackToTree(e){return e.close(),n.Tree.build({buffer:l.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.ranges[0].from,length:e.pos-this.ranges[0].from,minRepeatType:this.parser.minRepeatTerm})}stackID(e){let t=(f||(f=new WeakMap)).get(e);return t||f.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function w(e,t){for(let r=0;r<t.length;r++){let s=t[r];if(s.pos==e.pos&&s.sameState(e))return void(t[r].score<e.score&&(t[r]=e))}t.push(e)}class P{constructor(e,t,r){this.source=e,this.flags=t,this.disabled=r}allows(e){return!this.disabled||0==this.disabled[e]}}const Q=e=>e;class S extends n.Parser{constructor(e){if(super(),this.wrappers=[],14!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (14)`);let t=e.nodeNames.split(" ");this.minRepeatTerm=t.length;for(let r=0;r<e.repeatNodeCount;r++)t.push("");let r=Object.keys(e.topRules).map((t=>e.topRules[t][1])),s=[];for(let e=0;e<t.length;e++)s.push([]);function a(e,t,r){s[e].push([t,t.deserialize(String(r))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];"string"==typeof e&&(e=n.NodeProp[e]);for(let r=1;r<t.length;){let s=t[r++];if(s>=0)a(s,e,t[r++]);else{let n=t[r+-s];for(let i=-s;i>0;i--)a(t[r++],e,n);r++}}}this.nodeSet=new n.NodeSet(t.map(((t,a)=>n.NodeType.define({name:a>=this.minRepeatTerm?void 0:t,id:a,props:s[a],top:r.indexOf(a)>-1,error:0==a,skipped:e.skippedNodes&&e.skippedNodes.indexOf(a)>-1})))),e.propSources&&(this.nodeSet=this.nodeSet.extend(...e.propSources)),this.strict=!1,this.bufferLength=n.DefaultBufferLength;let i=c(e.tokenData);if(this.context=e.context,this.specialized=new Uint16Array(e.specialized?e.specialized.length:0),this.specializers=[],e.specialized)for(let t=0;t<e.specialized.length;t++)this.specialized[t]=e.specialized[t].term,this.specializers[t]=e.specialized[t].get;this.states=c(e.states,Uint32Array),this.data=c(e.stateData),this.goto=c(e.goto),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new u(i,e):e)),this.topRules=e.topRules,this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}createParse(e,t,r){let s=new x(this,e,t,r);for(let n of this.wrappers)s=n(s,e,t,r);return s}getGoto(e,t,r=!1){let s=this.goto;if(t>=s[0])return-1;for(let n=s[t+1];;){let t=s[n++],a=1&t,i=s[n++];if(a&&r)return i;for(let r=n+(t>>1);n<r;n++)if(s[n]==e)return i;if(a)return-1}}hasAction(e,t){let r=this.data;for(let s=0;s<2;s++)for(let n,a=this.stateSlot(e,s?2:1);;a+=3){if(65535==(n=r[a])){if(1!=r[a+1]){if(2==r[a+1])return v(r,a+2);break}n=r[a=v(r,a+2)]}if(n==t||0==n)return v(r,a+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}validAction(e,t){if(t==this.stateSlot(e,4))return!0;for(let r=this.stateSlot(e,1);;r+=3){if(65535==this.data[r]){if(1!=this.data[r+1])return!1;r=v(this.data,r+2)}if(t==v(this.data,r+1))return!0}}nextStates(e){let t=[];for(let r=this.stateSlot(e,1);;r+=3){if(65535==this.data[r]){if(1!=this.data[r+1])break;r=v(this.data,r+2)}if(0==(1&this.data[r+2])){let e=this.data[r+1];t.some(((t,r)=>1&r&&t==e))||t.push(this.data[r],e)}}return t}overrides(e,t){let r=q(this.data,this.tokenPrecTable,t);return r<0||q(this.data,this.tokenPrecTable,e)<r}configure(e){let t=Object.assign(Object.create(S.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let r=this.topRules[e.top];if(!r)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=r}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let r=e.tokenizers.find((e=>e.from==t));return r?r.to:t}))),e.contextTracker&&(t.context=e.contextTracker),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),null!=e.strict&&(t.strict=e.strict),e.wrap&&(t.wrappers=t.wrappers.concat(e.wrap)),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}hasWrappers(){return this.wrappers.length>0}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){let t=Object.keys(this.dialects),r=t.map((()=>!1));if(e)for(let s of e.split(" ")){let e=t.indexOf(s);e>=0&&(r[e]=!0)}let s=null;for(let e=0;e<t.length;e++)if(!r[e])for(let r,n=this.dialects[t[e]];65535!=(r=this.data[n++]);)(s||(s=new Uint8Array(this.maxTerm+1)))[r]=1;return new P(e,r,s)}static deserialize(e){return new S(e)}}function v(e,t){return e[t]|e[t+1]<<16}function q(e,t,r){for(let s,n=t;65535!=(s=e[n]);n++)if(s==r)return n-t;return-1}t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||Q,this.reduce=e.reduce||Q,this.reuse=e.reuse||Q,this.hash=e.hash||(()=>0),this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.InputStream=h,t.LRParser=S,t.Stack=a},893:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s=r(90),n=r(48);const a=[23,47,48,228,63,121,54,55,203,60,61,58,59,71],i=new s.ExternalTokenizer(((e,t)=>{if(e.next<0)e.acceptToken(167);else if(10!=e.next&&13!=e.next);else if(t.context.depth<0)e.acceptToken(165,1);else{e.advance();let t=0;for(;32==e.next||9==e.next;)e.advance(),t++;let r=10==e.next||13==e.next||35==e.next;e.acceptToken(r?166:164,-t)}}),{contextual:!0,fallback:!0}),o=new s.ExternalTokenizer(((e,t)=>{let r=t.context.depth;if(r<0)return;let s=e.peek(-1);if((10==s||13==s)&&t.context.depth>=0){let t=0,s=0;for(;;){if(32==e.next)t++;else{if(9!=e.next)break;t+=8-t%8}e.advance(),s++}t!=r&&10!=e.next&&13!=e.next&&35!=e.next&&(t<r?e.acceptToken(163,-s):e.acceptToken(162))}}));function l(e,t){this.parent=e,this.depth=t,this.hash=(e?e.hash+e.hash<<8:0)+t+(t<<4)}const O=new l(null,0),p=new s.ContextTracker({start:O,reduce:(e,t)=>e.depth<0&&a.indexOf(t)>-1?e.parent:e,shift:(e,t,r,s)=>162==t?new l(e,function(e){let t=0;for(let r=0;r<e.length;r++)t+=9==e.charCodeAt(r)?8-t%8:1;return t}(s.read(s.pos,r.pos))):163==t?e.parent:22==t||53==t||57==t?new l(e,-1):e,hash:e=>e.hash}),h=new s.ExternalTokenizer((e=>{for(let t=0;t<5;t++){if(e.next!="print".charCodeAt(t))return;e.advance()}if(!/\w/.test(String.fromCharCode(e.next)))for(let t=0;;t++){let r=e.peek(t);if(32!=r&&9!=r)return void(40!=r&&46!=r&&10!=r&&13!=r&&35!=r&&e.acceptToken(1))}})),u=n.styleTags({'async "*" "**" FormatConversion FormatSpec':n.tags.modifier,"for while if elif else try except finally return raise break continue with pass assert await yield":n.tags.controlKeyword,"in not and or is del":n.tags.operatorKeyword,"from def class global nonlocal lambda":n.tags.definitionKeyword,import:n.tags.moduleKeyword,"with as print":n.tags.keyword,Boolean:n.tags.bool,None:n.tags.null,VariableName:n.tags.variableName,"CallExpression/VariableName":n.tags.function(n.tags.variableName),"FunctionDefinition/VariableName":n.tags.function(n.tags.definition(n.tags.variableName)),"ClassDefinition/VariableName":n.tags.definition(n.tags.className),PropertyName:n.tags.propertyName,"CallExpression/MemberExpression/PropertyName":n.tags.function(n.tags.propertyName),Comment:n.tags.lineComment,Number:n.tags.number,String:n.tags.string,FormatString:n.tags.special(n.tags.string),UpdateOp:n.tags.updateOperator,ArithOp:n.tags.arithmeticOperator,BitOp:n.tags.bitwiseOperator,CompareOp:n.tags.compareOperator,AssignOp:n.tags.definitionOperator,Ellipsis:n.tags.punctuation,At:n.tags.meta,"( )":n.tags.paren,"[ ]":n.tags.squareBracket,"{ }":n.tags.brace,".":n.tags.derefOperator,", ;":n.tags.separator}),c={__proto__:null,await:40,or:50,and:52,in:56,not:58,is:60,if:66,else:68,lambda:72,yield:90,from:92,async:98,for:100,None:152,True:154,False:154,del:168,pass:172,break:176,continue:180,return:184,raise:192,import:196,as:198,global:202,nonlocal:204,assert:208,elif:218,while:222,try:228,except:230,finally:232,with:236,def:240,class:250},$=s.LRParser.deserialize({version:14,states:"!?pO`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DS'#DSOOQ$IS'#G`'#G`O)bQ$IWO'#CsO)rQ$IWO'#DdO*SQ$IWO'#DhOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#H]'#H]OOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#C{O0hQ$IWO'#DPO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO'#GoOOQ$IS,5:Z,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59`O0aQ$IWO,59`O0aQ$IWO,59`O6pQ$IWO,59`O6uQ$IWO,59`O6|Q$IWO,59hO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DY'#DYO8rQ$IWO,59_O'RQ$IWO,59_O9QQ$IWO,59_O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,5:O,5:OO9eQ$IWO,5:OO9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:S,5:SO9{Q$IWO,5:SO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HXOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59gOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DROEuQ$IWO,59kOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOFyQ$IWO,58zO)eQ$IWO,5:jOGXQ$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGlQ$IWO,5:yOG}Q$IWO,5:{OOQ$IS'#Fh'#FhOH]Q$I[O,5:{OHkQ$IWO,5:{OHpQ$IWO'#H[OOQ$IS,5;O,5;OOIOQ$IWO'#HWOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIaQ$I[O'#H^O'RQ$IWO'#H^OIkQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIpQ$IXO'#ElOJyQ$IZO,5;]ON[Q$IWO'#H_O3UQ$IWO,5;aONgQ$IWO,5;cONlQ$IWO,5;hO!#aQ$I[O1G.hO!#hQ$I[O1G.hO!&XQ$I[O1G.hO!&cQ$I[O1G.hO!(|Q$I[O1G.hO!)aQ$I[O1G.hO!)tQ$IWO'#GnO!*SQ$I[O'#GQO/gQ$IWO'#GnO!*^Q$IWO'#GmOOQ$IS,5:X,5:XO!*fQ$IWO,5:XO!*kQ$IWO'#GpO!*vQ$IWO'#GpO!+ZQ$IWO,5=ZOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.z1G.zO!,ZQ$I[O1G.zO!,bQ$I[O1G.zO0aQ$IWO1G.zO!,}Q$IWO1G/SOOQ$IS'#DX'#DXO/gQ$IWO,59rOOQ$IS1G.y1G.yO!-UQ$IWO1G/cO!-fQ$IWO1G/cO!-nQ$IWO1G/dO'RQ$IWO'#GgO!-sQ$IWO'#GgO!-xQ$I[O1G.yO!.YQ$IWO,59gO!/`Q$IWO,5=VO!/pQ$IWO,5=VO!/xQ$IWO1G/kO!/}Q$I[O1G/kOOQ$IS1G/j1G/jO!0_Q$IWO,5=QO!1UQ$IWO,5=QO/gQ$IWO1G/oO!1sQ$IWO1G/qO!1xQ$I[O1G/qO!2YQ$I[O1G/oOOQ$IS1G/n1G/nOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2jQ$IWO'#G{O/gQ$IWO'#G{O!2xQ$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3TQ%GlO1G2VO!3tQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4]Q$I[O,5=sOOQ$IS1G1V1G1VO!4tQ$IWO1G1VOOQ$IS'#DT'#DTO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!4yQ$IWO'#FSO!5UQ$IWO,59mO!5^Q$IWO1G/VO!5hQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6XQ$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6jQ$IWO1G.fOOQ$IS1G0U1G0UO!6xQ$IWO,5=SO!7YQ$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7kQ$IWO1G0gO!7vQ$IWO1G0gO!7{Q$IWO,5=vO!8ZQ$IWO,5=vO!8iQ$IWO,5=rO!9PQ$IWO,5=rO!9bQ$IZO1G0qO!<pQ$IZO1G0tO!?{Q$IWO,5=xO!@VQ$IWO,5=xO!@_Q$I[O,5=xO/gQ$IWO1G0vO!@iQ$IWO1G0vO3UQ$IWO1G0{ONgQ$IWO1G0}OOQ$IV,5;W,5;WO!@nQ$IYO,5;WO!@sQ$IZO1G0wO!DUQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DcQ$IWO,5=yO!DpQ$IWO,5=yO/|Q$IWO,5=yOOQ$IV1G0{1G0{O!DxQ$IWO'#EyO!EZQ%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EcQ$IWO,5=XO!EvQ$IWO,5=XOOQ$IS1G/s1G/sO!FOQ$IWO,5=[O!F`Q$IWO,5=[O!FhQ$IWO,5=[O!F{Q$IWO,5=[O!G]Q$IWO,5=[OOQ$IS1G2u1G2uOOQ$IS7+$f7+$fO!5^Q$IWO7+$nO!IOQ$IWO1G.zO!IVQ$IWO1G.zOOQ$IS1G/^1G/^OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!I^Q$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!InQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$e7+$eO!IsQ$IWO7+$}O!I{Q$IWO7+%OO!JQQ$IWO1G2qOOQ$IS7+%V7+%VO!JbQ$IWO1G2qO!JjQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JoQ$IWO1G2lOOQ$IS-E9R-E9RO!KfQ$IWO7+%ZOOQ$IS7+%]7+%]O!KtQ$IWO1G2lO!LcQ$IWO7+%]O!LhQ$IWO1G2rO!LxQ$IWO1G2rO!MQQ$IWO7+%ZO!MVQ$IWO,5=gO!MmQ$IWO,5=gO!MmQ$IWO,5=gO!M{O!LQO'#DwO!NWOSO'#G|OOOO1G/{1G/{O!N]Q$IWO1G/{O!NeQ%GlO7+'qO# UQ$I[O1G1jP# oQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$q7+$qO# |Q$IWO,5<kO#!gQ$IWO,5<kO#!xQ$I[O,5;qO##]Q$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##mQ$IWO7+&POOQ$IS7+&R7+&RO##{Q$IWO'#HZO/|Q$IWO'#HYO#$aQ$IWO7+&ROOQ$IS,5<U,5<UO#$lQ$IWO1G3bOOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#$zQ$IWO1G3^OOQ$IS-E9d-E9dO#%bQ$IZO7+&]O!DUQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(pQ$I[O,5<YO'RQ$IWO,5<YO#(zQ$IWO1G3dOOQ$IS-E9l-E9lO#)UQ$IWO1G3dO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!EZQ%1`O7+&iO#)^Q$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+PQ$IWO,5<ZOOQ$IV7+&c7+&cO#+[Q$IZO7+&cO#.gQ$IWO,5<[O#.rQ$IWO1G3eOOQ$IS-E9n-E9nO#/PQ$IWO1G3eO#/XQ$IWO'#HaO#/gQ$IWO'#HaO/|Q$IWO'#HaOOQ$IS'#Ha'#HaO#/rQ$IWO'#H`OOQ$IS,5;e,5;eO#/zQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0PQ$IWO1G2sOOQ$IS-E9V-E9VO#0dQ$IWO,5;tO#0oQ$IWO,5;tO#1SQ$IWO1G2vOOQ$IS-E9W-E9WO#1dQ$IWO1G2vO#1lQ$IWO1G2vO#1|Q$IWO1G2vO#1dQ$IWO1G2vOOQ$IS<<HY<<HYO#2XQ$I[O1G1[OOQ$IS<<Hi<<HiP#2fQ$IWO'#FUO6|Q$IWO1G2mO#2sQ$IWO1G2mO#2xQ$IWO<<HiOOQ$IS<<Hj<<HjO#3YQ$IWO7+(]OOQ$IS<<Hq<<HqO#3jQ$I[O1G1ZP#4ZQ$IWO'#FTO#4hQ$IWO7+(^O#4xQ$IWO7+(^O#5QQ$IWO<<HuO#5VQ$IWO7+(WOOQ$IS<<Hw<<HwO#5|Q$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6RQ$IWO1G3ROOQ$IS-E9[-E9[O#6iQ$IWO1G3ROOOO'#F_'#F_O#6wO!LQO,5:cOOOO,5=h,5=hOOOO7+%g7+%gO#7SQ$IWO1G2VO#7mQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8OQ$IWO,5=uO#8aQ$IWO,5=uO/|Q$IWO,5=uO#8rQ$IWO,5=tOOQ$IS<<Im<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8wQ$I[O1G1tP#9RQ$IWO'#FnO#9YQ$IWO7+)OO#9dQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<oQ$IZO7+&^OOQ$IV<<I}<<I}O#>hQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AsQ$IWO7+)PO#BQQ$IWO7+)POOQ$IS'#Ez'#EzO/gQ$IWO,5={O#BYQ$IWO,5={OOQ$IS,5={,5={O#BeQ$IWO,5=zO#BvQ$IWO,5=zOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#COQ$IWO'#FXO#C`Q$IWO1G1`O#CsQ$IWO1G1`O#DTQ$IWO1G1`P#D`Q$IWO'#FYO#DmQ$IWO7+(bO#D}Q$IWO7+(bO#D}Q$IWO7+(bO#EVQ$IWO7+(bO#EgQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FQQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FbQ$I[O1G1^P#FlQ$IWO'#FWOOQ$IS1G1d1G1dP#FyQ$IWO'#F^O#GWQ$IWO7+(mOOOO-E9]-E9]O#GnQ$IWO7+'qOOQ$ISAN?VAN?VO#HXQ$IWO,5<TO#HmQ$IWO1G3aOOQ$IS-E9g-E9gO#IOQ$IWO1G3aOOQ$IS1G3`1G3`OOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IaQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LlQ$IWO<<LkOOQ$IS1G3g1G3gO/gQ$IWO1G3gOOQ$IS,5<],5<]O#LyQ$IWO1G3fOOQ$IS-E9o-E9oO#M[Q$IWO7+&zO#MlQ$IWO7+&zOOQ$IS7+&z7+&zO#MwQ$IWO<<K|O#NXQ$IWO<<K|O#NXQ$IWO<<K|O#NaQ$IWO'#GiOOQ$IS<<Ks<<KsO#NkQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ UQ$IWO7+({O$ gQ$IWO7+({OOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)R7+)RP$ xQ$IWO'#FqOOQ$IS<<Jf<<JfO$!WQ$IWO<<JfO$!hQ$IWOANAhO$!xQ$IWOANAhO$#QQ$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#kQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$SQ$IWO<<LgOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$eQ$IWOG27SO$$uQ$IWO,59{OOQ$IS1G2o1G2oO#NaQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#C{O6|Q$IWO,59`O6|Q$IWO,59`O6|Q$IWO,59`O$$zQ$I[O,5<kO6|Q$IWO1G.zO/gQ$IWO1G/VO/gQ$IWO7+$nP$%_Q$IWO'#FdO'RQ$IWO'#GPO$%lQ$IWO,59`O$%qQ$IWO,59`O$%xQ$IWO,59kO$%}Q$IWO1G/SO0hQ$IWO'#DPO6|Q$IWO,59h",stateData:"$&e~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%f[O%g]O%j^O%m_O%s`O%vaO%xbO~OT!aO]!aO_!bOf!iO!V!kO!d!mO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oi%TXj%TXk%TXl%TXm%TXn%TXq%TXx%TXy%TX!s%TX#^%TX$j%TX$m%TX%V%TXe%TX!R%TX!S%TX%W%TX!U%TX!Y%TX!O%TX#V%TXr%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%f[O%g]O%j^O%m_O%s`O%vaO%xbO~Ox%SXy%SX#^%SX$j%SX$m%SX%V%SX~Oi!pOj!qOk!oOl!oOm!rOn!sOq!tO!s%SX~P(`OT!zOm-dOt-rO}vO~P'ROT!}Om-dOt-rO!U#OO~P'ROT#RO_#SOm-dOt-rO!Y#TO~P'RO%h#WO%i#YO~O%k#ZO%l#YO~O!Z#]O%n#^O%r#`O~O!Z#]O%t#aO%u#`O~O!Z#]O%i#`O%w#cO~O!Z#]O%l#`O%y#eO~OT$tX]$tX_$tXf$tXi$tXj$tXk$tXl$tXm$tXn$tXq$tXx$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tXe$tX!R$tX!S$tX~O%f[O%g]O%j^O%m_O%s`O%vaO%xbOy$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!U$tX!Y$tX!O$tX#V$tXr$tX!j$tX~P+uOx#jOy$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Om-dOt-rO~P'RO#^#mO$j#oO$m#oO~O%QVO~O!R#tO#l!YO#q!ZO#tlO~OmtO~P'ROT#yO_#zO%QVOyuP~OT$OOm-dOt-rO!O$PO~P'ROy$RO!s$WO%V$SO#^!tX$j!tX$m!tX~OT$OOm-dOt-rO#^!}X$j!}X$m!}X~P'ROm-dOt-rO#^#RX$j#RX$m#RX~P'RO!d$^O!m$^O%QVO~OT$hO~P'RO!S$jO#j$kO#l$lO~Oy$mO~OT${O_${Oe$}Om-dOt-rO~P'ROm-dOt-rOy%QO~P'RO%e%SO~O_!bOf!iO!V!kO!d!mOT`a]`ai`aj`ak`al`am`an`aq`ax`ay`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`ae`a!R`a!S`a%W`a!U`a!Y`a!O`a#V`ar`a!j`a~Ol%XO~Om%XO~P'ROm-dO~P'ROi-fOj-gOk-eOl-eOm-nOn-oOq-sOe%SX!R%SX!S%SX%W%SX!U%SX!Y%SX!O%SX#V%SX!j%SX~P(`O%W%ZOe%RXx%RX!R%RX!S%RX!U%RXy%RX~Oe%]Ox%^O!R%bO!S%aO~Oe%]O~Ox%eO!R%bO!S%aO!U%_X~O!U%iO~Ox%jOy%lO!R%bO!S%aO!Y%YX~O!Y%pO~O!Y%qO~O%h#WO%i%sO~O%k#ZO%l%sO~OT%vOm-dOt-rO}vO~P'RO!Z#]O%n#^O%r%yO~O!Z#]O%t#aO%u%yO~O!Z#]O%i%yO%w#cO~O!Z#]O%l%yO%y#eO~OT!la]!la_!laf!lai!laj!lak!lal!lam!lan!laq!lax!lay!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!lae!la!R!la!S!la%W!la!U!la!Y!la!O!la#V!lar!la!j!la~P#vOx&OOy$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&QOmtOtuOy$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROx&OOy$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOmtOtuO}vO!O!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#mO$j&VO$m&VO~O!d&WOf%{X$j%{X#V%{X#^%{X$m%{X#U%{X~Of!iO$j&YO~Oicajcakcalcamcancaqcaxcayca!sca#^ca$jca$mca%Vcaeca!Rca!Sca%Wca!Uca!Yca!Oca#Vcarca!jca~P$_Oqoaxoayoa#^oa$joa$moa%Voa~Oi!pOj!qOk!oOl!oOm!rOn!sO!soa~PDTO%V&[Ox%UXy%UX~O%QVOx%UXy%UX~Ox&_OyuX~Oy&aO~Ox%jO#^%YX$j%YX$m%YXe%YXy%YX!Y%YX!j%YX%V%YX~OT-mOm-dOt-rO}vO~P'RO%V$SO#^Sa$jSa$mSa~Ox&jO#^%[X$j%[X$m%[Xl%[X~P$_Ox&mO!O&lO#^#Ra$j#Ra$m#Ra~O#V&nO#^#Ta$j#Ta$m#Ta~O!d$^O!m$^O#U&pO%QVO~O#U&pO~Ox&rO#^&OX$j&OX$m&OX~Ox&tO#^%zX$j%zX$m%zXy%zX~Ox&xOl&QX~P$_Ol&{O~OPhOTeOmtOtuO}vO!O!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'QO~P'ROr'UO#g'SO#h'TOP#eaT#ead#eaf#eam#eaq#eat#ea}#ea!O#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%f#ea%g#ea%j#ea%m#ea%s#ea%v#ea%x#ea$i#ea$m#ea~Ox'VO#V'XOy&RX~Of'ZO~Of!iOy$mO~OT!aO]!aO_!bOf!iO!V!kO!d!mO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui$jUi$mUi$uUi%VUieUi!RUi!SUi%WUi!UUi!YUi!OUi#VUirUi!jUi~O$v!]O~PNtO$vUi~PNtOT!aO]!aO_!bOf!iO!V!kO!d!mO$z!`O${!`O$|!aO$}!aO%O!aOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUieUi!RUi!SUi%WUi!UUi!YUi!OUi#VUirUi!jUi~O$x!_O$y!_O~P!#oO$xUi$yUi~P!#oO_!bOf!iO!V!kO!d!mOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUieUi!RUi!SUi%WUi!UUi!YUi!OUi#VUirUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&mOTUi]Ui$|Ui$}Ui%OUi~P!&mO!R%bO!S%aOe%bXx%bX~O%V'`O%W'`O~P+uOx'bOe%aX~Oe'dO~Ox'eOy'gO!U%dX~Om-dOt-rOx'eOy'hO!U%dX~P'RO!U'jO~Ok!oOl!oOm!rOn!sOihiqhixhiyhi!shi#^hi$jhi$mhi%Vhi~Oj!qO~P!+`Ojhi~P!+`Oi-fOj-gOk-eOl-eOm-nOn-oO~Or'lO~P!,iOT'qOe'rOm-dOt-rO~P'ROe'rOx'sO~Oe'uO~O!S'wO~Oe'xOx'sO!R%bO!S%aO~P$_Oi-fOj-gOk-eOl-eOm-nOn-oOeoa!Roa!Soa%Woa!Uoa!Yoa!Ooa#Voaroa!joa~PDTOT'qOm-dOt-rO!U%_a~P'ROx'{O!U%_a~O!U'|O~Ox'{O!R%bO!S%aO!U%_a~P$_OT(QOm-dOt-rO!Y%Ya#^%Ya$j%Ya$m%Yae%Yay%Ya!j%Ya%V%Ya~P'ROx(RO!Y%Ya#^%Ya$j%Ya$m%Yae%Yay%Ya!j%Ya%V%Ya~O!Y(UO~Ox(RO!R%bO!S%aO!Y%Ya~P$_Ox(XO!R%bO!S%aO!Y%`a~P$_Ox([Oy%oX!Y%oX!j%oX~Oy(_O!Y(aO!j(bO~OT&QOmtOtuOy$si!s$si#^$si$j$si$m$si%V$si~P'ROx(cOy$si!s$si#^$si$j$si$m$si%V$si~O!d&WOf%{a$j%{a#V%{a#^%{a$m%{a#U%{a~O$j(hO~OT#yO_#zO%QVO~Ox&_Oyua~OmtOtuO~P'ROx(RO#^%Ya$j%Ya$m%Yae%Yay%Ya!Y%Ya!j%Ya%V%Ya~P$_Ox(mO#^$sX$j$sX$m$sX%V$sX~O%V$SO#^Si$jSi$mSi~O#^%[a$j%[a$m%[al%[a~P'ROx(pO#^%[a$j%[a$m%[al%[a~OT(tOf(vO%QVO~O#U(wO~O%QVO#^&Oa$j&Oa$m&Oa~Ox(yO#^&Oa$j&Oa$m&Oa~Om-dOt-rO#^%za$j%za$m%zay%za~P'ROx(|O#^%za$j%za$m%zay%za~Or)QO#a)POP#_iT#_id#_if#_im#_iq#_it#_i}#_i!O#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%f#_i%g#_i%j#_i%m#_i%s#_i%v#_i%x#_i$i#_i$m#_i~Or)ROP#biT#bid#bif#bim#biq#bit#bi}#bi!O#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%f#bi%g#bi%j#bi%m#bi%s#bi%v#bi%x#bi$i#bi$m#bi~OT)TOl&Qa~P'ROx)UOl&Qa~Ox)UOl&Qa~P$_Ol)YO~O$h)]O~Or)`O#g'SO#h)_OP#eiT#eid#eif#eim#eiq#eit#ei}#ei!O#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%f#ei%g#ei%j#ei%m#ei%s#ei%v#ei%x#ei$i#ei$m#ei~Om-dOt-rOy$mO~P'ROm-dOt-rOy&Ra~P'ROx)fOy&Ra~OT)jO_)kOe)nO$|)lO%QVO~Oy$mO&U)pO~OT${O_${Om-dOt-rOe%aa~P'ROx)vOe%aa~Om-dOt-rOy)yO!U%da~P'ROx)zO!U%da~Om-dOt-rOx)zOy)}O!U%da~P'ROm-dOt-rOx)zO!U%da~P'ROx)zOy)}O!U%da~Ok-eOl-eOm-nOn-oOehiihiqhixhi!Rhi!Shi%Whi!Uhiyhi!Yhi#^hi$jhi$mhi!Ohi#Vhirhi!jhi%Vhi~Oj-gO~P!GhOjhi~P!GhOT'qOe*SOm-dOt-rO~P'ROl*UO~Oe*SOx*WO~Oe*XO~OT'qOm-dOt-rO!U%_i~P'ROx*YO!U%_i~O!U*ZO~OT(QOm-dOt-rO!Y%Yi#^%Yi$j%Yi$m%Yie%Yiy%Yi!j%Yi%V%Yi~P'ROx*^O!R%bO!S%aO!Y%`i~Ox*aO!Y%Yi#^%Yi$j%Yi$m%Yie%Yiy%Yi!j%Yi%V%Yi~O!Y*bO~O_*dOm-dOt-rO!Y%`i~P'ROx*^O!Y%`i~O!Y*fO~OT*hOm-dOt-rOy%oa!Y%oa!j%oa~P'ROx*iOy%oa!Y%oa!j%oa~O!Z#]O%q*lO!Y!kX~O!Y*nO~Oy(_O!Y*oO~OT&QOmtOtuOy$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROx$Wiy$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&QOmtOtuO~P'ROT&QOm-dOt-rO#^$sa$j$sa$m$sa%V$sa~P'ROx*pO#^$sa$j$sa$m$sa%V$sa~Ox#ya#^#ya$j#ya$m#yal#ya~P$_O#^%[i$j%[i$m%[il%[i~P'ROx*sO#^#Rq$j#Rq$m#Rq~Ox*tO#V*vO#^%}X$j%}X$m%}Xe%}X~OT*xOf(vO%QVO~O%QVO#^&Oi$j&Oi$m&Oi~Om-dOt-rO#^%zi$j%zi$m%ziy%zi~P'ROr*|O#a)POP#_qT#_qd#_qf#_qm#_qq#_qt#_q}#_q!O#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%f#_q%g#_q%j#_q%m#_q%s#_q%v#_q%x#_q$i#_q$m#_q~Ol$bax$ba~P$_OT)TOl&Qi~P'ROx+TOl&Qi~OPhOTeOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROx+_Oy$mO#V+_O~O#h+`OP#eqT#eqd#eqf#eqm#eqq#eqt#eq}#eq!O#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%f#eq%g#eq%j#eq%m#eq%s#eq%v#eq%x#eq$i#eq$m#eq~O#V+aOx$day$da~Om-dOt-rOy&Ri~P'ROx+cOy&Ri~Oy$RO%V+eOe&TXx&TX~O%QVOe&TXx&TX~Ox+iOe&SX~Oe+kO~OT${O_${Om-dOt-rOe%ai~P'ROy+nOx#|a!U#|a~Om-dOt-rOy+oOx#|a!U#|a~P'ROm-dOt-rOy)yO!U%di~P'ROx+rO!U%di~Om-dOt-rOx+rO!U%di~P'ROx+rOy+uO!U%di~Oe#xix#xi!U#xi~P$_OT'qOm-dOt-rO~P'ROl+wO~OT'qOe+xOm-dOt-rO~P'ROT'qOm-dOt-rO!U%_q~P'ROx#wi!Y#wi#^#wi$j#wi$m#wie#wiy#wi!j#wi%V#wi~P$_OT(QOm-dOt-rO~P'RO_*dOm-dOt-rO!Y%`q~P'ROx+yO!Y%`q~O!Y+zO~OT(QOm-dOt-rO!Y%Yq#^%Yq$j%Yq$m%Yqe%Yqy%Yq!j%Yq%V%Yq~P'ROy+{O~OT*hOm-dOt-rOy%oi!Y%oi!j%oi~P'ROx,QOy%oi!Y%oi!j%oi~O!Z#]O%q*lO!Y!ka~OT&QOm-dOt-rO#^$si$j$si$m$si%V$si~P'ROx,SO#^$si$j$si$m$si%V$si~O%QVO#^%}a$j%}a$m%}ae%}a~Ox,VO#^%}a$j%}a$m%}ae%}a~Oe,YO~Ol$bix$bi~P$_OT)TO~P'ROT)TOl&Qq~P'ROr,]OP#dyT#dyd#dyf#dym#dyq#dyt#dy}#dy!O#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%f#dy%g#dy%j#dy%m#dy%s#dy%v#dy%x#dy$i#dy$m#dy~OPhOTeOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,aO$m,aO~P'RO#h,bOP#eyT#eyd#eyf#eym#eyq#eyt#ey}#ey!O#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%f#ey%g#ey%j#ey%m#ey%s#ey%v#ey%x#ey$i#ey$m#ey~Om-dOt-rOy&Rq~P'ROx,fOy&Rq~O%V+eOe&Tax&Ta~OT)jO_)kO$|)lO%QVOe&Sa~Ox,jOe&Sa~OT${O_${Om-dOt-rO~P'ROm-dOt-rOy,lOx#|i!U#|i~P'ROm-dOt-rOx#|i!U#|i~P'ROy,lOx#|i!U#|i~Om-dOt-rOy)yO~P'ROm-dOt-rOy)yO!U%dq~P'ROx,oO!U%dq~Om-dOt-rOx,oO!U%dq~P'ROq,rO!R%bO!S%aOe%Zq!U%Zq!Y%Zqx%Zq~P!,iO_*dOm-dOt-rO!Y%`y~P'ROx#zi!Y#zi~P$_O_*dOm-dOt-rO~P'ROT*hOm-dOt-rO~P'ROT*hOm-dOt-rOy%oq!Y%oq!j%oq~P'ROT&QOm-dOt-rO#^$sq$j$sq$m$sq%V$sq~P'RO#V,vOx$]a#^$]a$j$]a$m$]ae$]a~O%QVO#^%}i$j%}i$m%}ie%}i~Ox,xO#^%}i$j%}i$m%}ie%}i~Or,{OP#d!RT#d!Rd#d!Rf#d!Rm#d!Rq#d!Rt#d!R}#d!R!O#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%f#d!R%g#d!R%j#d!R%m#d!R%s#d!R%v#d!R%x#d!R$i#d!R$m#d!R~Om-dOt-rOy&Ry~P'ROT)jO_)kO$|)lO%QVOe&Si~Om-dOt-rOx#|q!U#|q~P'ROy-ROx#|q!U#|q~Om-dOt-rOy)yO!U%dy~P'ROx-SO!U%dy~Om-dOt-WO~P'ROq,rO!R%bO!S%aOe%Zy!U%Zy!Y%Zyx%Zy~P!,iO%QVO#^%}q$j%}q$m%}qe%}q~Ox-[O#^%}q$j%}q$m%}qe%}q~OT)jO_)kO$|)lO%QVO~Om-dOt-rOx#|y!U#|y~P'ROm-dOt-rOy)yO!U%d!R~P'ROx-_O!U%d!R~Oe%^Xq%^X!R%^X!S%^X!U%^X!Y%^Xx%^X~P!,iOq,rO!R%bO!S%aOe%]a!U%]a!Y%]ax%]a~O%QVO#^%}y$j%}y$m%}ye%}y~Om-dOt-rOy)yO!U%d!Z~P'ROy-bO~Ox*pO#^$sa$j$sa$m$sa%V$sa~P$_OT&QOm-dOt-rO~P'ROl-iO~Om-iO~P'ROy-jO~Or-kO~P!,iO%g%j%v%x%f!Z%n%t%w%y%m%s%m%Q~",goto:"!-g&UPPPP&VP&_)p*V*m+U+n,XP,sP&_-a-a&_PPP&_0rPPPPPP0r3bPP3bP5n5w:zPP:};];`PP&_&_PP;lPP&_&_PP&_&_&_&_&_;p<d&_P<gP<j<j@PP@e&_PPP@i@o&VP&V&VP&VP&VP&VP&VP&V&V&VP&VPP&VPP&VP@uP@|ASP@|P@|@|PPP@|PB{PCUC[CbB{P@|ChPCoCuC{DXDkDqD{EREoEuE{FRF]FcFiFoFuF{G_GiGoGuG{HVH]HcHiHoHyIPIZIaPPPPPPPPPIjIrI{JVJbPPPPPPPPPPPPNw! a!%o!({PP!)T!)c!)l!*b!*X!*k!*q!*t!*w!*z!+S!+pPPPPPPPPPP!+s!+vPPPPPPPPP!+|!,Y!,f!,l!,u!,x!-O!-U!-[!-_]iOr#m$m)]+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sw!cP#i#v$X$g%c%h%n%o&b&z(d(o)S*R*[+R+|-hy!dP#i#v$X$g$s%c%h%n%o&b&z(d(o)S*R*[+R+|-h{!eP#i#v$X$g$s$t%c%h%n%o&b&z(d(o)S*R*[+R+|-h}!fP#i#v$X$g$s$t$u%c%h%n%o&b&z(d(o)S*R*[+R+|-h!P!gP#i#v$X$g$s$t$u$v%c%h%n%o&b&z(d(o)S*R*[+R+|-h!R!hP#i#v$X$g$s$t$u$v$w%c%h%n%o&b&z(d(o)S*R*[+R+|-h!V!hP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-h'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-s&ZUOXYZhrtv|}!R!S!T!X!i!k!o!p!q!s!t#]#j#m$P$R$T$W$k$m${%Q%X%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-o-s%eWOXYZhrv|}!R!S!T!X!i!k#]#j#m$P$R$T$W$k$m${%Q%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,f,h,l,o-R-S-_-j-k-lQ#|uQ-`-WR-p-r'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sW#pl!O!P$_W#xu&_-W-rQ$a!QQ$q!YQ$r!ZW$z!i'b)v+mS&^#y#zQ'O$lQ(f&WQ(t&nU(u&p(v(wU(x&r(y*yQ)h'XW)i'Z+i,j-PS+h)j)kY,U*t,V,w,x-[Q,X*vQ,c+_Q,e+aR-Z,vR&]#xi!wXY!S!T%^%e's'{)P*T*W*YR%[!vQ!{XQ%w#]Q&f$TR&i$WT-V,r-b!U!jP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-hQ&Z#qR'^$rR'a$zR%T!m'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z!}#R#S#]#j#m$O$P$R$T$W$h$j$k$m${%Q%X%[%^%a%e%j%l%v&O&Q&]&a&j&l&m&t&x&{'S'V'a'b'e'g'h'l'q's'w'{(Q(R(X([(c(e(m(p(|)P)T)U)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*d*h*i*p*r*s*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-m-o-sT#gc#hS#^_#_S#a`#bS#ca#dS#eb#fT*l(_*mT(`%w(bQ$VwR+g)iX$Tw$U$V&hZkOr$m)]+ZXoOr)]+ZQ$n!WQ&v$eQ&w$fQ'Y$pQ']$rQ)Z&}Q)a'SQ)c'TQ)d'UQ)q'[Q)s'^Q*})PQ+P)QQ+Q)RQ+U)XS+W)[)rQ+[)_Q+])`Q+^)bQ,Z*|Q,[+OQ,^+VQ,_+XQ,d+`Q,z,]Q,|,bQ,},cR-],{WoOr)]+ZR#snQ'[$qR)['OQ+f)iR,h+gQ)r'[R+X)[ZmOnr)]+ZQrOR#urQ&`#{R(k&`S%k#Q#}S(S%k(VT(V%n&bQ%_!yQ%f!|W't%_%f'y'}Q'y%cR'}%hQ&k$XR(q&kQ(Y%oQ*_(TT*e(Y*_Q'c$|R)w'cS'f%P%QY){'f)|+s,p-TU)|'g'h'iU+s)}*O*PS,p+t+uR-T,qQ#X]R%r#XQ#[^R%t#[Q#__R%x#_Q(]%uS*j(]*kR*k(^Q*m(_R,R*mQ#b`R%z#bQ#daR%{#dQ#fbR%|#fQ#hcR%}#hQ#kfQ&P#iW&S#k&P(n*qQ(n&eR*q-hQ$UwS&g$U&hR&h$VQ&u$cR(}&uQ&X#pR(g&XQ$_!PR&o$_Q*u(uS,W*u,yR,y,XQ&s$aR(z&sQ#njR&U#nQ+Z)]R,`+ZQ)O&vR*{)OQ&y$gS)V&y)WR)W&zQ'R$nR)^'RQ'W$oS)g'W+dR+d)hQ+j)mR,k+jWnOr)]+ZR#rnSqOrT+Y)]+ZWpOr)]+ZR'P$mYjOr$m)]+ZR&T#m[wOr#m$m)]+ZR&f$T&YPOXYZhrtv|}!R!S!T!X!i!k!o!p!q!s!t#]#j#m$P$R$T$W$k$m${%Q%X%[%^%e%j%l%v&O&]&a&l&m&t&{'S'V'a'b'e'g'h'l's'{(R(X([(c(e(m(|)P)Y)])f)p)v)y)z)}*T*U*W*Y*]*^*a*h*i*p*s*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,f,h,l,o,r-R-S-_-b-d-e-f-g-i-j-k-l-o-sQ!nSQ#ieQ#vsU$Xx%a'wS$g!U$jQ$s!cQ$t!dQ$u!eQ$v!fQ$w!gQ$x!hQ%c!zQ%h!}Q%n#RQ%o#SQ&b$OQ&z$hQ(d&QU(o&j(p*rW)S&x)U+S+TQ*R'qQ*[(QQ+R)TQ+|*dR-h-mQ!yXQ!|YQ$e!SQ$f!T^'p%^%e's'{*T*W*YR+O)P[fOr#m$m)]+Zh!vXY!S!T%^%e's'{)P*T*W*YQ#QZQ#lhS#}v|Q$[}W$c!R$W&{)YS$o!X$kW$y!i'b)v+mQ%P!kQ%u#]`&R#j&O(c(e(m*p,S-lQ&c$PQ&d$RQ&e$TQ'_${Q'i%QQ'o%[W(P%j(R*]*aQ(T%lQ(^%vQ(i&]S(l&a-jQ(r&lQ(s&mU({&t(|*zQ)b'SY)e'V)f+b+c,fQ)t'a^)x'e)z+q+r,o-S-_Q*O'gQ*P'hS*Q'l-kW*c(X*^+y+}W*g([*i,P,QQ+l)pQ+p)yQ+t)}Q,O*hQ,T*sQ,g+fQ,m+nQ,n+oQ,q+uQ,u+{Q-O,hQ-Q,lR-^-RhTOr#j#m$m&O&a'l(c(e)]+Z$z!uXYZhv|}!R!S!T!X!i!k#]$P$R$T$W$k${%Q%[%^%e%j%l%v&]&l&m&t&{'S'V'a'b'e'g'h's'{(R(X([(m(|)P)Y)f)p)v)y)z)}*T*W*Y*]*^*a*h*i*p*s*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,f,h,l,o-R-S-_-j-k-lQ#wtW%U!o!s-e-oQ%V!pQ%W!qQ%Y!tQ%d-dS'k%X-iQ'm-fQ'n-gQ+v*UQ,t+wS-U,r-bR-q-sU#{u-W-rR(j&_[gOr#m$m)]+ZX!xX#]$T$WQ#VZQ$QvR$Z|Q%`!yQ%g!|Q%m#QQ'_$yQ'z%cQ(O%hQ(W%nQ(Z%oQ*`(TQ,s+vQ-Y,tR-a-XQ$YxQ'v%aR*V'wQ-X,rR-c-bR#PYR#UZR%O!iQ$|!iV)u'b)v+m!V!lP!n#i#v$X$g$s$t$u$v$w$x%c%h%n%o&b&z(d(o)S*R*[+R+|-hR%R!kR%w#]Q(a%wR*o(bQ$d!RQ&i$WQ)X&{R+V)YQ#qlQ$]!OQ$`!PR&q$_Q(t&pR*x(wQ(t&pQ*w(vR*x(wR$b!QXpOr)]+ZQ$i!UR&|$jQ$p!XR&}$kR)o'ZQ)m'ZV,i+i,j-P",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:236,context:p,nodeProps:[["group",-14,4,80,82,83,85,87,89,91,93,94,95,97,100,103,"Statement Statement",-22,6,16,19,23,38,47,48,54,55,58,59,60,61,62,65,68,69,70,74,75,76,77,"Expression",-9,105,107,110,112,113,117,119,124,126,"Statement"],["openedBy",21,"(",52,"[",56,"{"],["closedBy",22,")",53,"]",57,"}"]],propSources:[u],skippedNodes:[0,2],repeatNodeCount:32,tokenData:"&JdMgR!^OX$}XY!&]Y[$}[]!&]]p$}pq!&]qr!(grs!,^st!IYtu$}uv$5[vw$7nwx$8zxy%'vyz%(|z{%*S{|%,r|}%.O}!O%/U!O!P%1k!P!Q%<q!Q!R%?a!R![%Cc![!]%N_!]!^&!q!^!_&#w!_!`&&g!`!a&'s!a!b$}!b!c&*`!c!d&+n!d!e&-`!e!h&+n!h!i&7[!i!t&+n!t!u&@j!u!w&+n!w!x&5j!x!}&+n!}#O&Bt#O#P!'u#P#Q&Cz#Q#R&EQ#R#S&+n#S#T$}#T#U&+n#U#V&-`#V#Y&+n#Y#Z&7[#Z#f&+n#f#g&@j#g#i&+n#i#j&5j#j#o&+n#o#p&F^#p#q&GS#q#r&H`#r#s&I^#s$g$}$g~&+n<r%`Z%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<Q&^Z%q7[%hS%n`%w!bOr'PrsFisw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'P<Q'`Z%q7[%hS%kW%n`%w!b%y#tOr'Prs&Rsw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'P;p([Z%q7[%kW%y#tOr(}rs)}sw(}wx={x#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(};p)[Z%q7[%hS%kW%w!b%y#tOr(}rs)}sw(}wx(Rx#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(};p*WZ%q7[%hS%w!bOr(}rs*ysw(}wx(Rx#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(};p+SZ%q7[%hS%w!bOr(}rs+usw(}wx(Rx#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(}8r,OX%q7[%hS%w!bOw+uwx,kx#O+u#O#P.]#P#o+u#o#p0d#p#q+u#q#r.q#r~+u8r,pX%q7[Ow+uwx-]x#O+u#O#P.]#P#o+u#o#p0d#p#q+u#q#r.q#r~+u8r-bX%q7[Ow+uwx-}x#O+u#O#P.]#P#o+u#o#p0d#p#q+u#q#r.q#r~+u7[.SR%q7[O#o-}#p#q-}#r~-}8r.bT%q7[O#o+u#o#p.q#p#q+u#q#r.q#r~+u!f.xV%hS%w!bOw.qwx/_x#O.q#O#P0^#P#o.q#o#p0d#p~.q!f/bVOw.qwx/wx#O.q#O#P0^#P#o.q#o#p0d#p~.q!f/zUOw.qx#O.q#O#P0^#P#o.q#o#p0d#p~.q!f0aPO~.q!f0iV%hSOw1Owx1dx#O1O#O#P2V#P#o1O#o#p.q#p~1OS1TT%hSOw1Owx1dx#O1O#O#P2V#P~1OS1gTOw1Owx1vx#O1O#O#P2V#P~1OS1ySOw1Ox#O1O#O#P2V#P~1OS2YPO~1O;p2bT%q7[O#o(}#o#p2q#p#q(}#q#r2q#r~(}%d2|X%hS%kW%w!b%y#tOr2qrs3isw2qwx5Px#O2q#O#P:R#P#o2q#o#p:X#p~2q%d3pX%hS%w!bOr2qrs4]sw2qwx5Px#O2q#O#P:R#P#o2q#o#p:X#p~2q%d4dX%hS%w!bOr2qrs.qsw2qwx5Px#O2q#O#P:R#P#o2q#o#p:X#p~2q%d5WX%kW%y#tOr2qrs3isw2qwx5sx#O2q#O#P:R#P#o2q#o#p:X#p~2q%d5zX%kW%y#tOr2qrs3isw2qwx6gx#O2q#O#P:R#P#o2q#o#p:X#p~2q#|6nV%kW%y#tOr6grs7Ts#O6g#O#P8S#P#o6g#o#p8Y#p~6g#|7WVOr6grs7ms#O6g#O#P8S#P#o6g#o#p8Y#p~6g#|7pUOr6gs#O6g#O#P8S#P#o6g#o#p8Y#p~6g#|8VPO~6g#|8_V%kWOr8trs9Ys#O8t#O#P9{#P#o8t#o#p6g#p~8tW8yT%kWOr8trs9Ys#O8t#O#P9{#P~8tW9]TOr8trs9ls#O8t#O#P9{#P~8tW9oSOr8ts#O8t#O#P9{#P~8tW:OPO~8t%d:UPO~2q%d:`X%hS%kWOr:{rs;isw:{wx<ox#O:{#O#P=u#P#o:{#o#p2q#p~:{[;SV%hS%kWOr:{rs;isw:{wx<ox#O:{#O#P=u#P~:{[;nV%hSOr:{rs<Tsw:{wx<ox#O:{#O#P=u#P~:{[<YV%hSOr:{rs1Osw:{wx<ox#O:{#O#P=u#P~:{[<tV%kWOr:{rs;isw:{wx=Zx#O:{#O#P=u#P~:{[=`V%kWOr:{rs;isw:{wx8tx#O:{#O#P=u#P~:{[=xPO~:{;p>UZ%q7[%kW%y#tOr(}rs)}sw(}wx>wx#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(}:Y?QX%q7[%kW%y#tOr>wrs?ms#O>w#O#PAP#P#o>w#o#p8Y#p#q>w#q#r6g#r~>w:Y?rX%q7[Or>wrs@_s#O>w#O#PAP#P#o>w#o#p8Y#p#q>w#q#r6g#r~>w:Y@dX%q7[Or>wrs-}s#O>w#O#PAP#P#o>w#o#p8Y#p#q>w#q#r6g#r~>w:YAUT%q7[O#o>w#o#p6g#p#q>w#q#r6g#r~>w<QAjT%q7[O#o'P#o#pAy#p#q'P#q#rAy#r~'P%tBWX%hS%kW%n`%w!b%y#tOrAyrsBsswAywx5Px#OAy#O#PEo#P#oAy#o#pEu#p~Ay%tB|X%hS%n`%w!bOrAyrsCiswAywx5Px#OAy#O#PEo#P#oAy#o#pEu#p~Ay%tCrX%hS%n`%w!bOrAyrsD_swAywx5Px#OAy#O#PEo#P#oAy#o#pEu#p~Ay!vDhV%hS%n`%w!bOwD_wx/_x#OD_#O#PD}#P#oD_#o#pET#p~D_!vEQPO~D_!vEYV%hSOw1Owx1dx#O1O#O#P2V#P#o1O#o#pD_#p~1O%tErPO~Ay%tE|X%hS%kWOr:{rs;isw:{wx<ox#O:{#O#P=u#P#o:{#o#pAy#p~:{<QFtZ%q7[%hS%n`%w!bOr'PrsGgsw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'P9SGrX%q7[%hS%n`%w!bOwGgwx,kx#OGg#O#PH_#P#oGg#o#pET#p#qGg#q#rD_#r~Gg9SHdT%q7[O#oGg#o#pD_#p#qGg#q#rD_#r~Gg<bIOZ%q7[%kW%tp%y#tOrIqrs)}swIqwx! wx#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~Iq<bJQZ%q7[%hS%kW%tp%w!b%y#tOrIqrs)}swIqwxHsx#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~Iq<bJxT%q7[O#oIq#o#pKX#p#qIq#q#rKX#r~Iq&UKfX%hS%kW%tp%w!b%y#tOrKXrs3iswKXwxLRx#OKX#O#PN}#P#oKX#o#p! T#p~KX&UL[X%kW%tp%y#tOrKXrs3iswKXwxLwx#OKX#O#PN}#P#oKX#o#p! T#p~KX&UMQX%kW%tp%y#tOrKXrs3iswKXwxMmx#OKX#O#PN}#P#oKX#o#p! T#p~KX$nMvV%kW%tp%y#tOrMmrs7Ts#OMm#O#PN]#P#oMm#o#pNc#p~Mm$nN`PO~Mm$nNhV%kWOr8trs9Ys#O8t#O#P9{#P#o8t#o#pMm#p~8t&U! QPO~KX&U! [X%hS%kWOr:{rs;isw:{wx<ox#O:{#O#P=u#P#o:{#o#pKX#p~:{<b!!SZ%q7[%kW%tp%y#tOrIqrs)}swIqwx!!ux#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~Iq:z!#QX%q7[%kW%tp%y#tOr!!urs?ms#O!!u#O#P!#m#P#o!!u#o#pNc#p#q!!u#q#rMm#r~!!u:z!#rT%q7[O#o!!u#o#pMm#p#q!!u#q#rMm#r~!!u<r!$WT%q7[O#o$}#o#p!$g#p#q$}#q#r!$g#r~$}&f!$vX%hS%kW%n`%tp%w!b%y#tOr!$grsBssw!$gwxLRx#O!$g#O#P!%c#P#o!$g#o#p!%i#p~!$g&f!%fPO~!$g&f!%pX%hS%kWOr:{rs;isw:{wx<ox#O:{#O#P=u#P#o:{#o#p!$g#p~:{Mg!&pa%q7[%hS%kW$o1s%n`%tp%w!b%y#tOX$}XY!&]Y[$}[]!&]]p$}pq!&]qr$}rs&Rsw$}wxHsx#O$}#O#P!'u#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Mg!'zX%q7[OY$}YZ!&]Z]$}]^!&]^#o$}#o#p!$g#p#q$}#q#r!$g#r~$}<u!(xb%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`!*Q!`#O$}#O#P!$R#P#T$}#T#U!+W#U#f$}#f#g!+W#g#h!+W#h#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u!*eZkR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u!+kZ!jR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{!,m_%up%q7[%hS%f,X%n`%w!bOY!-lYZ'PZ]!-l]^'P^r!-lrs!G^sw!-lwx!/|x#O!-l#O#P!Cp#P#o!-l#o#p!F[#p#q!-l#q#r!DU#r~!-lGZ!-}_%q7[%hS%kW%f,X%n`%w!b%y#tOY!-lYZ'PZ]!-l]^'P^r!-lrs!.|sw!-lwx!/|x#O!-l#O#P!Cp#P#o!-l#o#p!F[#p#q!-l#q#r!DU#r~!-lGZ!/ZZ%q7[%hS%f,X%n`%w!bOr'PrsFisw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'PFy!0X_%q7[%kW%f,X%y#tOY!1WYZ(}Z]!1W]^(}^r!1Wrs!2fsw!1Wwx!@Yx#O!1W#O#P!3d#P#o!1W#o#p!;t#p#q!1W#q#r!3x#r~!1WFy!1g_%q7[%hS%kW%f,X%w!b%y#tOY!1WYZ(}Z]!1W]^(}^r!1Wrs!2fsw!1Wwx!/|x#O!1W#O#P!3d#P#o!1W#o#p!;t#p#q!1W#q#r!3x#r~!1WFy!2qZ%q7[%hS%f,X%w!bOr(}rs*ysw(}wx(Rx#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(}Fy!3iT%q7[O#o!1W#o#p!3x#p#q!1W#q#r!3x#r~!1W0m!4V]%hS%kW%f,X%w!b%y#tOY!3xYZ2qZ]!3x]^2q^r!3xrs!5Osw!3xwx!5tx#O!3x#O#P!;n#P#o!3x#o#p!;t#p~!3x0m!5XX%hS%f,X%w!bOr2qrs4]sw2qwx5Px#O2q#O#P:R#P#o2q#o#p:X#p~2q0m!5}]%kW%f,X%y#tOY!3xYZ2qZ]!3x]^2q^r!3xrs!5Osw!3xwx!6vx#O!3x#O#P!;n#P#o!3x#o#p!;t#p~!3x0m!7P]%kW%f,X%y#tOY!3xYZ2qZ]!3x]^2q^r!3xrs!5Osw!3xwx!7xx#O!3x#O#P!;n#P#o!3x#o#p!;t#p~!3x/V!8RZ%kW%f,X%y#tOY!7xYZ6gZ]!7x]^6g^r!7xrs!8ts#O!7x#O#P!9`#P#o!7x#o#p!9f#p~!7x/V!8yV%f,XOr6grs7ms#O6g#O#P8S#P#o6g#o#p8Y#p~6g/V!9cPO~!7x/V!9mZ%kW%f,XOY!:`YZ8tZ]!:`]^8t^r!:`rs!;Ss#O!:`#O#P!;h#P#o!:`#o#p!7x#p~!:`,a!:gX%kW%f,XOY!:`YZ8tZ]!:`]^8t^r!:`rs!;Ss#O!:`#O#P!;h#P~!:`,a!;XT%f,XOr8trs9ls#O8t#O#P9{#P~8t,a!;kPO~!:`0m!;qPO~!3x0m!;}]%hS%kW%f,XOY!<vYZ:{Z]!<v]^:{^r!<vrs!=rsw!<vwx!>`x#O!<v#O#P!@S#P#o!<v#o#p!3x#p~!<v,e!=PZ%hS%kW%f,XOY!<vYZ:{Z]!<v]^:{^r!<vrs!=rsw!<vwx!>`x#O!<v#O#P!@S#P~!<v,e!=yV%hS%f,XOr:{rs<Tsw:{wx<ox#O:{#O#P=u#P~:{,e!>gZ%kW%f,XOY!<vYZ:{Z]!<v]^:{^r!<vrs!=rsw!<vwx!?Yx#O!<v#O#P!@S#P~!<v,e!?aZ%kW%f,XOY!<vYZ:{Z]!<v]^:{^r!<vrs!=rsw!<vwx!:`x#O!<v#O#P!@S#P~!<v,e!@VPO~!<vFy!@e_%q7[%kW%f,X%y#tOY!1WYZ(}Z]!1W]^(}^r!1Wrs!2fsw!1Wwx!Adx#O!1W#O#P!3d#P#o!1W#o#p!;t#p#q!1W#q#r!3x#r~!1WEc!Ao]%q7[%kW%f,X%y#tOY!AdYZ>wZ]!Ad]^>w^r!Adrs!Bhs#O!Ad#O#P!C[#P#o!Ad#o#p!9f#p#q!Ad#q#r!7x#r~!AdEc!BoX%q7[%f,XOr>wrs@_s#O>w#O#PAP#P#o>w#o#p8Y#p#q>w#q#r6g#r~>wEc!CaT%q7[O#o!Ad#o#p!7x#p#q!Ad#q#r!7x#r~!AdGZ!CuT%q7[O#o!-l#o#p!DU#p#q!-l#q#r!DU#r~!-l0}!De]%hS%kW%f,X%n`%w!b%y#tOY!DUYZAyZ]!DU]^Ay^r!DUrs!E^sw!DUwx!5tx#O!DU#O#P!FU#P#o!DU#o#p!F[#p~!DU0}!EiX%hS%f,X%n`%w!bOrAyrsCiswAywx5Px#OAy#O#PEo#P#oAy#o#pEu#p~Ay0}!FXPO~!DU0}!Fe]%hS%kW%f,XOY!<vYZ:{Z]!<v]^:{^r!<vrs!=rsw!<vwx!>`x#O!<v#O#P!@S#P#o!<v#o#p!DU#p~!<vGZ!GkZ%q7[%hS%f,X%n`%w!bOr'Prs!H^sw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'PGZ!HmX%l#|%q7[%hS%j,X%n`%w!bOwGgwx,kx#OGg#O#PH_#P#oGg#o#pET#p#qGg#q#rD_#r~GgMg!Im_Q1s%q7[%hS%kW%n`%tp%w!b%y#tOY!IYYZ$}Z]!IY]^$}^r!IYrs!Jlsw!IYwx$$[x#O!IY#O#P$1v#P#o!IY#o#p$4Y#p#q!IY#q#r$2j#r~!IYLu!Jy_Q1s%q7[%hS%n`%w!bOY!KxYZ'PZ]!Kx]^'P^r!Kxrs$ Usw!Kxwx!MYx#O!Kx#O#P#G^#P#o!Kx#o#p#NS#p#q!Kx#q#r#HQ#r~!KxLu!LZ_Q1s%q7[%hS%kW%n`%w!b%y#tOY!KxYZ'PZ]!Kx]^'P^r!Kxrs!Jlsw!Kxwx!MYx#O!Kx#O#P#G^#P#o!Kx#o#p#NS#p#q!Kx#q#r#HQ#r~!KxLe!Me_Q1s%q7[%kW%y#tOY!NdYZ(}Z]!Nd]^(}^r!Ndrs# rsw!Ndwx#B[x#O!Nd#O#P#/f#P#o!Nd#o#p#<b#p#q!Nd#q#r#0Y#r~!NdLe!Ns_Q1s%q7[%hS%kW%w!b%y#tOY!NdYZ(}Z]!Nd]^(}^r!Ndrs# rsw!Ndwx!MYx#O!Nd#O#P#/f#P#o!Nd#o#p#<b#p#q!Nd#q#r#0Y#r~!NdLe# }_Q1s%q7[%hS%w!bOY!NdYZ(}Z]!Nd]^(}^r!Ndrs#!|sw!Ndwx!MYx#O!Nd#O#P#/f#P#o!Nd#o#p#<b#p#q!Nd#q#r#0Y#r~!NdLe##X_Q1s%q7[%hS%w!bOY!NdYZ(}Z]!Nd]^(}^r!Ndrs#$Wsw!Ndwx!MYx#O!Nd#O#P#/f#P#o!Nd#o#p#<b#p#q!Nd#q#r#0Y#r~!NdIg#$c]Q1s%q7[%hS%w!bOY#$WYZ+uZ]#$W]^+u^w#$Wwx#%[x#O#$W#O#P#(^#P#o#$W#o#p#,Q#p#q#$W#q#r#)Q#r~#$WIg#%c]Q1s%q7[OY#$WYZ+uZ]#$W]^+u^w#$Wwx#&[x#O#$W#O#P#(^#P#o#$W#o#p#,Q#p#q#$W#q#r#)Q#r~#$WIg#&c]Q1s%q7[OY#$WYZ+uZ]#$W]^+u^w#$Wwx#'[x#O#$W#O#P#(^#P#o#$W#o#p#,Q#p#q#$W#q#r#)Q#r~#$WHP#'cXQ1s%q7[OY#'[YZ-}Z]#'[]^-}^#o#'[#o#p#(O#p#q#'[#q#r#(O#r~#'[1s#(TRQ1sOY#(OZ]#(O^~#(OIg#(eXQ1s%q7[OY#$WYZ+uZ]#$W]^+u^#o#$W#o#p#)Q#p#q#$W#q#r#)Q#r~#$W3Z#)ZZQ1s%hS%w!bOY#)QYZ.qZ]#)Q]^.q^w#)Qwx#)|x#O#)Q#O#P#+l#P#o#)Q#o#p#,Q#p~#)Q3Z#*RZQ1sOY#)QYZ.qZ]#)Q]^.q^w#)Qwx#*tx#O#)Q#O#P#+l#P#o#)Q#o#p#,Q#p~#)Q3Z#*yZQ1sOY#)QYZ.qZ]#)Q]^.q^w#)Qwx#(Ox#O#)Q#O#P#+l#P#o#)Q#o#p#,Q#p~#)Q3Z#+qTQ1sOY#)QYZ.qZ]#)Q]^.q^~#)Q3Z#,XZQ1s%hSOY#,zYZ1OZ]#,z]^1O^w#,zwx#-nx#O#,z#O#P#/Q#P#o#,z#o#p#)Q#p~#,z1w#-RXQ1s%hSOY#,zYZ1OZ]#,z]^1O^w#,zwx#-nx#O#,z#O#P#/Q#P~#,z1w#-sXQ1sOY#,zYZ1OZ]#,z]^1O^w#,zwx#.`x#O#,z#O#P#/Q#P~#,z1w#.eXQ1sOY#,zYZ1OZ]#,z]^1O^w#,zwx#(Ox#O#,z#O#P#/Q#P~#,z1w#/VTQ1sOY#,zYZ1OZ]#,z]^1O^~#,zLe#/mXQ1s%q7[OY!NdYZ(}Z]!Nd]^(}^#o!Nd#o#p#0Y#p#q!Nd#q#r#0Y#r~!Nd6X#0g]Q1s%hS%kW%w!b%y#tOY#0YYZ2qZ]#0Y]^2q^r#0Yrs#1`sw#0Ywx#3dx#O#0Y#O#P#;|#P#o#0Y#o#p#<b#p~#0Y6X#1i]Q1s%hS%w!bOY#0YYZ2qZ]#0Y]^2q^r#0Yrs#2bsw#0Ywx#3dx#O#0Y#O#P#;|#P#o#0Y#o#p#<b#p~#0Y6X#2k]Q1s%hS%w!bOY#0YYZ2qZ]#0Y]^2q^r#0Yrs#)Qsw#0Ywx#3dx#O#0Y#O#P#;|#P#o#0Y#o#p#<b#p~#0Y6X#3m]Q1s%kW%y#tOY#0YYZ2qZ]#0Y]^2q^r#0Yrs#1`sw#0Ywx#4fx#O#0Y#O#P#;|#P#o#0Y#o#p#<b#p~#0Y6X#4o]Q1s%kW%y#tOY#0YYZ2qZ]#0Y]^2q^r#0Yrs#1`sw#0Ywx#5hx#O#0Y#O#P#;|#P#o#0Y#o#p#<b#p~#0Y4q#5qZQ1s%kW%y#tOY#5hYZ6gZ]#5h]^6g^r#5hrs#6ds#O#5h#O#P#8S#P#o#5h#o#p#8h#p~#5h4q#6iZQ1sOY#5hYZ6gZ]#5h]^6g^r#5hrs#7[s#O#5h#O#P#8S#P#o#5h#o#p#8h#p~#5h4q#7aZQ1sOY#5hYZ6gZ]#5h]^6g^r#5hrs#(Os#O#5h#O#P#8S#P#o#5h#o#p#8h#p~#5h4q#8XTQ1sOY#5hYZ6gZ]#5h]^6g^~#5h4q#8oZQ1s%kWOY#9bYZ8tZ]#9b]^8t^r#9brs#:Us#O#9b#O#P#;h#P#o#9b#o#p#5h#p~#9b1{#9iXQ1s%kWOY#9bYZ8tZ]#9b]^8t^r#9brs#:Us#O#9b#O#P#;h#P~#9b1{#:ZXQ1sOY#9bYZ8tZ]#9b]^8t^r#9brs#:vs#O#9b#O#P#;h#P~#9b1{#:{XQ1sOY#9bYZ8tZ]#9b]^8t^r#9brs#(Os#O#9b#O#P#;h#P~#9b1{#;mTQ1sOY#9bYZ8tZ]#9b]^8t^~#9b6X#<RTQ1sOY#0YYZ2qZ]#0Y]^2q^~#0Y6X#<k]Q1s%hS%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@Sx#O#=d#O#P#Av#P#o#=d#o#p#0Y#p~#=d2P#=mZQ1s%hS%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@Sx#O#=d#O#P#Av#P~#=d2P#>gZQ1s%hSOY#=dYZ:{Z]#=d]^:{^r#=drs#?Ysw#=dwx#@Sx#O#=d#O#P#Av#P~#=d2P#?aZQ1s%hSOY#=dYZ:{Z]#=d]^:{^r#=drs#,zsw#=dwx#@Sx#O#=d#O#P#Av#P~#=d2P#@ZZQ1s%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@|x#O#=d#O#P#Av#P~#=d2P#ATZQ1s%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#9bx#O#=d#O#P#Av#P~#=d2P#A{TQ1sOY#=dYZ:{Z]#=d]^:{^~#=dLe#Bg_Q1s%q7[%kW%y#tOY!NdYZ(}Z]!Nd]^(}^r!Ndrs# rsw!Ndwx#Cfx#O!Nd#O#P#/f#P#o!Nd#o#p#<b#p#q!Nd#q#r#0Y#r~!NdJ}#Cq]Q1s%q7[%kW%y#tOY#CfYZ>wZ]#Cf]^>w^r#Cfrs#Djs#O#Cf#O#P#Fj#P#o#Cf#o#p#8h#p#q#Cf#q#r#5h#r~#CfJ}#Dq]Q1s%q7[OY#CfYZ>wZ]#Cf]^>w^r#Cfrs#Ejs#O#Cf#O#P#Fj#P#o#Cf#o#p#8h#p#q#Cf#q#r#5h#r~#CfJ}#Eq]Q1s%q7[OY#CfYZ>wZ]#Cf]^>w^r#Cfrs#'[s#O#Cf#O#P#Fj#P#o#Cf#o#p#8h#p#q#Cf#q#r#5h#r~#CfJ}#FqXQ1s%q7[OY#CfYZ>wZ]#Cf]^>w^#o#Cf#o#p#5h#p#q#Cf#q#r#5h#r~#CfLu#GeXQ1s%q7[OY!KxYZ'PZ]!Kx]^'P^#o!Kx#o#p#HQ#p#q!Kx#q#r#HQ#r~!Kx6i#Ha]Q1s%hS%kW%n`%w!b%y#tOY#HQYZAyZ]#HQ]^Ay^r#HQrs#IYsw#HQwx#3dx#O#HQ#O#P#Mn#P#o#HQ#o#p#NS#p~#HQ6i#Ie]Q1s%hS%n`%w!bOY#HQYZAyZ]#HQ]^Ay^r#HQrs#J^sw#HQwx#3dx#O#HQ#O#P#Mn#P#o#HQ#o#p#NS#p~#HQ6i#Ji]Q1s%hS%n`%w!bOY#HQYZAyZ]#HQ]^Ay^r#HQrs#Kbsw#HQwx#3dx#O#HQ#O#P#Mn#P#o#HQ#o#p#NS#p~#HQ3k#KmZQ1s%hS%n`%w!bOY#KbYZD_Z]#Kb]^D_^w#Kbwx#)|x#O#Kb#O#P#L`#P#o#Kb#o#p#Lt#p~#Kb3k#LeTQ1sOY#KbYZD_Z]#Kb]^D_^~#Kb3k#L{ZQ1s%hSOY#,zYZ1OZ]#,z]^1O^w#,zwx#-nx#O#,z#O#P#/Q#P#o#,z#o#p#Kb#p~#,z6i#MsTQ1sOY#HQYZAyZ]#HQ]^Ay^~#HQ6i#N]]Q1s%hS%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@Sx#O#=d#O#P#Av#P#o#=d#o#p#HQ#p~#=dLu$ c_Q1s%q7[%hS%n`%w!bOY!KxYZ'PZ]!Kx]^'P^r!Kxrs$!bsw!Kxwx!MYx#O!Kx#O#P#G^#P#o!Kx#o#p#NS#p#q!Kx#q#r#HQ#r~!KxIw$!o]Q1s%q7[%hS%n`%w!bOY$!bYZGgZ]$!b]^Gg^w$!bwx#%[x#O$!b#O#P$#h#P#o$!b#o#p#Lt#p#q$!b#q#r#Kb#r~$!bIw$#oXQ1s%q7[OY$!bYZGgZ]$!b]^Gg^#o$!b#o#p#Kb#p#q$!b#q#r#Kb#r~$!bMV$$i_Q1s%q7[%kW%tp%y#tOY$%hYZIqZ]$%h]^Iq^r$%hrs# rsw$%hwx$.px#O$%h#O#P$&x#P#o$%h#o#p$-n#p#q$%h#q#r$'l#r~$%hMV$%y_Q1s%q7[%hS%kW%tp%w!b%y#tOY$%hYZIqZ]$%h]^Iq^r$%hrs# rsw$%hwx$$[x#O$%h#O#P$&x#P#o$%h#o#p$-n#p#q$%h#q#r$'l#r~$%hMV$'PXQ1s%q7[OY$%hYZIqZ]$%h]^Iq^#o$%h#o#p$'l#p#q$%h#q#r$'l#r~$%h6y$'{]Q1s%hS%kW%tp%w!b%y#tOY$'lYZKXZ]$'l]^KX^r$'lrs#1`sw$'lwx$(tx#O$'l#O#P$-Y#P#o$'l#o#p$-n#p~$'l6y$)P]Q1s%kW%tp%y#tOY$'lYZKXZ]$'l]^KX^r$'lrs#1`sw$'lwx$)xx#O$'l#O#P$-Y#P#o$'l#o#p$-n#p~$'l6y$*T]Q1s%kW%tp%y#tOY$'lYZKXZ]$'l]^KX^r$'lrs#1`sw$'lwx$*|x#O$'l#O#P$-Y#P#o$'l#o#p$-n#p~$'l5c$+XZQ1s%kW%tp%y#tOY$*|YZMmZ]$*|]^Mm^r$*|rs#6ds#O$*|#O#P$+z#P#o$*|#o#p$,`#p~$*|5c$,PTQ1sOY$*|YZMmZ]$*|]^Mm^~$*|5c$,gZQ1s%kWOY#9bYZ8tZ]#9b]^8t^r#9brs#:Us#O#9b#O#P#;h#P#o#9b#o#p$*|#p~#9b6y$-_TQ1sOY$'lYZKXZ]$'l]^KX^~$'l6y$-w]Q1s%hS%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@Sx#O#=d#O#P#Av#P#o#=d#o#p$'l#p~#=dMV$.}_Q1s%q7[%kW%tp%y#tOY$%hYZIqZ]$%h]^Iq^r$%hrs# rsw$%hwx$/|x#O$%h#O#P$&x#P#o$%h#o#p$-n#p#q$%h#q#r$'l#r~$%hKo$0Z]Q1s%q7[%kW%tp%y#tOY$/|YZ!!uZ]$/|]^!!u^r$/|rs#Djs#O$/|#O#P$1S#P#o$/|#o#p$,`#p#q$/|#q#r$*|#r~$/|Ko$1ZXQ1s%q7[OY$/|YZ!!uZ]$/|]^!!u^#o$/|#o#p$*|#p#q$/|#q#r$*|#r~$/|Mg$1}XQ1s%q7[OY!IYYZ$}Z]!IY]^$}^#o!IY#o#p$2j#p#q!IY#q#r$2j#r~!IY7Z$2{]Q1s%hS%kW%n`%tp%w!b%y#tOY$2jYZ!$gZ]$2j]^!$g^r$2jrs#IYsw$2jwx$(tx#O$2j#O#P$3t#P#o$2j#o#p$4Y#p~$2j7Z$3yTQ1sOY$2jYZ!$gZ]$2j]^!$g^~$2j7Z$4c]Q1s%hS%kWOY#=dYZ:{Z]#=d]^:{^r#=drs#>`sw#=dwx#@Sx#O#=d#O#P#Av#P#o#=d#o#p$2j#p~#=dGz$5o]$}Q%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz$6{Z!s,W%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz$8R]$wQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{$9Z_%r`%q7[%kW%f,X%tp%y#tOY$:YYZIqZ]$:Y]^Iq^r$:Yrs$;jsw$:Ywx%%zx#O$:Y#O#P%!^#P#o$:Y#o#p%$x#p#q$:Y#q#r%!r#r~$:YGk$:k_%q7[%hS%kW%f,X%tp%w!b%y#tOY$:YYZIqZ]$:Y]^Iq^r$:Yrs$;jsw$:Ywx% ^x#O$:Y#O#P%!^#P#o$:Y#o#p%$x#p#q$:Y#q#r%!r#r~$:YFy$;u_%q7[%hS%f,X%w!bOY$<tYZ(}Z]$<t]^(}^r$<trs$Kvsw$<twx$>Sx#O$<t#O#P$?Q#P#o$<t#o#p$Gb#p#q$<t#q#r$?f#r~$<tFy$=T_%q7[%hS%kW%f,X%w!b%y#tOY$<tYZ(}Z]$<t]^(}^r$<trs$;jsw$<twx$>Sx#O$<t#O#P$?Q#P#o$<t#o#p$Gb#p#q$<t#q#r$?f#r~$<tFy$>_Z%q7[%kW%f,X%y#tOr(}rs)}sw(}wx={x#O(}#O#P2]#P#o(}#o#p:X#p#q(}#q#r2q#r~(}Fy$?VT%q7[O#o$<t#o#p$?f#p#q$<t#q#r$?f#r~$<t0m$?s]%hS%kW%f,X%w!b%y#tOY$?fYZ2qZ]$?f]^2q^r$?frs$@lsw$?fwx$Ffx#O$?f#O#P$G[#P#o$?f#o#p$Gb#p~$?f0m$@u]%hS%f,X%w!bOY$?fYZ2qZ]$?f]^2q^r$?frs$Answ$?fwx$Ffx#O$?f#O#P$G[#P#o$?f#o#p$Gb#p~$?f0m$Aw]%hS%f,X%w!bOY$?fYZ2qZ]$?f]^2q^r$?frs$Bpsw$?fwx$Ffx#O$?f#O#P$G[#P#o$?f#o#p$Gb#p~$?f-o$ByZ%hS%f,X%w!bOY$BpYZ.qZ]$Bp]^.q^w$Bpwx$Clx#O$Bp#O#P$DW#P#o$Bp#o#p$D^#p~$Bp-o$CqV%f,XOw.qwx/wx#O.q#O#P0^#P#o.q#o#p0d#p~.q-o$DZPO~$Bp-o$DeZ%hS%f,XOY$EWYZ1OZ]$EW]^1O^w$EWwx$Ezx#O$EW#O#P$F`#P#o$EW#o#p$Bp#p~$EW,]$E_X%hS%f,XOY$EWYZ1OZ]$EW]^1O^w$EWwx$Ezx#O$EW#O#P$F`#P~$EW,]$FPT%f,XOw1Owx1vx#O1O#O#P2V#P~1O,]$FcPO~$EW0m$FoX%kW%f,X%y#tOr2qrs3isw2qwx5sx#O2q#O#P:R#P#o2q#o#p:X#p~2q0m$G_PO~$?f0m$Gk]%hS%kW%f,XOY$HdYZ:{Z]$Hd]^:{^r$Hdrs$I`sw$Hdwx$KSx#O$Hd#O#P$Kp#P#o$Hd#o#p$?f#p~$Hd,e$HmZ%hS%kW%f,XOY$HdYZ:{Z]$Hd]^:{^r$Hdrs$I`sw$Hdwx$KSx#O$Hd#O#P$Kp#P~$Hd,e$IgZ%hS%f,XOY$HdYZ:{Z]$Hd]^:{^r$Hdrs$JYsw$Hdwx$KSx#O$Hd#O#P$Kp#P~$Hd,e$JaZ%hS%f,XOY$HdYZ:{Z]$Hd]^:{^r$Hdrs$EWsw$Hdwx$KSx#O$Hd#O#P$Kp#P~$Hd,e$KZV%kW%f,XOr:{rs;isw:{wx=Zx#O:{#O#P=u#P~:{,e$KsPO~$HdFy$LR_%q7[%hS%f,X%w!bOY$<tYZ(}Z]$<t]^(}^r$<trs$MQsw$<twx$>Sx#O$<t#O#P$?Q#P#o$<t#o#p$Gb#p#q$<t#q#r$?f#r~$<tC{$M]]%q7[%hS%f,X%w!bOY$MQYZ+uZ]$MQ]^+u^w$MQwx$NUx#O$MQ#O#P$Nx#P#o$MQ#o#p$D^#p#q$MQ#q#r$Bp#r~$MQC{$N]X%q7[%f,XOw+uwx-]x#O+u#O#P.]#P#o+u#o#p0d#p#q+u#q#r.q#r~+uC{$N}T%q7[O#o$MQ#o#p$Bp#p#q$MQ#q#r$Bp#r~$MQGk% kZ%q7[%kW%f,X%tp%y#tOrIqrs)}swIqwx! wx#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~IqGk%!cT%q7[O#o$:Y#o#p%!r#p#q$:Y#q#r%!r#r~$:Y1_%#R]%hS%kW%f,X%tp%w!b%y#tOY%!rYZKXZ]%!r]^KX^r%!rrs$@lsw%!rwx%#zx#O%!r#O#P%$r#P#o%!r#o#p%$x#p~%!r1_%$VX%kW%f,X%tp%y#tOrKXrs3iswKXwxLwx#OKX#O#PN}#P#oKX#o#p! T#p~KX1_%$uPO~%!r1_%%R]%hS%kW%f,XOY$HdYZ:{Z]$Hd]^:{^r$Hdrs$I`sw$Hdwx$KSx#O$Hd#O#P$Kp#P#o$Hd#o#p%!r#p~$HdGk%&XZ%q7[%kW%f,X%tp%y#tOrIqrs)}swIqwx%&zx#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~IqGk%'ZX%i!f%q7[%kW%g,X%tp%y#tOr!!urs?ms#O!!u#O#P!#m#P#o!!u#o#pNc#p#q!!u#q#rMm#r~!!uG{%(ZZf,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u%)aZeR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%*g_T,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsxz$}z{%+f{!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%+y]_R%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%-V]$z,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u%.cZxR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Mg%/i^${,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`!a%0e!a#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}B^%0xZ&U&j%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%2O_!dQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!O$}!O!P%2}!P!Q$}!Q![%5_![#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%3`]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!O$}!O!P%4X!P#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%4lZ!m,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%5rg!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%5_![!g$}!g!h%7Z!h!l$}!l!m%;k!m#O$}#O#P!$R#P#R$}#R#S%5_#S#X$}#X#Y%7Z#Y#^$}#^#_%;k#_#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%7la%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx{$}{|%8q|}$}}!O%8q!O!Q$}!Q![%9{![#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%9S]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%9{![#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%:`c!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%9{![!l$}!l!m%;k!m#O$}#O#P!$R#P#R$}#R#S%9{#S#^$}#^#_%;k#_#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%<OZ!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{%=U_$|R%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!P$}!P!Q%>T!Q!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz%>h]%OQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%?tu!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!O$}!O!P%BX!P!Q$}!Q![%Cc![!d$}!d!e%Ee!e!g$}!g!h%7Z!h!l$}!l!m%;k!m!q$}!q!r%H_!r!z$}!z!{%KR!{#O$}#O#P!$R#P#R$}#R#S%Cc#S#U$}#U#V%Ee#V#X$}#X#Y%7Z#Y#^$}#^#_%;k#_#c$}#c#d%H_#d#l$}#l#m%KR#m#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%Bj]%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%5_![#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%Cvi!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!O$}!O!P%BX!P!Q$}!Q![%Cc![!g$}!g!h%7Z!h!l$}!l!m%;k!m#O$}#O#P!$R#P#R$}#R#S%Cc#S#X$}#X#Y%7Z#Y#^$}#^#_%;k#_#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%Ev`%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q!R%Fx!R!S%Fx!S#O$}#O#P!$R#P#R$}#R#S%Fx#S#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%G]`!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q!R%Fx!R!S%Fx!S#O$}#O#P!$R#P#R$}#R#S%Fx#S#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%Hp_%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q!Y%Io!Y#O$}#O#P!$R#P#R$}#R#S%Io#S#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%JS_!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q!Y%Io!Y#O$}#O#P!$R#P#R$}#R#S%Io#S#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%Kdc%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%Lo![!c$}!c!i%Lo!i#O$}#O#P!$R#P#R$}#R#S%Lo#S#T$}#T#Z%Lo#Z#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy%MSc!f,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!Q$}!Q![%Lo![!c$}!c!i%Lo!i#O$}#O#P!$R#P#R$}#R#S%Lo#S#T$}#T#Z%Lo#Z#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Mg%Nr]y1s%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`& k!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u&!OZ%WR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{&#UZ#^,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{&$[_kR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!^$}!^!_&%Z!_!`!*Q!`!a!*Q!a#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz&%n]$xQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{&&z]%V,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`!*Q!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{&(W^kR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`!*Q!`!a&)S!a#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz&)g]$yQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}G{&*u]]Q#tP%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Mg&,Tc%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&Rsw$}wxHsx!Q$}!Q![&+n![!c$}!c!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nMg&-ug%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&/^sw$}wx&2dx!Q$}!Q![&+n![!c$}!c!t&+n!t!u&5j!u!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#f&+n#f#g&5j#g#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nGZ&/k_%q7[%hS%f,X%n`%w!bOY!-lYZ'PZ]!-l]^'P^r!-lrs&0jsw!-lwx!/|x#O!-l#O#P!Cp#P#o!-l#o#p!F[#p#q!-l#q#r!DU#r~!-lGZ&0wZ%q7[%hS%f,X%n`%w!bOr'Prs&1jsw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'PD]&1wX%q7[%hS%j,X%n`%w!bOwGgwx,kx#OGg#O#PH_#P#oGg#o#pET#p#qGg#q#rD_#r~GgGk&2q_%q7[%kW%f,X%tp%y#tOY$:YYZIqZ]$:Y]^Iq^r$:Yrs$;jsw$:Ywx&3px#O$:Y#O#P%!^#P#o$:Y#o#p%$x#p#q$:Y#q#r%!r#r~$:YGk&3}Z%q7[%kW%f,X%tp%y#tOrIqrs)}swIqwx&4px#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~IqFT&4}X%q7[%kW%g,X%tp%y#tOr!!urs?ms#O!!u#O#P!#m#P#o!!u#o#pNc#p#q!!u#q#rMm#r~!!uMg&6Pc%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&/^sw$}wx&2dx!Q$}!Q![&+n![!c$}!c!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nMg&7qg%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&9Ysw$}wx&<Qx!Q$}!Q![&+n![!c$}!c!t&+n!t!u&>x!u!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#f&+n#f#g&>x#g#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nGZ&9gZ%q7[%hS%n`%w!b%s,XOr'Prs&:Ysw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'PGZ&:eZ%q7[%hS%n`%w!bOr'Prs&;Wsw'Pwx(Rx#O'P#O#PAe#P#o'P#o#pEu#p#q'P#q#rAy#r~'PD]&;eX%q7[%hS%x,X%n`%w!bOwGgwx,kx#OGg#O#PH_#P#oGg#o#pET#p#qGg#q#rD_#r~GgGk&<_Z%q7[%kW%tp%y#t%m,XOrIqrs)}swIqwx&=Qx#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~IqGk&=]Z%q7[%kW%tp%y#tOrIqrs)}swIqwx&>Ox#OIq#O#PJs#P#oIq#o#p! T#p#qIq#q#rKX#r~IqFT&>]X%q7[%kW%v,X%tp%y#tOr!!urs?ms#O!!u#O#P!#m#P#o!!u#o#pNc#p#q!!u#q#rMm#r~!!uMg&?_c%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&9Ysw$}wx&<Qx!Q$}!Q![&+n![!c$}!c!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nMg&APk%q7[%hS%kW%e&j%n`%tp%w!b%y#t%Q,XOr$}rs&/^sw$}wx&2dx!Q$}!Q![&+n![!c$}!c!h&+n!h!i&>x!i!t&+n!t!u&5j!u!}&+n!}#O$}#O#P!$R#P#R$}#R#S&+n#S#T$}#T#U&+n#U#V&5j#V#Y&+n#Y#Z&>x#Z#o&+n#o#p!%i#p#q$}#q#r!$g#r$g$}$g~&+nG{&CXZ!V,X%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u&D_Z!UR%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gz&Ee]$vQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}Gy&FgX%hS%kW!ZGmOr:{rs;isw:{wx<ox#O:{#O#P=u#P#o:{#o#p!$g#p~:{Gz&Gg]$uQ%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx!_$}!_!`$6h!`#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}<u&HqX!Y7_%hS%kW%n`%tp%w!b%y#tOr!$grsBssw!$gwxLRx#O!$g#O#P!%c#P#o!$g#o#p!%i#p~!$gGy&IqZ%P,V%q7[%hS%kW%n`%tp%w!b%y#tOr$}rs&Rsw$}wxHsx#O$}#O#P!$R#P#o$}#o#p!%i#p#q$}#q#r!$g#r~$}",tokenizers:[h,o,0,1,2,3,4,5,6,7,8,9,10,i],topRules:{Script:[0,3]},specialized:[{term:186,get:e=>c[e]||-1}],tokenPrec:6584});t.parser=$}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var a=t[s]={exports:{}};return e[s].call(a.exports,a,a.exports,r),a.exports}(()=>{const e=r(99),t=r(740),s=r(591),n=r(752);function a(e,t,r){console.log("Logging from WASM: ",t);const n=document.createElement("pre");return document.getElementById("output").appendChild(n),n.innerText=function(e,t,r){switch(e.tag){case"number":return(0,s.load_bignum)(t,r).toString();case"bool":return t?"True":"False";case"none":return"None";case"class":return e.name}}(e,t,r),t}document.addEventListener("DOMContentLoaded",(async function(){const r=new WebAssembly.Memory({initial:10,maximum:100}),i=await fetch("memory.wasm").then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,{js:{mem:r}})));var o={imports:{assert_not_none:e=>function(e){if(0===e)throw new Error("RUNTIME ERROR: cannot perform operation on none");return e}(e),print_num:e=>a(s.NUM,e,i.instance.exports.load),print_bool:e=>a(s.BOOL,e,null),print_none:e=>a(s.NONE,e,null),abs:e=>(0,s.builtin_bignum)([e],s.bigMath.abs,i.instance.exports),min:(e,t)=>(0,s.builtin_bignum)([e,t],s.bigMath.min,i.instance.exports),max:(e,t)=>(0,s.builtin_bignum)([e,t],s.bigMath.max,i.instance.exports),pow:(e,t)=>(0,s.builtin_bignum)([e,t],s.bigMath.pow,i.instance.exports),$add:(e,t)=>(0,s.binop_bignum)([e,t],s.bigMath.add,i.instance.exports),$sub:(e,t)=>(0,s.binop_bignum)([e,t],s.bigMath.sub,i.instance.exports),$mul:(e,t)=>(0,s.binop_bignum)([e,t],s.bigMath.mul,i.instance.exports),$div:(e,t)=>(0,s.binop_bignum)([e,t],s.bigMath.div,i.instance.exports),$mod:(e,t)=>(0,s.binop_bignum)([e,t],s.bigMath.mod,i.instance.exports),$eq:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.eq,i.instance.exports),$neq:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.neq,i.instance.exports),$lte:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.lte,i.instance.exports),$gte:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.gte,i.instance.exports),$lt:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.lt,i.instance.exports),$gt:(e,t)=>(0,s.binop_comp_bignum)([e,t],s.bigMath.gt,i.instance.exports)},errors:n.importObjectErrors,libmemory:i.instance.exports,memory_values:r,js:{memory:r}},l=new e.BasicREPL(o);function O(e){if(void 0===e)return void console.log("skip");if("none"===e.tag)return;const t=document.createElement("pre");switch(document.getElementById("output").appendChild(t),e.tag){case"num":t.innerText=String(e.value);break;case"bool":t.innerHTML=e.value?"True":"False";break;case"object":t.innerHTML=`<${e.name} object at ${e.address}`;break;default:throw new Error(`Could not render value: ${e}`)}}function p(e){e instanceof t.TypeCheckError&&(console.log(e.getA()),console.log(e.getErrMsg()));const r=document.createElement("pre");document.getElementById("output").appendChild(r),r.setAttribute("style","color: red"),r.innerText=String(e)}document.getElementById("run").addEventListener("click",(function(t){l=new e.BasicREPL(o);const r=document.getElementById("user-code");document.getElementById("output").innerHTML="",l.run(r.value).then((e=>{O(e),console.log("run finished")})).catch((e=>{p(e),console.log("run failed",e)}))})),function(){document.getElementById("output").innerHTML="";const e=document.getElementById("next-code");e.addEventListener("keypress",(t=>{if(t.shiftKey&&"Enter"===t.key);else if("Enter"===t.key){t.preventDefault();const r=document.createElement("div"),s=document.createElement("span");s.innerText="»",r.appendChild(s);const n=document.createElement("textarea");n.disabled=!0,n.className="repl-code",r.appendChild(n),document.getElementById("output").appendChild(r);const a=e.value;n.value=a,e.value="",l.run(a).then((e=>{O(e),console.log("run finished")})).catch((e=>{p(e),console.log("run failed",e)}))}}))}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,